var tipuesearch = {"pages": [{'title': 'About', 'text': "電腦輔助設計在解決 ____ 問題? \n Don’t confuse essence with tools.\xa0 \n \n ( source ) \n 這裡是國立虎尾科技大學-機械設計工程系-電腦輔助設計實習課程網站. \n Repository:  https://github.com/mdecourse/cad2021 \n Github Pages:  https://mde.tw/cad2021 \n Zulipchat:  https://kmolab.zulipchat.com \n Onshape:  https://www.onshape.com/en/education/ \n CoppeliaSim:  https://www.coppeliarobotics.com/ \n CAD History.pdf \n CAD Book.pdf \n https://github.com/CadQuery/cadquery \n https://github.com/CadQuery/CQ-editor \n https://github.com/alainrinder/quoridor.py , RoboDK and CoppeliaSim \n https://github.com/Quentin18/Quoridor-Online \n https://github.com/mrkvost/quoridor \n https://marmelab.com/blog/2019/10/24/quoridor-part-1.html \n Openspiel: framework for reinforcement learning in games \n https://github.com/CadQuery/cadquery \n https://github.com/gorisanson/quoridor-ai \n https://github.com/zack-hill/quoridor-web \n Mastering Quoridor  (thesis) \n 在  CoppeliaSim  建立步步為營桌遊場景, 以按鍵控制兩人, 四人或六人對陣. \n 設法建立電腦程式, 可在  CoppeliaSim  場景中與單一使用者或多使用者對陣. \n 是否也能利用  RoboDK  或  Webots  建立對應場景? \n 四人步步為營桌遊  ( 線上版 ,  強化學習 ,  AI Player ) \n 六人步步為營桌遊 \n Onshape Featurescript:  https://cad.onshape.com/FsDoc/ \n Beginner's Guide to Featurescript  (Video) \n Custom Features \n Spur Gear  ( Update ) \n SolidWorks API:  http://mde.tw/cad2020/content/HW1_SW.html \n Inventor API:  http://mde.tw/cad2020/content/HW1_INV.html \n NX API:  http://mde.tw/cad2020/content/HW1_NX.html \n 電腦輔助設計室與協同設計室行事曆 \n 全頁檢視 \n \n", 'tags': '', 'url': 'About.html'}, {'title': 'Examples', 'text': 'Onshape to Robot:  https://onshape-to-robot.readthedocs.io/en/latest/ \n Onshape to Matlab \xa0 \n Inverse Kinematics: \n RoboDK \n CoppeliaSim \n Webots \n https://github.com/Phylliade/ikpy \xa0 \n Onshape to RoboDK, CoppeliaSim and Webots. <= Machine Learning and Reinforcement Learning \n Onshape Ex1 \n \n Onshape Ex2 \n \n', 'tags': '', 'url': 'Examples.html'}, {'title': 'Onshape', 'text': 'https://405232491.gitbooks.io/gitbook_week3/content/week10.html \n Featurescript: \n https://www.onshape.com/en/resource-center/videos/beginners-guide-to-featurescript \n https://cad.onshape.com/FsDoc/ \n https://cad.onshape.com/FsDoc/tutorials/create-a-slot-feature.html \n Featurescript 導引  ( 其他參考資料 ) \n Onshape of cad2019 \n', 'tags': '', 'url': 'Onshape.html'}, {'title': 'Arduino', 'text': 'Uno Simulator:  https://www.sites.google.com/site/unoardusim/services \n Picsimlab: \n https://github.com/lcgamboa/picsimlab \n https://lcgamboa.github.io/ \n https://mplabxpress.microchip.com/mplabcloud/ide \n', 'tags': '', 'url': 'Arduino.html'}, {'title': 'Ethercalc', 'text': 'http://mde.tw/cd2021/content/Programming.html \n 有關 ethercalc: \n 若 ethercalc 與 redis 合用, sheet 資料將會存入 /var/lib/redis/dump.rdb, 此一檔案儲存設定位於 /etc/redis/redis.conf 中的 dbfilename dump.rdb 使用者若要以 root 身分檢視 /var/lib/redis/dump.rdb 可以透過 sudo -s 以 root 身分執行命令. 若以 /etc/init.d/redis-server stop 關閉 redis, 然後執行 ethercalc, sheet 資料將會存在執行命令目錄下的 dump 目錄中. 在結合 redis 使用下的 ethercalc, 若希望 reset /var/lib/redis/dump.rdb 中的資料: sudo -s /etc/init.d/redis-server stop rm /var/lib/redis/dump.rdb /etc/init.d/redis-server start ethercalc 則 /var/lib/redis/dump.rdb 中為空資料. \n', 'tags': '', 'url': 'Ethercalc.html'}, {'title': 'CoppeliaSim', 'text': 'https://www.coppeliarobotics.com/ \n https://robocomp.github.io/web/ \n https://robocomp.github.io/web/gsoc/2019/nikhil_bansal/post02 \n', 'tags': '', 'url': 'CoppeliaSim.html'}, {'title': '強化學習', 'text': 'Pytorch Reinforcement Learning Library: \n https://github.com/thu-ml/tianshou \n', 'tags': '', 'url': '強化學習.html'}, {'title': '課程主題', 'text': 'Solidworks 於 1995 年出現, 在解決 ____ 問題? \n Onshape 的出現, 在解決 ____ 問題? \n 電腦輔助設計實習課程面臨的第一個問題是: \n 我們該採用剛購買的 SolidWorks 2021 單機套件, 目前只能支援 IPv4 網路協定認證 (校方安裝認證的 AutoDesk Inventor 已經支援 IPv6 網路協定認證), 還是直接採用近端免安裝, 可以利用瀏覽器使用的 Onshape？ \n 就方便性而言, 採用 Onshape 有許多優點, 但 SolidWorks 仍然是目前台灣業界普遍採用的參數式電腦輔助設計軟體, 因此若最後仍無法在純 IPv6 環境下取得使用授權, 仍可以設法在上課前五分鐘先以 IPv4 協定上網取得 SolidWorks 的使用授權後, 再切換至純 IPv6 的網路環境 (Why?). 然後主要的零組件繪圖軟體仍以 Onshape 為主. \n AutoDesk Inventor 呢? 其他 NX12 以及 Solvespace 等三套用不用? Inventor 與 NX12 仍會用於透過 Python API 網際程式介面修改既有零件參數尺寸的範例中, 而 Solvespace 則仍會納入透過 Msys2 進行編譯後, 可產生基本參數零組件的課程主題中, 假如 Solvespace 也能用於網際程式 API 零件訂製中的一環, 當然更好. \n 至於為何要在電腦輔助設計室採用純 IPv6 網路連線, 主要原因在於只有如此才能有足夠的頻寬聯外, 讓所有學員都能將近端的個人或協同分組倉儲的改版資料送到 Github.com, Gitlab.com 與 Heroku. \n Git 與 Fossil SCM 的出現分別在解決 ____ 問題? \n 電腦輔助設計實習課程面臨的第二個問題是: \n 課程的主軸為何? 在承接計算機程式與網際內容管理課程之後, 我們希望能夠儘量透過程式方法, 協助解決機電整合產品設計與開發上所面臨的問題. 其中包括: \n 1. 設計歷程中版本保留的議題 - 採用 CMSiMDE 與 Github, Gitlab, Heroku 及 Fossil SCM 再加上 Onshape 中的設計繪圖版本進行管理. \n 2. 從 CAD 轉檔至 CoppeliaSim 時, 能否透過程式方法加速建模流程? \n 3. 產品設計報告除了 CMSiMDE 中的網頁, 簡報與網誌外, 能夠直接透過 Github Actions 適時建立所需的 pdf 文件與雙欄位論文格式檔案? \n 4. 希望在 CoppeliaSim 場景中建立自動化機電整合製造系統, 能否透過手動 IK, 純程式設定 IK 與客製化 IK\xa0 運算模組進行模擬運算? \n 5. CMSiMDE html 是否能夠透過  https://github.com/showdownjs/showdown  轉為 Markdown 檔案後, 進一步再透過 Pandoc 轉為 LaTeX 或 pdf, 以便實現產品開發流程中的  Literate Programming  架構. \n It’s been more than three decades since literate programming was invented by the legendary Donald Knuth. Its promise was immense — creating software which was more reliable, more understandable, more maintainable, and with hugely more teaching value — software which targeted both humans and computers. \n What if we replace the software with physical product,  can we reach out a more reliable, more understandable, more maintainable, and with hugely more teaching value product which targeted both humans and computers. \n 意即: 如何能夠在人與電腦雙重導向的架構中, 完成更可靠, 更令人容易理解, 更易於維護且具備教育價值的產品開發流程. \n 更可靠  - 設計資料不易丟失, 每一個環節都能接受驗證, 針對設計流程提出可信賴且正確運算的結果. \n 更令人容易理解  - 列出與設計相關的每一項細節, 背景說明及參考資料. \n 更容易維護  - 不斷思索如何讓產品設計流程更加快速便捷, 易於管理. \n 具備教育價值  - 留下產品設計歷程中進行決策的所有細節, 並舉出當時所面臨的環境與條件選項, 以供參考追蹤學習. \n 電腦輔助設計實習課程應該要解決 ____ 問題? \n 然後呢? \n \n 從  https://www.pbr-book.org/  帶出  Webots  也許是下一階段有關電腦輔助與協同產品設計相關課程應該進入的領域. ( https://cyberbotics.com/doc/guide/samples-rendering ) \n Oauth2 從取得使用者登入帳號之後, 再根據 session 中的資料與 Fossil SCM 的 password management, 或許就能有效連結 Google, Github, Gitlab 帳號. 亦即, 當網際 Python 程式經由 Oauth2 取得使用者帳號後, 就發出一則 SQL, 讓該用戶在 Fossil SCM 視為已經登入, 如此便可由該帳號對所屬 Fossil SCM 倉儲進行管理. ( https://github.com/mdecourse/fossiloauth ) \n 繼續探究  https://www.coppeliarobotics.com/helpFiles/en/PyRep.htm  在機電整合系統中與視覺辨識及強化學習相關應用. \n \n 利用  Onshape  設計繪圖 (教學使用 course At mde): \n https://learn.onshape.com/collections/onshape-fundamentals-cad \n Onshape Forum:  https://forum.onshape.com/ \n Can we joint  https://dev-portal.onshape.com/ \n Conveyor Calculator \n Digital Manufacturing with Onshape \n https://www.onshape.com/en/resource-center/articles/how-to-onboard-your-first-robotics-team \n Featurescript:  https://cad.onshape.com/FsDoc/ \n Featurescript 參考資料 \n 利用 Featurescript 建立正齒輪程式庫  ( Onshape 版本 ) \n https://www.onshape.com/en/features/custom-features \n 六軸機械手臂在解決 ____ 問題? \n Onshape and CoppeliaSim to create an automation assembly line: \n 六軸機械手臂零組件 \n https://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm \n https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm \n https://www.coppeliarobotics.com/helpFiles/en/simUI-widgets.htm \n https://www.coppeliarobotics.com/helpFiles/en/importExport.htm \n IK and Automation: \n https://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsTutorial.htm \n https://www.coppeliarobotics.com/helpFiles/en/basicsOnIkGroupsAndIkElements.htm \n IK example  (use Onshape create robot assembly and use Lua and Python to control the robot) \n \n', 'tags': '', 'url': '課程主題.html'}, {'title': 'Featurescript', 'text': 'https://cad.onshape.com/FsDoc/  能做什麼? \n http://cadlab.mde.tw/post/onshape-featurescript-cheng-shi-yu-yan.html \n https://cadlab.mde.tw/post/tag/featurescript.html \xa0 \n https://github.com/dcowden/featurescript \n https://www.onshape.com/en/features/custom-features \n https://deep-geometry.github.io/abc-dataset/ \n', 'tags': '', 'url': 'Featurescript.html'}, {'title': 'Bevel Gears', 'text': '參考: \n https://hackaday.io/project/174370-minamil-a-minimal-cnc-mill-and-friends/log/185917-bevel-gears-twos-company \n Featurescript ( source ,  discussion ): \n /*    \n    Bevel Gear pair\n    \n    This custom feature creates a bevel gear pair.\n    \n    TODO:\n     - use better tooth profile. See:\n         https://cad.onshape.com/documents/5742c8cde4b06c68b362d748/v/c65839fc6078faeb4d2aece1/e/01a666571e625f8b819fd75b\n*/\n\nFeatureScript 531;\nimport(path : "onshape/std/geometry.fs", version : "531.0");\n\n\nannotation { "Feature Type Name": "Bevel Gear Pair", "Filter Selector": ["bevel", "gear"]}\nexport const BevelGearPair = defineFeature(function(context is Context, id is Id, definition is map)\n    precondition\n    {\n        annotation {"Name": "Number of teeth for gear 1"}\n        isInteger(definition.Z1, TEETH_BOUNDS);\n        \n        annotation {"Name": "Number of teeth for gear 2"}\n        isInteger(definition.Z2, TEETH_BOUNDS);\n\n        annotation {"Name": "Module"}\n        isReal(definition.m, MODULE_BOUNDS);\n\n        annotation {"Name": "Shafts angle"}\n        isAngle(definition.theta, SHAFT_ANGLE_BOUNDS);\n\n        annotation {"Name": "Teeth width"}\n        isLength(definition.e, TEETH_WIDTH_BOUNDS);\n        \n        annotation {"Name": "Height 1"}\n        isLength(definition.h1, H1_BOUNDS);\n        \n        annotation {"Name": "Height 2"}\n        isLength(definition.h2, H2_BOUNDS);\n        \n        annotation {"Name": "Pressure angle"}\n        isAngle(definition.alpha, PRESSURE_ANGLE_BOUNDS);\n    }\n    \n    {\n        // lambdas\n        // pitch apex to outside pitch distance for a bevel gears pair\n        var pitchApex = function(r1, r2, theta) { return r2 * sin(theta) + (r2 * cos(theta) + r1) / tan(theta); };\n        \n        // cone distance (R) for a bevel gears pair\n        var coneDistance = function(r1, r2, theta) { return sqrt(pitchApex(r1, r2, theta) ^ 2 + r1 ^ 2); };\n\n        // common values for a gear pair\n        const addendum = 1 * definition.m * millimeter;\n        const dedendum = 1.25 * definition.m * millimeter;\n        const r1 = definition.m * definition.Z1 / 2 * millimeter;  // external pitch radius\n        const r2 = definition.m * definition.Z2 / 2 * millimeter;\n        const delta1 = atan(sin(definition.theta) / (definition.Z2 / definition.Z1 + cos(definition.theta)));\n        const delta2 = atan(sin(definition.theta) / (definition.Z1 / definition.Z2 + cos(definition.theta)));\n        const scale_ = 1 - definition.e / coneDistance(r1, r2, definition.theta);  // scale factor for teeth generation\n\n        // gear 1\n        var value1 = {\n            Z: definition.Z1,\n            delta: delta1,\n            scale: scale_,\n            shift1: 0 * millimeter,\n            shift2: 0 * millimeter,\n            rot: 0 * degree,\n            turn: 0\n        };\n        bevelGear(context, id + "1", definition, value1);\n\n        // gear 2\n        var turn_;\n        if ((definition.Z2 % 2) != 0) {\n            turn_ = 0;\n        }\n        else {\n            turn_ = 1;\n        }\n        var value2 = {\n            Z: definition.Z2,\n            delta: delta2,\n            scale: scale_,\n            shift1: pitchApex(r1, r2, definition.theta) + dedendum * sin(delta1),\n            shift2: pitchApex(r2, r1, definition.theta) + dedendum * sin(delta2),\n            rot: definition.theta,\n            turn: turn_\n        };\n        bevelGear(context, id + "2", definition, value2);\n\n    }, {});\n\n\nfunction bevelGear(context is Context, id is Id, definition is map, value is map)\n{\n    /*\n    value = {\n        Z,\n        delta,\n        scale,\n        shift1,\n        shift2,\n        rot,\n        turn\n    }\n    */\n\n    // compute gear geometry\n    const addendum = 1 * definition.m * millimeter;\n    const dedendum = 1.25 * definition.m * millimeter;\n    const r = definition.m * value.Z / 2 * millimeter;  // external pitch radius\n    const ri = r - definition.e * sin(value.delta);     // internal pitch radius\n    const h1 = dedendum * sin(value.delta) + definition.e * cos(value.delta) - dedendum * value.scale * sin(value.delta);\n    const ra1 = r + addendum * cos(value.delta);\n    const rf1 = r - dedendum * cos(value.delta);\n    const ra2 = ri + addendum * cos(value.delta) * value.scale;\n    const rf2 = ri - dedendum * cos(value.delta) * value.scale;\n    const rf1p = rf1 - definition.h1 / tan(value.delta);\n    const rf2p = rf2 - definition.h2 / tan(value.delta);\n    //const rf2pp = rf2 - h1 / tan(value.delta);\n\n    const plane1 = plane(vector(0, 0, 0) * millimeter, vector(0, -1, 0), vector(1, 0, 0));\n    const sketch1 = newSketchOnPlane(context, id + "sketch1", {"sketchPlane": plane1});\n    \n    skPolyline(sketch1, "polyline1", {\n        points : [\n            vector(0 * millimeter, -definition.h1),\n            vector(rf1p, -definition.h1),\n            vector(rf1, 0 * millimeter),\n            vector(rf2, h1),\n            vector(rf2p, h1 - definition.h2),\n            vector(0 * millimeter, h1 - definition.h2),\n            vector(0 * millimeter, -definition.h1)\n        ],\n        constrained: true\n    });\n\n    skSolve(sketch1);\n\n    // rotate extrude segments\n    opRevolve(context, id + "revolve1", {\n        "entities" : qSketchRegion(id + "sketch1"),\n        "axis" : line(vector(0, 0, 0) * millimeter, vector(0, 0, 1)),\n        "angleForward" : 360 * degree\n    });\n\n    // Remove sketch entities no longer required\n    opDeleteBodies(context, id + "delete1", {"entities" : qCreatedBy(id + "sketch1")});\n\n    // teeths generation\n    const plane2 = plane(vector(0, 0, 0) * millimeter, vector(0, 0, 1), vector(1, 0, 0));\n    const sketch2 = newSketchOnPlane(context, id + "sketch2", {"sketchPlane": plane2});\n\n    // outer teeth profile\n    skPolyline(sketch2, "polyline2", {\n        points: gearTooth2D(r / cos(value.delta), definition.m, definition.alpha),\n    });\n\n    skSolve(sketch2);\n    \n    const plane3 = plane(vector(0 * millimeter, 0 * millimeter, definition.e), vector(0, 0, 1), vector(1, 0, 0));\n    const sketch3 = newSketchOnPlane(context, id + "sketch3", {"sketchPlane": plane3});\n\n    // inner teeth profile\n    skPolyline(sketch3, "polyline3", {\n        points: gearTooth2D(value.scale * r / cos(value.delta), value.scale * definition.m, definition.alpha),\n    });\n\n    skSolve(sketch3);\n\n    // generate tooth body\n    opLoft(context, id + "loft1", {\n        "profileSubqueries": [\n            qCreatedBy(id + "sketch2", EntityType.FACE),\n            qCreatedBy(id + "sketch3", EntityType.FACE),\n        ],\n    });\n\n    // Remove sketch entities no longer required\n    opDeleteBodies(context, id + "delete2", {"entities" : qCreatedBy(id + "sketch2")});\n    opDeleteBodies(context, id + "delete3", {"entities" : qCreatedBy(id + "sketch3")});\n\n    // move tooth back in place\n    const matrix1 = rotationMatrix3d(vector(1, 0, 0), value.delta);\n    const transform1 = transform(matrix1, vector(0, 0, 0) * millimeter);\n    const transform2 = transform(vector(0 * millimeter, r, dedendum * sin(value.delta)));\n    opTransform(context, id + "transform1", {\n            "bodies" : qCreatedBy(id + "loft1", EntityType.BODY),\n            "transform": transform2 * transform1\n    });\n\n    // copy teeth all around\n    var transforms = [];\n    var names = [];\n    for (var i = 1; i < value.Z; i += 1) {\n        const matrix = rotationMatrix3d(vector(0, 0, 1), i * 360 / value.Z * degree);\n        transforms = append(transforms, transform(matrix, vector(0, 0, 0) * millimeter));\n        names = append(names, toString(i));\n    }\n    opPattern(context, id + "pattern1", {\n        "entities": qCreatedBy(id + "loft1", EntityType.BODY),\n        "transforms": transforms,\n        "instanceNames": names\n    });\n\n    // merge all parts\n    opBoolean(context, id + "boolean1", {\n        "tools" : qCreatedBy(id, EntityType.BODY),\n        "operationType" : BooleanOperationType.UNION\n    });\n\n    // move gear in place\n    const matrix2 = rotationMatrix3d(vector(0, 0, 1), value.turn * 360 / value.Z / 2 * degree);\n    const transform3 = transform(matrix2, vector(0, 0, 0) * millimeter);\n    const transform4 = transform(vector(0 * millimeter, 0 * millimeter, -value.shift2));\n    const matrix3 = rotationMatrix3d(vector(1, 0, 0), value.rot);\n    const transform5 = transform(matrix3, vector(0, 0, 0) * millimeter);\n    const transform6 = transform(vector(0 * millimeter, 0 * millimeter, value.shift1));\n    opTransform(context, id + "transform2", {\n        "bodies" : qCreatedBy(id, EntityType.BODY),\n        "transform": transform6 * transform5 * transform4 * transform3\n    });\n}\n\n\nfunction gearTooth2D(r is ValueWithUnits, m is number, alpha is ValueWithUnits)\n{\n    // convert polar to cartesian coordinates\n    var polar = function(r, theta) { return r * vector(sin(theta), cos(theta)); };\n\n    // unwind a string this many degrees to go from radius r1 to radius r2\n    var iang = function(r1, r2) { return sqrt((r2 / r1) ^ 2 - 1) / PI * 180 * degree - acos(r1 / r2); };\n\n    // point at radius d on the involute curve\n    var q6 = function(b, s, t, d) { return polar(d, s * (iang(b, d) + t)); };\n\n    // radius a fraction f up the curved side of the tooth\n    var q7 = function(f, r, b, r2, t, s) { return q6(b, s, t, (1 - f) * max(b, r) + f * r2); };\n\n    const Z = 2 * r / (m * millimeter);                      // number of teeth\n    const ra = r + 1 * m * millimeter;                       // radius of outer circle (tête)\n    const rb = r * cos(alpha);                               // radius of base circle (base de la dent)\n    const rf = r - 1.25 * m * millimeter;                    // radius of root circle (pied)\n    const w = m * PI / 2 * millimeter;                       // tooth width at pitch circle\n    const k = -iang(rb, r) - w / 2 / r / PI * 180 * degree;  // angle to where involute meets base circle on each side of tooth\n\n    const offset = vector(0 * millimeter, -r);               // bring back tooth at origin\n\n    var points;\n    if (rf < rb) {\n        points = [\n            polar(rf, k) + offset,\n            q7(0/5, rf, rb, ra, k,  1) + offset, q7(1/5, rf, rb, ra, k,  1) + offset, q7(2/5, rf, rb, ra, k,  1) + offset,\n            q7(3/5, rf, rb, ra, k,  1) + offset, q7(4/5, rf, rb, ra, k,  1) + offset, q7(5/5, rf, rb, ra, k,  1) + offset,\n            q7(5/5, rf, rb, ra, k, -1) + offset, q7(4/5, rf, rb, ra, k, -1) + offset, q7(3/5, rf, rb, ra, k, -1) + offset,\n            q7(2/5, rf, rb, ra, k, -1) + offset, q7(1/5, rf, rb, ra, k, -1) + offset, q7(0/5, rf, rb, ra, k, -1) + offset,\n            polar(rf, -k) + offset,\n            polar(rf, k) + offset  // close profile\n        ];\n    }\n    else {\n        points = [\n            q7(0/5, rf, rb, ra, k,  1) + offset, q7(1/5, rf, rb, ra, k,  1) + offset, q7(2/5, rf, rb, ra, k,  1) + offset,\n            q7(3/5, rf, rb, ra, k,  1) + offset, q7(4/5, rf, rb, ra, k,  1) + offset, q7(5/5, rf, rb, ra, k,  1) + offset,\n            q7(5/5, rf, rb, ra, k, -1) + offset, q7(4/5, rf, rb, ra, k, -1) + offset, q7(3/5, rf, rb, ra, k, -1) + offset,\n            q7(2/5, rf, rb, ra, k, -1) + offset, q7(1/5, rf, rb, ra, k, -1) + offset, q7(0/5, rf, rb, ra, k, -1) + offset,\n            q7(0/5, rf, rb, ra, k,  1) + offset  // close profile\n        ];\n    }\n\n    return points;\n}\n\n\nconst TEETH_BOUNDS = {\n    (unitless) : [4, 25, 250]\n} as IntegerBoundSpec;\n\n\nconst SHAFT_ANGLE_BOUNDS = {\n    (degree) : [5, 90, 175]\n} as AngleBoundSpec;\n\n\nconst MODULE_BOUNDS = {\n    (unitless) : [0.1, 1, 10]\n} as RealBoundSpec;\n\n\nconst TEETH_WIDTH_BOUNDS = {\n    (millimeter) : [0.1, 5, 100],\n    (centimeter) : 0.5,\n    (meter) : 0.005,\n    (inch) : 0.2\n} as LengthBoundSpec;\n\n\nconst H1_BOUNDS = {\n    (millimeter) : [0.1, 1, 50],\n    (centimeter) : 0.1,\n    (meter) : 0.001,\n    (inch) : 0.0375\n} as LengthBoundSpec;\n\n\nconst H2_BOUNDS = {\n    (millimeter) : [0.1, 0.5, 50],\n    (centimeter) : 0.05,\n    (meter) : 0.0005,\n    (inch) : 0.0175\n} as LengthBoundSpec;\n\n\nconst PRESSURE_ANGLE_BOUNDS = {\n    (degree) : [14.999, 20, 25]\n} as AngleBoundSpec;\n \n Bevel Gear2 ( source ,  page ): \n FeatureScript 961;\nimport(path : "onshape/std/geometry.fs", version : "961.0");\n\nannotation { "Feature Type Name" : "Bevel Gear" }\nexport const myFeature = defineFeature(function(context is Context, id is Id, definition is map)\nprecondition\n{\n\t// Define the parameters of the feature type\n\n\tannotation { "Name" : "Module" }\n\tisInteger(definition.module, POSITIVE_COUNT_BOUNDS);  \n\t\n\tannotation { "Name" : "Pressure Angle Input type" }\n\tdefinition.PressAngInputType is PressureAngleType;\n\t\n\tif(definition.PressAngInputType == PressureAngleType.standardPressAngle)\n\t{\n\t\tannotation { "Name" : "Pressure Angle (degrees)" }\n\t\tdefinition.stdPressAngle is stdPressAngles;\n\t}\n\telse\n\t{\n\t\tannotation { "Name" : "Custom Pressure Angle (degrees)"  }\n\t\tisAngle(definition.pressureAngle, ANGLE_360_BOUNDS); \n\t}\n\t\n\tannotation { "Name" : "Number of Teeths in Gear" }\n\tisInteger(definition.gearTeeths, POSITIVE_COUNT_BOUNDS);\n\t\n\tannotation { "Name" : "Face Width" }\n\tisLength(definition.faceWidth, LENGTH_BOUNDS);        \n\t\n\tannotation { "Name" : "Root Fillet Radius" }\n\tisLength(definition.RootFilletRadius, LENGTH_BOUNDS);\n\t\n\tannotation { "Name" : "Gear Ratio" }\n\tisInteger(definition.gearRatio, POSITIVE_COUNT_BOUNDS);\n\t\n\tannotation { "Name" : "Hole Diameter" }\n\tisLength(definition.HoleDia, LENGTH_BOUNDS);   \n\t\n\t//End of Parameter def\n}\n{\n\t// Define the function\'s action\n\t//Calculations for gear nomenclatures\n\n\tvar diameteralPitch = (25.4 / definition.module);        \n\tvar gearPitchDia = (definition.gearTeeths / diameteralPitch) * meter;\n\tdefinition.pinionTeeths = round(definition.gearTeeths / definition.gearRatio);\n\tvar pinionPitchDia = (definition.pinionTeeths / diameteralPitch) * meter;\n\tvar theta = atan(gearPitchDia / pinionPitchDia);\n\n\ttheta = ((theta * 180 / PI) / radian);\n\tvar zOffset = (definition.faceWidth * cos((theta / 2) * degree));\n\n\tif(zOffset > ((pinionPitchDia / 2) * 0.9))\n\t{\n\t\tthrow regenError("Component failed to create - Face Width greater than cone distance");\n\t}\n\t\n\tif(zOffset < ((pinionPitchDia / 2) * 0.2))\n\t{\n\t\tthrow regenError("Component failed to create - Face Width less than minimum required value.");\n\t}\n\t\n\tvar pitchDiameter = gearPitchDia + definition.faceWidth * sin(theta * 0.5 * degree);\n\tvar planeOffset = 0 * meter;        \n\t// Recalculate diametral Pitch\n\tdiameteralPitch = definition.gearTeeths / pitchDiameter * meter;\n\t\n\tvar dedendum =  0;        \n\tdedendum = calculateDedendum(context, diameteralPitch) * meter;\n\t\n\tvar rootDiameter = pitchDiameter - (2 * dedendum);\n\n\tvar baseCircleDiameter = pitchDiameter * cos(definition.pressureAngle);\n\n\tvar outsideDiameter = (definition.gearTeeths + 2) / diameteralPitch * meter;\n\t\n\t// Add base circle sketch;               \n\tvar baseCircle1 = newSketch(context, id + "baseCircle1", {\n\t\t\t"sketchPlane" : qCreatedBy(makeId("Front"), EntityType.FACE)\n\t});\n\t\n\t\tskCircle(baseCircle1, "baseCircle1", {\n\t\t\t   "center" : vector(0, 0) * meter,\n\t\t\t   "radius" : 1 * (baseCircleDiameter / 2)\n\t\t});\n\t\n\tskSolve(baseCircle1);\n\n\t// End of base circle sketch\n\t\n\t// Calculate and define nomenclatures for offset Plane for Loft operation\n\tvar pitchDiameter2 = gearPitchDia - (definition.faceWidth * sin(theta * degree) / 2);\n\t\n\tvar diameteralPitch2 = definition.gearTeeths / pitchDiameter2 * meter;\n\n\tvar dedendum2 = 0;\n\tdedendum2 = calculateDedendum(context, diameteralPitch2) * meter;\n\tif (dedendum2 == 0)\n\t\tthrow regenError("failed to calculate value of dedndum");\n\t\n\tplaneOffset = zOffset;\n\t\n\t//Creating Offset Plane\n\topPlane(context, id + "plane1", {\n\t\t\t"plane" : plane(vector(0, (-1) *  zOffset / meter, 0) * meter, vector(0, -1, 0 )),\n\t\t\t"width" : 6 * inch,\n\t\t\t"height" : 6 * inch\n\t});\n\t\n\tvar rootDiameter2 = pitchDiameter2 - (2 * dedendum2);\n\n\tvar baseCircleDiameter2 = pitchDiameter2 * cos(definition.pressureAngle);\n\n\tvar outsideDiameter2 = (definition.gearTeeths + 2) / diameteralPitch2 * meter;\n\t\n\t// Add base circle 2 sketch\n\tvar baseCircle2 = newSketch(context, id + "baseCircle2", {\n\t\t\t"sketchPlane" : qCreatedBy((id + "plane1"), EntityType.FACE)\n\t});\n\t\n\tskCircle(baseCircle2, "baseCircle2", {\n\t\t\t"center" : vector(0, 0) * meter,\n\t\t\t"radius" : 1 * (baseCircleDiameter2 / 2)\n\t});  \n\t\t\n\tskSolve(baseCircle2);\n\t// End of base circle sketch\n   \n\t// Create sketch entity for shaft.\n\tvar shaftCircle = newSketch(context, id + "shaftCircle", {\n\t\t\t"sketchPlane" : qCreatedBy(makeId("Front"), EntityType.FACE)\n\t});\n\n\tskCircle(shaftCircle, "shaftCircle", {\n\t\t\t"center" : vector(0, 0) * meter,\n\t\t\t"radius" : 1 * (definition.HoleDia / 2)\n\t});\n\t\n\tskSolve(shaftCircle);\n\t// ### Executing Loft Operation ############################################################       \n\topLoft(context, id + "loft1", {\n\t\t\t"profileSubqueries" : [ qCreatedBy(id + "baseCircle1", EntityType.FACE), qCreatedBy(id + "baseCircle2", EntityType.FACE) ],\n\t});\n\t// Begining Calculations for Involute points for gear teeth sketch.        \n\tvar involutePoints1 = [];\n\tvar involutePoints2 = [];\n\tvar tempInvoluteSet = [];        \n\n\tvar toothThicknessAngle = ((2 * PI) / (2 * definition.gearTeeths)) * 180 / PI;       \n\tvar involutePointCount = 15;    \n\tvar involuteIntersectionRadius = baseCircleDiameter / 2;\n\tvar involuteSize = (outsideDiameter / 2) - (baseCircleDiameter / 2);\n  \n\tplaneOffset = 0 * meter;\n\n\tfor (var t = 0; t < involutePointCount; t += 1)\n\t{    \n\t\tinvoluteIntersectionRadius = (baseCircleDiameter / 2.0) + ((involuteSize / (involutePointCount - 1)) * t);\n\t\tvar newPt = involutePoint(context, baseCircleDiameter / 2, involuteIntersectionRadius, planeOffset);\n\t\ttempInvoluteSet = append(tempInvoluteSet, newPt);\n\t}\n\t// Determine the angle between the X axis and a line between the origin of the curve and the intersection point between the involute and the pitch diameter circle.\n\n\tvar pitchInvolutePt = involutePoint(context, baseCircleDiameter / 2, pitchDiameter / 2, planeOffset);\n\t\t\n\tvar pitchPointAngle = atan(pitchInvolutePt[1] / pitchInvolutePt[0]) * 180 /(PI * radian);\n\n\t// Determine the angle defined by the tooth thickness as measured at the pitch diameter circle.\n\n\t//Angle to rotate the curve\n\tvar rotateAngle = (-1) * (toothThicknessAngle / 2 + pitchPointAngle);\n\t// Rotate the involute so the intersection point lies on the x axis.\n\tvar cosAngle = cos(rotateAngle * degree);\n\tvar sinAngle = sin(rotateAngle * degree);\n\n\tfor (var pt in tempInvoluteSet)\n\t{\n\t\tpt[0] = pt[0] * cosAngle - pt[1] * sinAngle;\n\t\tpt[1] = pt[0] * sinAngle + pt[1] * cosAngle;\n\t\tinvolutePoints1 = append(involutePoints1, vector( pt[0], pt[1] ) * meter);\n\t\t// Create a new set of points with a negated y.  This effectively mirrors the original points about the X axis. \n\t\tvar negatedPt = vector(pt[0], (-1) * pt[1] );\n\t\tinvolutePoints2 = append(involutePoints2, negatedPt * meter);\n\t}\n\n\t// Create sketch for Teeth Profile\n\tvar Involute1 = newSketch(context, id + "Involute1", {\n\t\t\t"sketchPlane" : qCreatedBy(makeId("Front"), EntityType.FACE)\n\t});\n\n\tskFitSpline(Involute1, "spline1", {\n\t\t\t"points" : involutePoints1\n\t});\n\t\n\tskFitSpline(Involute1, "spline2", {\n\t\t\t"points" : involutePoints2\n\t});\n\t\n\tskArc(Involute1, "gearTop", {\n\t\t\t"start" : 1 * involutePoints1[involutePointCount - 1] ,\n\t\t\t"mid" : 1 * vector(outsideDiameter / 2, 0 * meter ),\n\t\t\t"end" : 1 * involutePoints2[involutePointCount - 1]\n\t});\n\t\t\t\n   skArc(Involute1, "gearBase", {\n\t\t\t"start" : 1 * involutePoints1[0] ,\n\t\t\t"mid" : 1 * vector(baseCircleDiameter / 2, 0 * meter ),\n\t\t\t"end" : 1 * involutePoints2[0]\n\t});\n\n\tskSolve(Involute1);\n\t//##### Begining Calculations for Involute points for gear teeth sketch on offset Plane for loft operation. \n\tvar tempInvoluteSet2 = [];\n\tvar involutePts1 = [];\n\tvar involutePts2 = [];\n\t\n\tinvoluteIntersectionRadius = baseCircleDiameter2 / 2;\n\tinvoluteSize = (outsideDiameter2 / 2) - (baseCircleDiameter2 / 2);        \n\tplaneOffset = zOffset;       \n\n\tfor (var t = 0; t < involutePointCount; t += 1)\n\t{    \n\t\tinvoluteIntersectionRadius = (baseCircleDiameter2 / 2.0) + ((involuteSize / (involutePointCount - 1)) * t);\n\t\tvar newPt = involutePoint(context, baseCircleDiameter2 / 2, involuteIntersectionRadius, planeOffset);\n\t\ttempInvoluteSet2 = append(tempInvoluteSet2, newPt);\n\t}\n\t// Determine the angle between the X axis and a line between the origin of the curve and the intersection point between the involute and the pitch diameter circle.\n\n\tpitchInvolutePt = involutePoint(context, baseCircleDiameter2 / 2, pitchDiameter2 / 2, planeOffset);\n\tdebug(context, pitchInvolutePt);\n\tpitchPointAngle = atan(pitchInvolutePt[1] / pitchInvolutePt[0]) * 180 /(PI * radian);\n\n\t// Determine the angle defined by the tooth thickness as measured at the pitch diameter circle.\n\n\t//Angle to rotate the curve\n\trotateAngle = (-1) * (toothThicknessAngle / 2 + pitchPointAngle);//-backlashAngle\n\t// Rotate the involute so the intersection point lies on the x axis.\n\tcosAngle = cos(rotateAngle * degree);\n\tsinAngle = sin(rotateAngle * degree);\n\n\tfor (var pt in tempInvoluteSet2)\n\t{\n\t\tpt[0] = pt[0] * cosAngle - pt[1] * sinAngle;\n\t\tpt[1] = pt[0] * sinAngle + pt[1] * cosAngle;\n\t\tinvolutePts1 = append(involutePts1, vector( pt[0], pt[1] ) * meter);\n\t// Create a new set of points with a negated y.  This effectively mirrors the original points about the X axis. \n\t\tvar negatedPt = vector(pt[0], (-1) * pt[1] );\n\t\tinvolutePts2 = append(involutePts2, negatedPt * meter);\n\t}\n\t// Create sketch for Teeth Profile for offset plane\n\tvar Involute2 = newSketch(context, id + "Involute2", {\n\t\t"sketchPlane" : qCreatedBy((id + "plane1"), EntityType.FACE)\n\t});\n\n\tskFitSpline(Involute2, "spline1", {\n\t\t\t"points" : involutePts1\n\t});\n\t\n\tskFitSpline(Involute2, "spline2", {\n\t\t\t"points" : involutePts2\n\t});\n\t\n\tskArc(Involute2, "gearTop", {\n\t\t\t"start" : 1 * involutePts1[involutePointCount - 1] ,\n\t\t\t"mid" : 1 * vector(outsideDiameter2 / 2, 0 * meter ),\n\t\t\t"end" : 1 * involutePts2[involutePointCount - 1]\n\t});\n\t\t\t\n\tskArc(Involute2, "gearBase", {\n\t\t\t"start" : 1 * involutePts1[0] ,\n\t\t\t"mid" : 1 * vector(baseCircleDiameter2 / 2, 0 * meter ),\n\t\t\t"end" : 1 * involutePts2[0]\n\t});\n\n\tskSolve(Involute2);\n\n\t// Loft Operation for Teeth Profile\n\topLoft(context, id + "loft2", {\n\t\t\t"profileSubqueries" : [ qCreatedBy(id + "Involute1", EntityType.FACE), qCreatedBy(id + "Involute2", EntityType.FACE) ],\n\t});\n\t\n\topFitSpline(context, id + "Axis", {\n\t\t\t"points" : [vector( 0,  0,  0) * inch, vector(0,  -1, 0) * inch] });\n\tconst axis = qCreatedBy(id + "Axis", EntityType.EDGE);\n\n\t// Circular patteren operation for creating all the terth profile bodies around base.\n\tcircularPattern(context, id + "gearTeeths", {\n\t\t\t"patternType" : PatternType.PART,\n\t\t\t"entities" : qCreatedBy(id + "loft2", EntityType.BODY),\n\t\t\t"axis" : axis,\n\t\t\t"angle" : 360 * degree,\n\t\t\t"instanceCount" : definition.gearTeeths,\n\t\t\t"equalSpace" : true\n\t});\n\t\n});\n\n//Function to calculate dedendum value.\nexport function calculateDedendum(context, diametralPitch)returns number\n{\n\tif(diametralPitch  < ((20 * (PI / 180)) - 0.000001))\n\t{\n\t\treturn (1.157 / diametralPitch);\n\t}\n\telse\n\t{\n\t\tvar circularPitch = PI / diametralPitch;\n\t\tif(circularPitch >= 20)\n\t\t{\n\t\t\treturn (1.25 / diametralPitch);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (1.2 / diametralPitch);\n\t\t}\n\t}\n}\n\nconst PRESSURE_ANGLE_BOUNDS =\n{\n\t(degree) : [14.5, 20, 25]\n} as AngleBoundSpec;\n\nexport enum stdPressAngles\n{\n\tannotation { "NAME" : "14.5 degree" }\n\tPressAngle_14_5 ,\n\tannotation { "NAME" : "20 degree" }\n\tPressAngle_20,\n\tannotation { "NAME" : "25 degree" }\n\tPressAngle_25\n}\n\nexport enum PressureAngleType\n{\n\tannotation { "Name" : "Standard Pressure Angle(Recomended)" }\n\tstandardPressAngle,\n\tannotation { "Name" : "Custom Pressure Angle" }\n\tcustomPressAngle\n}\n\n// Function to calculate Involute Point coordinates / vectors\nexport function involutePoint(context, baseCircleRadius, involuteIntersectionRadius, planeOffset)returns Vector\n{\n\tvar l = sqrt(involuteIntersectionRadius ^ 2 - baseCircleRadius ^ 2 );\n\n\tvar alpha = (l / baseCircleRadius);\n\talpha = alpha * 180 / PI;\n\n\tvar thta = alpha - (180 / PI) * (acos(baseCircleRadius / involuteIntersectionRadius)) / radian;\n\n\tvar x = involuteIntersectionRadius * cos(thta * degree) / meter;\n\tvar y = involuteIntersectionRadius * sin(thta * degree) / meter;\n\n\treturn vector(x,y);\n} \n \n \n \n', 'tags': '', 'url': 'Bevel Gears.html'}, {'title': 'Oauth2', 'text': "本頁面相關內容的討論, 最終催生出: \n https://github.com/mdecourse/fossiloauth \n Flask 與 Fossil SCM\xa0 在同一台主機, 可以透過 Oauth2 登入後, 由 Python 程式導引 redirect 登入 Fossil SCM 主機. 其中可以讓 Python 讀取使用者在 Fossil SCM 倉儲中當下所設定的帳號密碼後登入. \n from flask import Flask\nfrom flask import make_response, request, redirect\nimport requests\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'SUPER SECRET'\n\n@app.route('/')\ndef hello_world():\n    with requests.Session() as s:\n        url = 'https://fossil.kmol.info/u/yen/login'\n        post_var = {'u': 'username', 'p': 'password'}\n        headers = {'X-Requested-With': 'XMLHttpRequest'}\n        result = s.post(url, data = post_var, headers = headers)\n        cookie = s.cookies.get_dict()\n        key = list(cookie.keys())[0]\n        value = cookie[key]\n        '''\n        print(key, value)\n        resp = redirect(url)\n        resp.set_cookie(key, value)\n        return resp\n        '''\n        response = make_response(redirect(url))\n        response.set_cookie(key, value)\n        return response\n        \n\nif __name__ == '__main__':\n    app.run() \n 接下來的考量是, 能否不讓使用者直接從 Fossil SCM web 介面中登入? \n", 'tags': '', 'url': 'Oauth2.html'}, {'title': 'SQLite', 'text': '本頁面相關內容的討論, 最終催生出: \n https://github.com/mdecourse/fossiloauth \n Cookie \n https://www.valentinog.com/blog/cookies/ \n 利用 Python send cookie: \n https://stackoverflow.com/questions/7164679/how-to-send-cookies-in-a-post-request-with-the-python-requests-library \n import requests\n\ncookies = {\'enwiki_session\': \'17ab96bd8ffbe8ca58a78657a918558\'}\n\nr = requests.post(\'http://wikipedia.org\', cookies=cookies) \n pip3 install selenium \n brew install geckodriver \n local cookie set to Firefox \n import requests\nfrom selenium import webdriver\n\ndriver = webdriver.Firefox()\nsession = requests.Session()\n\nheaders = {\'X-Requested-With\': \'XMLHttpRequest\'}\n\nurl = \'https://fossil.kmol.info/u/yen/login\'\ndriver.get(url)\n\npost_var = {\'u\': \'username\', \'p\': \'password\'}\n  \nresult = session.post(url, data = post_var, headers = headers)\n#print(result)\ncookie = session.cookies.get_dict()\n#print(cookie)\ndriver.delete_all_cookies()\nresponse_cookies_browser = [{\'name\':name, \'value\':value} for name, value in cookie.items()]\nc = [driver.add_cookie(c) for c in response_cookies_browser]\n#the browser now contains the cookies generated from the authentication    \ndriver.get(url)\n\n\n\n\n \n Use Flask request get remote_addr \n from flask import request\nfrom flask import jsonify\n\n@app.route("/get_my_ip", methods=["GET"])\ndef get_my_ip():\n    return jsonify({\'ip\': request.remote_addr}), 200\n\n\'\'\'\nwith app.test_request_context(environ_base={\'REMOTE_ADDR\': \'10.1.2.3\'}):\n# https://flask.palletsprojects.com/en/2.0.x/testing/\n\'\'\'\n \n 利用 Python requests 登入 Fossil SCM 後取得對應的 cookie: \n import requests\n\nsession = requests.Session()\n\nheaders = {\'X-Requested-With\': \'XMLHttpRequest\'}\n\nurl = \'https://fossil.kmol.info/u/yen/login\'\npost_var = {\'u\': \'username\', \'p\': \'password\'}\n  \nresult = session.post(url, data = post_var, headers = headers)\n#print(result)\nprint(session.cookies.get_dict())\n\n\n\n \n https://fossil-scm.org/forum/forumpost/59c6552555  (Fossil SCM with json) \n Why Fossil-SCM is an excellent choice for introductory programming courses  \n https://www.sqlite.org/index.html \n https://medium.com/@nerdijoe/how-to-deploy-flask-on-iis-with-windows-authentication-733839d657b7 \n https://atrium.ai/resources/how-to-implement-oauth-2-0-login-for-python-flask-web-server-applications/ \n Fossil SCM \n https://fossil-scm.org/home/doc/trunk/www/json-api/api-auth.md \n Why using Fossil SCM:  https://andreiclinciu.net/why-im-using-fossil-scm-instead-of-other-source-control-systems \n User passwords are local configuration information. \n Passwords are stored in the PW field of the USER table. In older versions of Fossil (prior to 2010-01-11) the password is stored as cleartext. In newer versions of Fossil, the password can be either cleartext or an SHA1 hash (written as a 40-character lower-case hexadecimal number). If the USER.PW field contains a 40-character string, that string is assumed to be a SHA1 hash. If the size of USER.PW is anything other than 40 characters, then it is understood as a plain-text password. \n Whenever a password is changed using the web interface or using the "user" command-line method, the new password is stored using the SHA1 encoding. Thus, cleartext passwords will gradually migrate to become SHA1 passwords. All remaining cleartext passwords can be converted to SHA1 passwords using the following command: \xa0\xa0\xa0 fossil test-hash-passwords REPOSITORY-NAME Remember that converting from cleartext to SHA1 passwords is an irreversible operation. \n The only way to insert a new cleartext password into the USER table is to do so manually using SQL commands. For example: \xa0\xa0\xa0 UPDATE user SET pw=\'asdfg\' WHERE login=\'alice\'; Note that an password that is an empty string or NULL will disable all login for that user. Thus, to lock a user out of the system, one has only to set their password to an empty string, using either the web interface or direct SQL manipulation of the USER table. Note also that the password field is essentially ignored for the special users named "anonymous", "developer", "reader", and "nobody". It is not possible to authenticate as users "developer", "reader", or "nobody" and the authentication protocol for "anonymous" uses one-time captchas not persistent passwords \n Web Interface Authentication When a user logs into Fossil using the web interface, the login name and password are sent in the clear to the server. The server then hashes the password and compares it against the value stored in USER.PW. If they match, the server sets a cookie on the client to record the login. This cookie contains a large amount of high-quality randomness and is thus intractable to guess. The value of the cookie and the IP address of the client is stored in the USER.COOKIE and USER.IPADDR fields of the USER table on the server. The USER.CEXPIRE field holds an expiration date for the cookie, encoded as a Julian day number. On all subsequent HTTP requests, the cookie value is matched against the USER table to enable access to the repository. \n 因此若 Python 經由 Oauth2 流程登入後, 若能建立 \n USER.COOKIE \n USER.IPADDR \n USER.CEXPIRE \n 所需資料, 並送出與\xa0 USER.COOKIE 對應的 cookie 至 client, 將可視為該帳號已經登入 Fossil SCM. \n fossil sql -R repo-name.fossil .schema user CREATE TABLE repository.user( \xa0 uid INTEGER PRIMARY KEY, \xa0 login TEXT UNIQUE, \xa0 pw TEXT, \xa0 cap TEXT, \xa0 cookie TEXT, \xa0 ipaddr TEXT, \xa0 cexpire DATETIME, \xa0 info TEXT, \xa0 mtime DATE, \xa0 photo BLOB ); \n Sync Protocol Authentication A different authentication mechanism is used when one repository wants to sync (or push or pull or clone) another repository. When two repositories are syncing, the one that initiates the transaction is the client and the repository that responds is the server. The client works by sending HTTP requests to the server with a method of "xfer" and a content-type of "application/x-fossil". The content is Zlib-compressed text consisting of "cards" of instructions. The first card of this content is a "login" card responsible for authentication. The login card contains the login name of the user and a "signature" where the signature is the SHA1 hash of a nonce and the value of USER.PW. The nonce is the SHA1 hash of the remainder of the request content after the newline (ASCII 14) character that terminates the login card. \n Fossil has the following option in /setup_access: ------------------------------------------------------------------------ \xa0Allow REMOTE_USER authentication When enabled, if the REMOTE_USER environment variable is set to the login name of a valid user and no other login credentials are available, then the REMOTE_USER is accepted as an authenticated user. (Property: "remote_user_ok")  ------------------------------------------------------------------------ It seems to me that one should be able to configure a web server to authenticate against LDAP/AD and host Fossils behind that.\xa0 One would still have to add users to Fossil that match the username that is provided by the authentication, but I believe this should work. \n At the Access setup of the Fossil SCM web page: \n \xa0Allow REMOTE_USER authentication When enabled, if the REMOTE_USER environment variable is set to the login name of a valid user and no other login credentials are available, then the REMOTE_USER is accepted as an authenticated user. (Property: "remote_user_ok") \n By using Python: \n https://stackoverflow.com/questions/34418545/flask-faking-request-environremote-user-for-testing \n https://tedboy.github.io/flask/generated/generated/flask.Request.remote_user.html \n By using command: \n echo "replace into config(name,value) values(\'remote_user_ok\',1)" | fossil sql -R $repository_filename \n Allow HTTP_AUTHENTICATION authentication When enabled, allow the use of the HTTP_AUTHENTICATION environment variable or the "Authentication:" HTTP header to find the username and password. This is another way of supporting Basic Authentication. (Property: "http_authentication_ok") \n https://stackoverflow.com/questions/6999565/python-https-get-with-basic-authentication \n https://stackoverflow.com/questions/1453264/python-https-client-with-basic-authentication-via-proxy \n https://serverfault.com/questions/360293/setting-remote-user-for-trac-in-gunicorn-behind-nginx \n References: \n https://fossil-scm.org/forum/forumpost/363b4668b3 \n https://fossil-scm.org/forum/forumpost/df0df6720d \n https://pypi.org/project/pystunnel/ \n 主題一: \n Python 與 SQLite \n CMSiMDE 與 SQLite \n 利用 Python 讀取 Fossil SCM 資料庫內容 \n https://github.com/mdecourse/fossilpy \n https://github.com/ggicci/python-fossil-delta \n', 'tags': '', 'url': 'SQLite.html'}, {'title': 'Althttpd', 'text': 'https://sqlite.org/althttpd/doc/trunk/althttpd.md \n \n', 'tags': '', 'url': 'Althttpd.html'}, {'title': 'Elixir', 'text': 'Elixir 在解決 ____, ____, ____, ____等問題. \n A history of Erlang \n https://github.com/dwyl/learn-elixir \n https://inquisitivedeveloper.com/tag/lwm-elixir/ \n https://www.phoenixframework.org/ \n Dart + Phonix: \n https://pub.dev/packages/phoenix_socket \n https://pub.dev/packages/phoenix_wings \n https://github.com/approov/quickstart-flutter-elixir-phoenix-channels \n Erlang and Elixir portable.7z  for Windows \n Mac:  https://medium.com/@cseanc/setup-elixir-phoenix-on-your-mac-85c9e491fb1 \n https://ithelp.ithome.com.tw/articles/10192375  (函數式編程 Elixir 簡介) \n Can mechanical designer also take advantage of Elixir? \n https://phoenixframework.org/ \n Erlang and Elixir for Imperative Programmers  (ebook) \n \n \n \n \n \n https://www.kabisa.nl/tech/when-elixirs-performance-becomes-rust-y/ \n https://www.infoq.com/news/2019/07/rust-elixir-performance-at-scale/ \n Elixir and IOT: \n https://medium.com/@carlogilmar/learning-iot-first-steps-with-elixir-310c4ad4ab15 \n https://www.verypossible.com/insights/aws-iot-core-elixir-and-nerves-a-crash-course   \n \n Elixir and reinforcement learning: \n https://github.com/doctorcorral/gyx \n https://medium.datadriveninvestor.com/elixir-e-reinforcement-learning-i-3ecd9399d03c \n https://www.erlang-solutions.com/blog/how-to-build-a-machine-learning-project-in-elixir/ \n https://elixirforum.com/search?q=machine%20learning \n', 'tags': '', 'url': 'Elixir.html'}, {'title': '可攜 Elixir', 'text': '採用 Elixir 希望解決 ____ 問題? \n https://elixir-lang.org/blog/2013/08/08/elixir-design-goals/   \n 在 Windows 環境中建立可攜 Erlang 與 Elixir 的方法, 是先在操作系統中安裝後, 將 Erlang 與 Elixir 目錄內容取出放入可攜系統 y:\\ 中的 elixir 目錄後, 在控制台中分別解除 Erlang 與 Elixir 的系統安裝, 然後必須要進入取出放入隨身碟或系統其他目錄後, 先修改: \n Y:\\elixir\\erl10.7\\bin 以及 Y:\\elixir\\erl10.7\\erts-10.7\\bin 目錄中的兩個 erl.ini: \n 將原先設定為操作系統安裝的路徑, 改為隨身可攜系統的對應路徑: \n [erlang] \nBindir=Y:\\\\elixir\\\\erl10.7\\\\erts-10.7\\\\bin \nProgname=erl \nRootdir=Y:\\\\elixir\\\\erl10.7\\\\ \n \n 至於在隨身系統啟動後, 開啟互動式 Elixir 的 batch file, elixir.bat 內容為: \n "y:\\elixir\\erl10.7\\bin\\werl.exe" -env ERL_LIBS "y:\\elixir\\Elixir\\lib" -user Elixir.IEx.CLI -extra --no-halt \n 而 erlang.bat 則為: \n echo off\ny:\\elixir\\erl10.7\\bin\\werl.exe \n 另外, 在啟動隨身系統的 start_ipv6.bat 中則加入: \n REM for Erlang and Elixir\nset path_erlang=%Disk%:\\elixir\\erl10.7\\bin\\;%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin;%Disk%:\\elixir\\elixir\\bin\\;\nset ERTSPATH=%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin\nset ERLINI=%Disk%:\\elixir\\erl10.7\\erts-10.7\\bin\\erl.ini \n 並將 %path_erlang% 納入隨後的 Path 環境變數中. \n 如此就可以在啟動隨身系統後, 以 elixir.bat 啟動 Elixir 互動環境, 而執行 erlang.bat 則啟動 Erlang\xa0 互動環境. \n 根據上述流程設定的 Elixir 可攜系統下載: \n Erlang 10.7 and Elixir portable.7z  for Windows (下載 62MB , 解開壓縮後 340MB) \n 基本操作:  https://inquisitivedeveloper.com/lwm-elixir-75/', 'tags': '', 'url': '可攜 Elixir.html'}, {'title': '可攜系統', 'text': '可攜系統在解決 ____ 問題? \n portablekmol_base.7z  (下載 118MB, 解開壓縮後 148MB) \n 包括 data 目錄與 start_ipv6.bat, start_ipv4.bat, stop.bat \n 功能: 啟動後可以啟動 SciTE 編輯器, 可用於類解譯 ANSI C 程式, 以及  Solvespace . \n Python395.7z  (下載 123MB, 解開壓縮後 495MB) \n 功能: 與  portablekmol_base.7z  結合後, 可以利用 SciTE 編輯器執行 Python 程式. \n 請注意: 由於 CMSiMDE 改用 adhoc ssl_context 啟動近端伺服器, 因此 Python 解譯系統必須加裝 pyopenssl 模組: pip install pyopenssl,\xa0 且安裝前要先將系統 proxy 暫時關閉. \n portablegit_2.31.1.7z  (下載 60MB, 解開壓縮後 286MB) \n 功能: 與  portablekmol_base.7z  結合後, 可以利用可攜程式系統的命令列視窗執行 git 指令. \n lua-5.4.3.7z  (下載 662KB, 解開壓縮後 4MB) \n 功能: 與  portablekmol_base.7z  結合後, 可以利用 SciTE 編輯器執行 Lua 程式. \n PUTTY.7z  (下載 940KB, 解開壓縮後 4MB) \n 功能: plink.exe 可以與 git 結合, 利用 Putty.exe 中所設定的 session 名稱進行 SSH 連線. \n msys64_20210419.7z  (下載 3.5GB, 解開壓縮後 12GB) \n 功能:  Msys2  安裝 \n pacman -S mingw-w64-x86_64-toolchain\npacman -Sy mingw-w64-x86_64-qt5\npacman -Sy mingw-w64-x86_64-qt5-static\npacman -Sy mingw-w64-x86_64-ffmpeg\npacman -Sy mingw-w64-x86-64-cmake \n msys64_20210419_clean.7z  (下載 87MB , 解開壓縮後 374MB) \n 功能: 尚未安裝任何 Package 的  Msys2  系統. \n rust_1.53.0_portable_for_msys2.7z  (下載 147MB , 解開壓縮後 1.13GB) \n Erlang 10.7 and Elixir portable.7z  for Windows (下載 62MB , 解開壓縮後 340MB) \n CoppeliaSimEdu_4.1.0_rev1.7z  (下載 183MB, 解開壓縮後 438MB) \n 功能: 可免費提供大學機電資整合課程使用, 且開放原始碼, 可用於機電資控制系統設計與模擬 (InfoMechaTronic control system design and simulation). \n robodk_522.7z  (下載 364MB, 解開壓縮後 1GB) \n 功能: 提供限縮功能版本 Free Trial, 只可模擬但無法存檔, 可用於工業級機械手臂在線與離線控制系統設計與模擬. \n Range3.7z  (下載 27MB, 解開壓縮後 109MB) \n 功能: 開放源 FEM (Finite Element Method) 分析套件. \n webots-R2021a.7z  (下載 1.5GB, 解開壓所後 2.9GB) \n 功能: 採 Apache 2.0 使用授權的開放源套件, 可用於機電資控制系統設計與模擬. \n', 'tags': '', 'url': '可攜系統.html'}, {'title': 'Lua 解譯', 'text': '網際 Lua 解譯網頁:  http://mde.tw/lab/downloads/lua/index.html \n SciTE 編輯器中的 Lua.properties 設定: \n 選擇利用 y:\\lua-5.4.3\\luac 與 lua 編譯或解譯 .lua 程式檔案. \n command.compile.*.lua=y:\\lua-5.4.3\\luac -o "$(FileName).luc" "$(FileNameExt)"\n# Lua 5.1\ncommand.go.*.lua=y:\\lua-5.4.3\\lua "$(FileNameExt)" \n \n', 'tags': '', 'url': 'Lua 解譯.html'}, {'title': 'CMSiMDE', 'text': 'CMSiMDE ( https://github.com/mdecourse/cmsimde ) 是一套以 Python 與 Flask 框架編寫的網際內容管理系統, \n 使用 CMSiMDE 建議使用者安裝 flask flask_cors bs4 lxml pelican markdown leo 等模組. 其中的 flask flask_cors bs4 lxml pelican markdown為啟動 CMSiMDE 的必要模組, 而 leo 則是 CMSMDE 開發者所使用的大綱管理工具, 可以用於與 CMSiMDE 整合的 Pelican blog 及 Reveal.js 網際簡報編輯之用. \n', 'tags': '', 'url': 'CMSiMDE.html'}, {'title': '建立網頁', 'text': '由於 CMSiMDE 帶有動態網頁與靜態網頁等兩個部分, 動態網頁執行時需要該伺服器能夠執行 Python 3, 以及 flask flask_cors bs4 lxml pelican markdown 等模組. 而靜態網頁的伺服則只需要 WWW Server 即可. \n 若使用者在 Github 使用 CMSiMDE 建立網頁, 可以透過  https://github.com/mdecourse/cmstemplate  template 建立, 步驟與兩種設定方式如下: \n \n 使用者登入 Github \n 將瀏覽器連線至  https://github.com/mdecourse/cmstemplate  頁面後, 點擊 Use this template 按鈕後, 選擇所要採用的 repository 名稱後, 就可以建立以 CMSiMDE 作為子模組的 Github 倉儲. \n 假如使用者所選擇的倉儲名稱為: 帳號.github.io, 則 Github 會自動設定該倉儲的 main 分支為 Github Pages 根目錄, 意即一旦 Github Pages 完成轉檔 (提交訊息之後會出現綠勾), 則該倉儲的對應網頁將為: https://帳號.github.io \n 若使用利用  https://github.com/mdecourse/cmstemplate  作為 template 所建立的倉儲名稱並非 帳號.github.io, 則使用者必須自行至該倉儲的 settings/Github Pages 選項中將 main branch 設為 Github Pages 對應的 root 目錄. 之後, Github 將會採用: 帳號.github.io/倉儲名稱 作為與該倉儲對應的 Github Pages 網址. \n \n', 'tags': '', 'url': '建立網頁.html'}, {'title': '基本操作', 'text': '當使用者利用 cms.bat 啟用動態網站後, 即可利用瀏覽器  https://localhost:9443  在近端維護網站內容, 由於此時動態網站僅在 localhost 啟動, 因此可以使用內建的管理者密碼 "admin" 登入管理網站內容. \n 假如使用者修改 init.py 中的 ip 或 uwsgi 設定, 讓動態網站在外部 IP 啟動, 則必須自行透過動態網站中的  config  指令修改管理者密碼. \n 動態網站編輯表單中的  config  除了可更改網站管理者密碼外, 也可以更改網站的頁面內容標題 (外部標題可以透過 init.py 中的 site_title 更改). \n', 'tags': '', 'url': '基本操作.html'}, {'title': '客製化', 'text': '假如利用  https://github.com/mdecourse/cmstemplate  作為 template 所建立的 Github Pages 網站, 倉儲根目錄中的 cms.bat 可以在執行動態網站系統之後, 利用 pipe 讓 cms.bat 同時開啟 Firefox  https://localhost:9443 \n 修改後的 cms.bat 如下: \n python cmsimde/wsgi.py 1> nul | "C:\\Program Files (x86)\\Mozilla Firefox\\firefox" https://localhost:9443 \n 前面 python cmsimde/wsgi.py 加上 1> nul 的目的是因為 pipe 執行時會將前面指令執行結果轉為隨後執行指令的輸入, 而 1> nul 則會將標準輸出的任何資料移除, 任何輸出不會影響 Firefox 執行. \n', 'tags': '', 'url': '客製化.html'}, {'title': '編輯網頁內容', 'text': '編輯 CMSiMDE 動態網站中的內容, 可以透過表單中的  Edit All  或  Edit  按鈕進行.  Edit  可用於單頁編輯, 操作時先選擇左側的頁面標題, 等系統顯示該頁面內容後, 再點擊上方的  Edit  按鈕即可進入該頁面的編輯模式. \n Edit All  通常用於單次刪除所有頁面內容或者只保留特定頁面用, 點擊後會將所有頁面內容置於編輯器中. \n', 'tags': '', 'url': '編輯網頁內容.html'}, {'title': '上傳與引用檔案', 'text': 'File Upload  可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄. \n 引用使用者上傳的檔案 \n python_book_01.pdf \n', 'tags': '', 'url': '上傳與引用檔案.html'}, {'title': '上傳與引用圖片', 'text': 'Image Upload  可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄. \n 引用使用者上傳的檔案 \n \n \n', 'tags': '', 'url': '上傳與引用圖片.html'}, {'title': '嵌入程式碼', 'text': '利用 Insert/Edit code 功能, 可以嵌入各種程式碼: \n // 下列 Dart 程式, 利用 Runge Kutta 迭代運算法, 解常微分方程式\n// 設 t 為時間, x 則設為物體的位移\n// dx / dt = (t - x)/2, 起始值 t0=0, x0=1, 求 t=2 時的 x 值\n//\n// 已知起始值 t0 與 x0 後, 可以利用下列 rungeKutta 函式, 以\n// h 為每步階增量值, 求 dxdt 常微分方程式任一 t 的對應值 x\n// 定義函式 rungeKutta, 共有四個輸入變數\nrungeKutta(t0, x0, t, h) {\n  // 利用步階增量值 h 與 t 的起始及終點值\n  // 計算需要迭代的次數 n\n  int n = ((t - t0) / h).toInt();\n  // 宣告 x 為雙浮點數, 且設為起始值 x0\n  double x = x0;\n  // 利用已知的 t0, x0, t 終點值與步階增量值 h, 迭代求 x 對應值\n  // 索引值 i 將每次增量 1, 從 i=1 執行 for 環圈至 i=n\n  for (int i = 1; i <= n; i++) {\n    // 將此階段的 t 與 x 值代入 dxdt 函式求下列四個浮點變數值\n    double k1 = h * dxdt(t0, x);\n    double k2 = h * dxdt(t0 + 0.5 * h, x + 0.5 * k1);\n    double k3 = h * dxdt(t0 + 0.5 * h, x + 0.5 * k2);\n    double k4 = h * dxdt(t0 + h, x + k3);\n    // 利用上述四個變數值求此步階增量後的對應 x 值\n    x = x + (1.0 / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4);\n    // 每次 for 迴圈執行最後, 準備計算下一個步階增量後的 x 對應值\n    // t 起始值配合步階增量值 h, 進行增量\n    t0 = t0 + h;\n  }\n  // 完成 for 迴圈迭代後, 傳回與 t 終點值對應的 x 值\n  return x;\n}\n\n// 將微分方程式 "dx / dt = (t - x)/2" 定義為 dxdt 函式\ndxdt(t, x) {\n  return ((t - x) / 2);\n}\n\n// 定義 main() 主函式內容, 目的在利用 rungeKutta 函式\n// 解常微分方程式\nmain() {\n// Driver method\n// num 資料型別可以是整數或雙浮點數\n  num t0 = 0;\n  num x = 1;\n  num t = 2;\n  double h = 0.2;\n  print(\'The value of x at t=$t is: ${rungeKutta(t0, x, t, h)}\');\n}\n \n \n', 'tags': '', 'url': '嵌入程式碼.html'}, {'title': '嵌入影片檔', 'text': '直接利用 Source code 功能, 將影片檔案的 iframe 標註放入後存檔: \n \n', 'tags': '', 'url': '嵌入影片檔.html'}, {'title': '檢視 STL', 'text': '使用 Github 所提供的 STL viewer 嵌入 github.com/mdecourse/cmstemplate main branch 中 downloads 目錄中的 spikeball.stl \n <script src="https://embed.github.com/view/3d/mdecourse/cmstemplate/main/downloads/spikeball.stl"></script> \n 將上列 script 標註放入頁面 HTML 內容後, 可以檢視 STL 零件檔案. \n \n \n \n \n 以 CMSiMDE 內建的 static/viewstl.html 檢視 STL 檔案: \n 使用 iframe 其 src 指向 STL 檔案的絕對 URL 路徑: \n /static/viewstl.html?src=https://mde.tw/cmstemplate/downloads/spikeball.stl \n 就可以如下檢視 downloads/spikeball.stl \n \n', 'tags': '', 'url': '檢視 STL.html'}, {'title': 'Gitlab 同步', 'text': '利用 git remote add gitlab  https://gitlab.com/user/repository.git  可以在近端倉儲中的 .git/config 中新增一個名稱為 gitlab, 且與  https://gitlab.com/user/repository.git  倉儲對應的設定. 使用者可以將此倉儲改版內容以 git push gitlab 推向 Gitlab. \n 至於 Gitlab Pages 額外需要下列 .yml 檔案進行轉換設定: \n .gitlab-ci.yml \n pages:\n  stage: deploy\n  script:\n  - mkdir .public\n  - cp -r * .public\n  - mv .public public\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\nvariables:\n  GIT_SUBMODULE_STRATEGY: recursive \n \n', 'tags': '', 'url': 'Gitlab 同步.html'}, {'title': 'Heroku 部署', 'text': '與 Heroku 部署有關資訊請參考:  https://mde.tw/cp2020/content/Heroku.html \n', 'tags': '', 'url': 'Heroku 部署.html'}, {'title': 'Fossil SCM', 'text': '在 Github 之外, 可以同步將各倉儲資料存放至 Gitlab, Heroku (有 500 MB 容量限制) 與 Fossil SCM. \n 希望整合 Github 與 Fossil SCM 倉儲步驟說明如下: \n 針對 Github 中已經有  https://github.com/mdecourse/cmstemplate  倉儲, 希望同步建  https://fossil.kmol.info/cmstemplate  與之內容同步. \n 登入 fossil.kmol.info 主機, 在 /home/user/repository 目錄中, 以 fossil init cmstemplate.fossil 建立空倉儲. 此時 Fossil SCM 將會列出以登入帳號作為帳號的管理者密碼. \n 管理者利用  https://fossil.kmol.info/cmstemplate  連結, 以 user 登入, 並利用上列管理者密碼進入管理區, 先行透過 Setup/users 變更 user 對應密碼. \n 回到 Windows 以  fossil clone https://user@fossil.kmol.info/cmstemplate cmstemplate.fossil  取下倉儲資料, 過程中將需要輸入與 user 對應的密碼, 並被詢問是否儲存密碼, 若選擇儲存密碼則隨後的 fossil commit 將回自動提交推送. \n 接著在近端必須開啟空 cmstemplate.fossil 倉儲, 主要目的是取得 __FOSSIL__, 並且以 git pull 完整拉下位於  https://github.com/mdecourse/cmstemplate  中的資料並與空 __FOSSIL__ 進行整合. 其中在 Fossil SCM 端必須將 Setup/Settings 中的 default-csp 設為:  https://fonts.googleapis.com  (讓 CMSiMDE 靜態網頁可以在 Fossil SCM doc 頁面中正常顯示), 且勾選 dotfiles (讓 Fossil SCM 可以儲存 .git 中的版本資料). \n \n 參考資料: \n 編譯 Fossil SCM: \n \xa0 http://project.mde.tw/blog/zai-msys2-huan-jing-bian-yi-fossil-scm.html \n', 'tags': '', 'url': 'Fossil SCM.html'}, {'title': '注意事項', 'text': '因為  https://github.com/mdecourse/cmstemplate  將 CMSiMDE 倉儲作為 submodule, 因此使用者利用 cmstemplate 作為 template 後, 必須使用 git clone --recurse-submodules 取下遠端倉儲. \n 例如: \n 若使用者的倉儲 URL 為  https://github.com/mdecourse/cmstemplate \n 則可以在近端利用: \n git clone --recurse-submodules  https://github.com/mdecourse/cmstemplate.git \n 將遠端倉儲資料存入 cmstemplate 目錄中. \n 目前的 cmstemplate 內建 cms.bat 與 acp.bat 等兩個 batch 檔案, 可以協助使用者直接在倉儲根目錄啟動 CMSiMDE 動態網頁, 以及單一指令式即可完成 git add, git commit 以及 git push, 但是前提是使用者必須設定以 ssh 方式與 Github 倉儲進行驗證. \n 例如: \n 若使用者已經將倉儲內容 clone 至近端, 且已經帶有 cmsimde 子模組的內容. \n 則可以在近端命令列進入 cmstemplate 倉儲目錄執行: \n cms.bat \n 開啟動態網頁系統. 並以  https://localhost:9443  開啟. \n 一旦完成動態網頁的編輯, 利用 Generate Pages 可以轉為靜態網站, 且各 html 檔案將位於 content 目錄中. \n 若使用者希望檢查近端靜態網頁的內容, 可以利用 SciTE 開啟倉儲中的 http-server.py, 並利用瀏覽器以  https://localhost:8444  檢查靜態網頁內容. \n 一旦使用者要將近端倉儲的動態與靜態網頁內容推向 Github, 則必須將倉儲中 .git/config 的 url, 從 https 改為 ssh 的連線格式: \n 例如: \n 原先 .git/config origin 的 url 為 url =  https://github.com/mdecourse/cmstemplate.git,  則必須改為: \n url =  git@github.com:mdecourse/cmstemplate.git \n 之後假如使用者要以 "add some files" 字串當作提交說明訊息, 則可以在命令列中的倉儲目錄執行: \n acp.bat "add some files" \n', 'tags': '', 'url': '注意事項.html'}, {'title': '標題選擇', 'text': '由於 CMSiMDE 中的動態網站透過 config/content.htm 的 H1~H3 超文件標註進行分頁, 因此使用者利用 cms.bat 開啟動態網站後, 必須注意各頁面標題文字的選擇: \n \n 頁面標題文字儘量簡短  - 頁面標題就有如文章的章節標題, 只要該標題具有該頁面內容的代表性即可, 越簡短越好. \n 頁面標題文字不要使用標點符號  - 因為標點符號中的 "/" 會造成頁面擷取時 URL 指令分段上的誤判, 至於標題文字中若有 ":" 則會在動態內容轉靜態內容時, 因 Windows 不允許檔案名稱帶有 ":" 而無法轉檔. \n 頁面標題中不可以有超文件標註  - 由於 CMSiMDE 動態網站編輯器採用 GUI 進行, 採用滑鼠標修頁面標題時, 可能無意中將 HTML 標註放入 H1~H3 標題文字中, 如此可能會造成 CMSiMDE 分頁錯誤而無法開啟動態網站. 當使用者要檢查所使用的頁面標題是否帶有 html 標註, 可以透過編輯功能中的 Source Code 檢查. \n H1 標題數量不可過多  - 由於 CMSiMDE 的靜態網站支援手機模式, 當頁面 H1 標題數量超過 10 個之後, 頁面標題可能無法在螢幕上最上方以一列顯示, 而是必須出現在第二行, 結果將會導致頁面展開時的 Javascript 程式產生錯亂, 結果為無法直接以滑鼠點擊進入特定頁面. \n \n \n \n', 'tags': '', 'url': '標題選擇.html'}, {'title': '靜態網頁 404', 'text': '當使用者將近端網頁倉儲資料推向 Github 後, commit 提交訊息之後若沒有出現綠勾, 表示靜態網頁無法轉檔成功, 這時連接靜態網頁時, 將會出現 404, 通常情況下是因為倉儲中 cmsimde 子模組的版次無法與遠端  https://github.com/mdecourse/cmsimde  中的版本對應. \n 上述靜態網頁出現 404 錯誤訊息的處理方式如下: \n \n 從  https://github.com/mdecourse/cmsimde  倉儲中複製最新版本的版次號, 以  2021/03/03 的版次 為例, 版次號為 1c3aeec1f5d26b421743d2f5ef8bb7d5b99292af, 使用者只需要最前面的 7 個字元, 也就是 1c3aeec. \n 然後在近端倉儲中, 以命令列進入 cmsimde 目錄後執行:  git checkout 1c3aeec \n 接著退回倉儲目錄, 以 git add, git commit 及 git push 將倉儲改版內容推向 Github 後應該就可以將倉儲正確轉為靜態網站內容. \n \n', 'tags': '', 'url': '靜態網頁 404.html'}, {'title': '動態網站錯誤', 'text': 'CMSiMDE 動態網站經常出現的錯誤是無法對 config/content.htm 分頁, 這時可以利用 SCiTE 編輯 content.htm, 找尋是否 H1~H3 標註中是否帶有特殊符號, 如 "/" 或 ":" 等. \n', 'tags': '', 'url': '動態網站錯誤.html'}, {'title': '延伸開發', 'text': '為了建立 responsive site: \n 靜態網頁: \n Javascript 程式庫: \n https://getbootstrap.com/ \n 動態系統: \n Javascript editor \n TinyMCE:  https://www.tiny.cloud/ \n Syntax highlighter:  https://prismjs.com/ \n Ajax bit by bit file uploader: \n Flask \n Flask_cors \n bs4 \n lxml \n markdown \n', 'tags': '', 'url': '延伸開發.html'}, {'title': '已知問題', 'text': 'cmsimde 是一套始終修改中的機械設計工程導向網際內容管理系統, 由於自 2013 年底開發至今, Python 已經從 3.6 進展到 3.9, 網際發展方向也從 html editor 趨向 markdown editor, WebGL 相關技術與 three.js 的整合也越發成熟. \n 因此面對 \n https://github.com/mdecourse/virtualkossel \n http://mde.tw/virtualkossel/ \n cmsimde 應該要導入更多動態零組件展示與互動相關的機械設計功能. \n 可以著力的方向: \n Fusion 360  \n https://github.com/AutodeskFusion360 \n https://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html \n https://vpython.org/ \n https://www.glowscript.org/ \n https://github.com/slembcke/Chipmunk2D \n http://www.pymunk.org/en/latest/ \n https://github.com/mrjleo/python-physics-demos \n cango3d library:  https://www.arc.id.au/Canvas3DGraphics.html \n', 'tags': '', 'url': '已知問題.html'}, {'title': 'IPv6', 'text': '參考:  https://github.com/tinymce/tinymce/issues/4409  中的  url parsing 修改 後, 目前已經可以在 local 與 IPv6 網路連線中啟用 tinymce4 editor. \n', 'tags': '', 'url': 'IPv6.html'}, {'title': 'MathJax', 'text': 'MathJax 引用問題: \n https://www.mathjax.org/ \n', 'tags': '', 'url': 'MathJax.html'}, {'title': 'html 分頁', 'text': '分頁失敗時會意外抹除 config\\content.htm 中的所有內容 \n 分頁失敗並不會提供 debug 建議 \n', 'tags': '', 'url': 'html 分頁.html'}, {'title': 'template', 'text': 'cmsimde 針對利用 Flask 產生頁面並未使用 Template, 為了讓程式更加模組化可以考慮納入  Mako  template engine. \n', 'tags': '', 'url': 'template.html'}]};