<h1>About</h1>
<p>這裡是國立虎尾科技大學 - 機械設計工程系 - 電腦輔助設計實習課程網站.</p>
<p><a href="https://mde.tw">KMOLab</a> 上課的目的: 鼓勵每一位同學都能及早<span style="background-color: #ffff99;">確定努力的目標</span>, 證明自己具備<span style="background-color: #ffff99;">獨立研究與解題能力</span>.</p>
<p><img alt="" class="add_border" height="423" src="/images/computer_aided_design_topics.png" width="600"/></p>
<p>(from Myur Kutz, 2005, Mechanical Engineers' Handbook 4th Edition, Volume2, Part1, page3.)</p>
<p>從上述機械工程師手冊中, 有關 CAD 說明如下:</p>
<p style="padding-left: 30px;">Computer-aided design (CAD) uses the <span style="background-color: #ffff99;">mathematical</span> and <span style="background-color: #ffff99;">graphic processing power</span> of the computer to assist the engineer in the creation, modification, analysis, and display of designs.</p>
<p style="padding-left: 30px;">Many factors have contributed to CAD technology being a necessary tool in the engineering world for applications including shipbuilding, automotive, aerospace, medical, industrial, and architectural design, such as the computer's speed in processing complex equations and managing technical databases.</p>
<p>若從產品開發流程與團隊成員的角度而言, 電腦輔助設計的本質在運用電腦與周邊相關軟硬體, 以達到多人參與協同產品設計流程時, 針對每一個細節與項目, 都能夠少一點負擔 (less burden), 多一些建樹 (more achievements) 的目標, 期望在產品從概念至回收的生命週期 (life cycle) 中, 能以最少成本付出, 取得最大效益.</p>
<h4>少負擔:</h4>
<ol>
<li>能否利用高效能且具開放延伸特性的軟硬體工具執行設計, 無需安裝維護厚重且架構封閉的軟硬體設備.</li>
<li>能否運用分散式版次管理系統 (Github, Gitlab, Bitbucket 與 Fossil SCM 等) 儲存設計內容, 無需擔心多人協同設計下,改版內容混淆, 權責無法區分, 資料因硬體故障或遭破壞而毀損.</li>
<li>將重複或繁雜的工作交由電腦處理, 設計者選擇處理較具價值, 且有助於持續提升解題知能的工作項目.</li>
</ol>
<h4>多建樹:</h4>
<ol>
<li>讓每一項投注心力的工作, 都留下歷程紀錄, 除可自我檢視成果, 也可提供他人查核驗證.</li>
<li>即時公開利用電腦輔助設計時所採用的假設, 方法, 遭遇困難, 參考資料搜尋範圍與解決方案等細節.</li>
<li>隨時做好利用電腦與網路說明設計理念與成果簡報的準備.</li>
</ol>
<p><a href="/downloads/CAD- Do Computers Aid the Design Process After All.pdf">CAD: Do Computers Aid the Design Process After All?</a> (電腦輔助設計: 電腦真的有助於設計流程嗎?)</p>
<p>至於所謂電腦輔助機械設計, 是使用電腦軟體進行機械產品相關系統設計 (包含機電與資訊整合, <a href="/downloads/nasa_systems_engineering_handbook_0.pdf">ref</a>), 並記錄產品的設計過程. 主要用於建立產品的初步設計與佈局, 提供設計細節與運算, 構建 3D 模型, 繪製並發布工程圖, 同時也與工程分析, 行銷, 製造等部門及產品用戶間進行互動.</p>
<h4>關鍵字:</h4>
<p style="padding-left: 30px;">電腦軟體, 紀錄產品設計過程, 產品初步設計與佈局, 設計細節, 設計運算, 3D 模型, 工程圖, 工程分析, 行銷, 製造, 產品用戶, 互動.</p>
<h4>學員檔案下載:</h4>
<p style="padding-left: 30px;">請登入 @gm 帳號後, 下載 <a href="https://drive.google.com/file/d/1xb1Es8N-FxeG10OSnLNDwwi_tXyNTP9t/view?usp=sharing">cad2021_textbook.pdf</a> 課程教材. 並下載 <a href="https://drive.google.com/file/d/1hEGgONw8ahNs7JPAKOurc7JvGfhgO2zY/view?usp=sharing">compile_copsim_for_pj2022.7z</a> (檔案大小 4 GB, 解開壓縮後 14 GB), <a href="https://drive.google.com/file/d/1hV8hHjjnLvUp-AEjd2iCfBYk067WSjcy/view?usp=sharing">coppeliaSim 4.1.0 官方版與 MSYS2 編譯版.7z</a> (檔案大小 412 MB, 解開壓縮後 1GB) 以及 <a href="https://drive.google.com/file/d/1iVkXk-YD0o1pRejL6YTgIwem1lpJaRM3/view?usp=sharing">coppeliaSim 4.1.0 原始碼</a> (檔案大小 250 MB, 解開壓縮後 1GB)</p>
<p style="padding-left: 30px;">2021 Fall 起將再次導入 <a href="https://www.debugmode.com/wink/">Wink</a> (之前的 Wink 採用 Flash 技術) 操作流程影片製作工具, 請自行從官方網站: <a href="https://www.debugmode.com/wink/">https://www.debugmode.com/wink/</a> 下載.</p>
<h4>這個學期的電腦輔助設計實習包括五個主題:</h4>
<ol>
<li><span style="background-color: #ffff99;">直播與討論</span> - 每一位學員都必須要配置隨身碟, 耳機, 麥克風與 webcam, 有能力主持線上會議及錄影 (Google Meet, Youtube 與  <a href="https://obsproject.com/">OBS</a>), 開會後各學員必須針對會議內容, 錄製相關內容操作過程影片與心得報告, 各影片必須剪輯編修後配上說明字幕. 每一位學員在線上會議前, 要針對討論主題進行準備, 並在過程中針對議題發表看法, 每次開會後, 各學員將針對會議錄影與心得報告, 直接透過線上表單進行 <a href="https://wethrive.net/blog/self-evaluation-and-assessment/">self-evaluation</a> and <a href="https://en.wikipedia.org/wiki/Peer_review">peer review</a>.</li>
<li><span style="background-color: #ffff99;">MCAD</span> - 設計多軸機械手臂與周邊設施, 開發能夠自動組裝機械手臂的<a href="https://zh.wikipedia.org/wiki/%E5%BD%88%E6%80%A7%E8%A3%BD%E9%80%A0%E7%B3%BB%E7%B5%B1">彈性製造系統</a> (FMS, Flexible Manufacturing System) 與 <a href="https://en.wikipedia.org/wiki/Automated_storage_and_retrieval_system">AS/RS</a> (Automated Storage and Retrieval System) 系統.</li>
<li><span style="background-color: #ffff99;">SSO</span> - 利用 @gm 帳號作為基礎, 以 CAD 完成之各項網際輔助設計系統, 包含各組的 <a href="https://www.fossil-scm.org">Fossil SCM</a> 系統都必須透過 SSO (<a href="https://en.wikipedia.org/wiki/Single_sign-on">Single Sign-On</a>) 架構完成. 其中包括網際齒輪減速箱輔助設計系統與各套件 (Solidworks, Inventor 與 NX) 的網際零件訂製系統.</li>
<li><span style="background-color: #ffff99;">Robotics</span> - 透過圖書館所提供的 Robotics 相關電子書介紹, 整理 FMS 相關系統的原理與應用.</li>
<li><span style="background-color: #ffff99;">系統開發</span> - 在上述主題研究過程中, 所衍生其他有關的電腦輔助機械設計開發內容.</li>
</ol>
<hr/>
<p>下列是 2005 年 <a href="https://www.eecs.mit.edu/about-us/mit-eecs-department-facts">MIT</a> <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/">Structure and Interpretation of Computer Programs</a> 課程的第一週教學影片, <a href="https://www.youtube.com/watch?v=r8k8o7zkA1o">Harold Abelson</a> 教授一開場便說: computer science is not a science (當時的科系名稱為 Electric Engineering and Computer Science). It's also not really very much about computers. And that is, when some field is just getting started and you don't really understand it very well, it's very easy to confuse the essence of what you're doing with the tools that you use.</p>
<p>I think in the future people will look back and say, yes, those primitives in the 20th century were fiddling around with these gadgets called computers, but really what they were doing is starting to <span style="background-color: #ccffcc;">learn how to <a href="https://www.merriam-webster.com/dictionary/formalize">formalize</a> <a href="https://www.merriam-webster.com/dictionary/intuition">intuitions</a> about <a href="https://www.merriam-webster.com/dictionary/process">process</a>,</span> <span style="background-color: #ccffcc;">how to do things, starting to develop a way to talk precisely about how-to knowledge.</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/-J_xL4IGhJA" title="YouTube video player" width="560"></iframe></p>
<p style="text-align: left;">Overview and Introduction to Lisp (<a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/">source</a>, <a href="/downloads/Overview_Into_to_Lisp.txt">Closed Caption</a>)</p>
<h4>課程倉儲, 網站, 討論區與所使用工具:</h4>
<p style="padding-left: 30px;">Repository:</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/cad2021">https://github.com/mdecourse/cad2021</a></p>
<p style="padding-left: 60px;"><a href="https://gitlab.com/mdecourse/cad2021">https://gitlab.com/mdecourse/cad2021</a></p>
<p style="padding-left: 60px;"><a href="https://bitbucket.org/mdecourse/cad2021">https://bitbucket.org/mdecourse/cad2021</a></p>
<p style="padding-left: 30px;">Github Pages: <a href="https://mde.tw/cad2021">https://mde.tw/cad2021</a></p>
<p style="padding-left: 30px;">Zulipchat: <a href="https://kmolab.zulipchat.com">https://kmolab.zulipchat.com</a></p>
<p style="padding-left: 30px;">Onshape: <a href="https://www.onshape.com/en/education/">https://www.onshape.com/en/education/</a></p>
<p style="padding-left: 30px;">CoppeliaSim: <a href="https://www.coppeliarobotics.com/">https://www.coppeliarobotics.com/</a></p>
<h4>CAD 歷史與相關參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://mde.tw/cadp2018/downloads/cad_history.pdf">CAD History.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cadp2018/downloads/cadbook.pdf">CAD Book.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2005_Ten challenges in computer-aided design.pdf">2005_Ten challenges in computer-aided design.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/CadQuery/cadquery">https://github.com/CadQuery/cadquery</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/CadQuery/CQ-editor">https://github.com/CadQuery/CQ-editor</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/alainrinder/quoridor.py">https://github.com/alainrinder/quoridor.py</a>, RoboDK and CoppeliaSim</p>
<p style="padding-left: 60px;"><a href="https://github.com/Quentin18/Quoridor-Online">https://github.com/Quentin18/Quoridor-Online</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mrkvost/quoridor">https://github.com/mrkvost/quoridor</a></p>
<p style="padding-left: 60px;"><a href="https://marmelab.com/blog/2019/10/24/quoridor-part-1.html">https://marmelab.com/blog/2019/10/24/quoridor-part-1.html</a></p>
<p style="padding-left: 60px;"><a href="https://arxiv.org/pdf/1908.09453.pdf">Openspiel: framework for reinforcement learning in games</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/CadQuery/cadquery">https://github.com/CadQuery/cadquery</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/gorisanson/quoridor-ai">https://github.com/gorisanson/quoridor-ai</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/zack-hill/quoridor-web">https://github.com/zack-hill/quoridor-web</a></p>
<p style="padding-left: 60px;"><a href="https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.5204&amp;rep=rep1&amp;type=pdf">Mastering Quoridor</a> (thesis)</p>
<p style="padding-left: 60px;">能夠在 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立步步為營桌遊場景, 以按鍵控制兩人, 四人或六人對陣.</p>
<p style="padding-left: 60px;">設法建立電腦程式, 可在 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 場景中與單一使用者或多使用者對陣.</p>
<p style="padding-left: 60px;">是否也能利用 <a href="https://robodk.com/">RoboDK</a> 或 <a href="https://cyberbotics.com/">Webots</a> 建立對應場景?</p>
<p style="padding-left: 60px;"><a href="https://zh.wikipedia.org/wiki/%E7%89%86%E6%A3%8B">四人步步為營桌遊</a> (<a href="https://gorisanson.github.io/quoridor-ai/">線上版</a>, <a href="https://github.com/mPelland42/Quoridor-Reinforcement-Learning">強化學習</a>, <a href="https://github.com/boriel/quoridor">AI Player</a>)</p>
<p style="padding-left: 60px;"><a href="https://bruceisonfire.net/2020/04/23/my-adventure-with-flosscad-the-birth-of-hexidor/">六人步步為營桌遊</a></p>
<h4>CAD 延伸:</h4>
<p style="padding-left: 30px;">Onshape Featurescript: <a href="https://cad.onshape.com/FsDoc/">https://cad.onshape.com/FsDoc/</a></p>
<p style="padding-left: 60px;"><a href="https://www.onshape.com/en/resource-center/videos/beginners-guide-to-featurescript">Beginner's Guide to Featurescript</a> (Video)</p>
<p style="padding-left: 60px;"><a href="https://www.onshape.com/en/features/custom-features">Custom Features</a></p>
<p style="padding-left: 60px;"><a href="https://cadlab.mde.tw/post/onshape-featurescript-spur-gear-lun-kuo-hui-tu.html">Spur Gear</a> (<a href="https://forum.onshape.com/discussion/15700/updated-spur-gear-featurescript">Update</a>)</p>
<p style="padding-left: 30px;">SolidWorks API: <a href="http://mde.tw/cad2020/content/HW1_SW.html">http://mde.tw/cad2020/content/HW1_SW.html</a></p>
<p style="padding-left: 30px;">Inventor API: <a href="http://mde.tw/cad2020/content/HW1_INV.html">http://mde.tw/cad2020/content/HW1_INV.html</a></p>
<p style="padding-left: 30px;">NX API: <a href="http://mde.tw/cad2020/content/HW1_NX.html">http://mde.tw/cad2020/content/HW1_NX.html</a></p>
<h4>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h2>Github</h2>
<p>機械設計工程師凡是在產品開發過程需要利用電腦儲存文字檔案, 就可以評估是否採用分散式版次管理系統, 在 <a href="https://mde.tw">KMOLab</a> 相關課程中, 則要求學員必須利用<a href="https://github.com/"> Github</a>, <a href="https://gitlab.com">Gitlab</a>, <a href="https://bitbucket.org">Bitbucket</a> 與 <a href="https://heroku.com">Heroku</a> 等四種雲端服務系統儲存課程相關資料.</p>
<p>在近端與遠端電腦系統上使用分散式版次管理系統 (除 <a href="https://git-scm.com/">Git</a> 之外, 還推薦使用 <a href="https://www.fossil-scm.org">Fossil SCM</a>) 儲存檔案, 可以確保資料的更動內容完整性, 可以確認各改版編輯相關時間與人員, 妥善運用下, 可在協同產品設計流程中取得多人同步創新的效能.</p>
<p>Source: <a href="https://sites.google.com/view/fri-iasa-spring21-rs-1/home">https://sites.google.com/view/fri-iasa-spring21-rs-1/home</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Version Control ( git_github).pdf">Version Control (git/github).pdf</a></p>
<p><a href="https://www.uxpin.com/studio/blog/git-for-designers/">https://www.uxpin.com/studio/blog/git-for-designers/</a></p>
<p><a href="https://github.com/m2n037/awesome-mecheng">https://github.com/m2n037/awesome-mecheng</a> </p><h2>Examples</h2>
<p>Onshape to Robot: <a href="https://onshape-to-robot.readthedocs.io/en/latest/">https://onshape-to-robot.readthedocs.io/en/latest/</a></p>
<p><a href="https://www.programmersought.com/article/59331583319/">Onshape to Matlab</a> </p>
<h4>Inverse Kinematics:</h4>
<p style="padding-left: 30px;">RoboDK</p>
<p style="padding-left: 30px;">CoppeliaSim</p>
<p style="padding-left: 30px;">Webots</p>
<p style="padding-left: 30px;"><a href="https://github.com/Phylliade/ikpy">https://github.com/Phylliade/ikpy</a> </p>
<p>Onshape to RoboDK, CoppeliaSim and Webots. &lt;= Machine Learning and Reinforcement Learning</p>
<p><a href="https://cad.onshape.com/documents/56298f9c90df4f577c10ec66/w/ae64289050ff20e29ab48a69/e/fb3ec7729b500dd569ef03c2?configuration=default">Onshape Ex1</a></p>
<p><img alt="" class="add_border" height="392" src="/images/onshape_ex1.png" width="600"/></p>
<p><a href="https://cad.onshape.com/documents/7f4c744a841bb441d1c51956/w/aa991ba802d3774f0d20487c/e/26cece3c2f3e829b22c9a35f">Onshape Ex2</a></p>
<p><img alt="" class="add_border" height="425" src="/images/betarobot.png" width="600"/></p>
<p><a href="/downloads/2021_Adaptation of Openai Gym for Moveo Platform.pdf">Adaptation of Openai Gym for Moveo Platform.pdf</a></p>
<p><a href="https://github.com/BCN3D/BCN3D-Moveo">https://github.com/BCN3D/BCN3D-Moveo</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/SvKoxLXjxLs" title="YouTube video player" width="560"></iframe></p><h2>Onshape</h2>
<p><a href="https://405232491.gitbooks.io/gitbook_week3/content/week10.html">https://405232491.gitbooks.io/gitbook_week3/content/week10.html</a></p>
<p><a href="https://www.onshape.com/en/education/">https://www.onshape.com/en/education/</a></p>
<h4>Featurescript:</h4>
<p style="padding-left: 30px;"><a href="https://www.onshape.com/en/resource-center/videos/beginners-guide-to-featurescript">https://www.onshape.com/en/resource-center/videos/beginners-guide-to-featurescript</a></p>
<p style="padding-left: 30px;"><a href="https://cad.onshape.com/FsDoc/">https://cad.onshape.com/FsDoc/</a></p>
<p style="padding-left: 30px;"><a href="https://cad.onshape.com/FsDoc/tutorials/create-a-slot-feature.html">https://cad.onshape.com/FsDoc/tutorials/create-a-slot-feature.html</a></p>
<p style="padding-left: 30px;"><a href="https://cadlab.mde.tw/post/onshape-featurescript-tutorial-dao-yin.html">Featurescript 導引</a> (<a href="https://cadlab.mde.tw/post/search.html?q=featurescript">其他參考資料</a>)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cad2019/content/Onshape.html">Onshape of cad2019</a></p>
<h2>Arduino</h2>
<p>Uno Simulator: <a href="https://www.sites.google.com/site/unoardusim/services">https://www.sites.google.com/site/unoardusim/services</a></p>
<h4>Picsimlab:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/lcgamboa/picsimlab">https://github.com/lcgamboa/picsimlab</a></p>
<p style="padding-left: 30px;"><a href="https://lcgamboa.github.io/">https://lcgamboa.github.io/</a></p>
<p><a href="https://mplabxpress.microchip.com/mplabcloud/ide">https://mplabxpress.microchip.com/mplabcloud/ide</a></p>
<h2>Ethercalc</h2>
<p><a href="http://mde.tw/cd2021/content/Programming.html">http://mde.tw/cd2021/content/Programming.html</a></p>
<h4>有關 ethercalc:</h4>
<p>若 ethercalc 與 redis 合用, sheet 資料將會存入 /var/lib/redis/dump.rdb, 此一檔案儲存設定位於 /etc/redis/redis.conf 中的 dbfilename dump.rdb<br/><br/>使用者若要以 root 身分檢視 /var/lib/redis/dump.rdb 可以透過 sudo -s 以 root 身分執行命令.<br/><br/>若以 /etc/init.d/redis-server stop 關閉 redis, 然後執行 ethercalc, sheet 資料將會存在執行命令目錄下的 dump 目錄中.<br/><br/>在結合 redis 使用下的 ethercalc, 若希望 reset /var/lib/redis/dump.rdb 中的資料:<br/><br/>sudo -s<br/><br/>/etc/init.d/redis-server stop<br/><br/>rm /var/lib/redis/dump.rdb<br/><br/>/etc/init.d/redis-server start<br/><br/>ethercalc<br/><br/>則 /var/lib/redis/dump.rdb 中為空資料.</p>
<h2>CoppeliaSim</h2>
<p>2021 Fall 的電腦輔助設計實習課程將繼續採用 CoppeliaSim 4.1.0 版, 並且採 20210419 版本的 MSYS2 進行編譯.</p>
<p>主要原因是 CoppeliaSim 4.2.0 的原始碼經過 20210419 版本的 MSYS2 編譯後 (20210725 的 MSYS2 目前仍無法正常編譯 CoppeliaSim), 各項 sensors 的運作無法正常啟動 (官方下載的版本則沒有此問題), 且官方 4.2.0 無 .simscene.xml 檔案的輸出入功能. 因此目前決定仍使用 CoppeliaSim 4.1.0.</p>
<p>在 2021 年 6 月之前下載的官方版 CoppeliaSim 4.1.0 加入開啟時間限制, 若要繼續使用先前下載安裝的 4.1.0 版本, 則需要在 system/usrset.txt 中加入:</p>
<p style="padding-left: 30px;">allowOldEduRelease=7501</p>
<p>假如是 4.2.0 則需要在 system/usrset.txt 中加入:</p>
<p style="padding-left: 30px;">allowOldEduRelease=7775</p>
<p>而 2021 年 8 月之後仍可以從官網下載的 Coppeliasim 4.1.0 版, 已經納入此一修改, 因此配置安裝後即可使用, 無需修改 system/usrset.txt 檔案.</p>
<p>假如要在 MacOS 上使用 CoppeliaSim, 可以從官網下載 CoppeliaSim 4.1.0 MacOS 教育版後, 解開壓縮, 將 CoppeliaSim.app 中的 .app 以 mv CoppeliaSim.app CoppeliaSim 後, 即可進入 CoppeliaSim 目錄後, 執行:</p>
<p style="padding-left: 30px;">sudo xattr -r -d com.apple.quarantine *</p>
<p>表示要讓沒在 Apple App Store 上架的 CoppeliaSim, 能夠通過應用程式執行流程查驗的過程, 直接開啟.</p>
<hr/>
<p><a href="https://arxiv.org/pdf/2008.04627.pdf">A Comparison of Humanoid Robot Simulators: A Quantitative Approach</a> (2020)</p>
<p><a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9386154">A Review of Physics Simulators for Robotic Applications</a> (2021)</p>
<p><a href="https://www.coppeliarobotics.com/">https://www.coppeliarobotics.com/</a></p>
<p><a href="https://robocomp.github.io/web/">https://robocomp.github.io/web/</a></p>
<p><a href="https://robocomp.github.io/web/gsoc/2019/nikhil_bansal/post02">https://robocomp.github.io/web/gsoc/2019/nikhil_bansal/post02</a></p>
<p>利用 Python <a href="https://docs.python.org/3/library/xml.etree.elementtree.html">xml 模組</a>解讀 simscene.xml 場景檔案, 列出 xml 檔案格式中的標註名稱:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import xml.etree.ElementTree as ET

# load and parse the vacant simscene xml file
xmlTree = ET.parse('cop.simscene.xml')

# tags has 1196 elements, but only 236 are unique
tags = [elem.tag for elem in xmlTree.iter()]

# let tags2 be vacant list
tags2 = []

# one by one to remove the duplicate tags
for i in tags:
    if i not in tags2:
        tags2.append(i)
print(len(tags), len(tags2))

for tag in tags:
    print(tag)
</pre>
<p><a href="/downloads/xml/xml.leo">xml.leo</a> 檔案範例, 利用 Leo Editor 檔案中的 @settings -&gt; import options -&gt; @data import-xml-tags 設定 <a href="https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm">CoppeliaSim XML</a> 檔案讀取標註. 如此就可以直接文字檔案管理 CoppeliaSim 場景模型.</p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="http://mde.tw/lab/blog/2021-kmol-notice-the-detail-difference-between-programs.html">Leo Editor replace-all 與 xml 解讀功能設定</a></p>
<p style="padding-left: 30px;"><a href="https://www.twblogs.net/a/5d543759bd9eee541c3198a9">V-rep 學習筆記</a></p>
<p></p><h3>Compile CoppeliaSim</h3>
<p>請登入 @gm 帳號後, 下載 <a href="https://drive.google.com/file/d/1xb1Es8N-FxeG10OSnLNDwwi_tXyNTP9t/view?usp=sharing">cad2021_textbook.pdf</a> 課程教材.</p>
<h4>可攜編譯系統:</h4>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1hEGgONw8ahNs7JPAKOurc7JvGfhgO2zY/view?usp=sharing">compile_copsim_for_pj2022.7z</a> (檔案大小 4 GB, 解開壓縮後 14 GB), <a href="https://drive.google.com/file/d/1hV8hHjjnLvUp-AEjd2iCfBYk067WSjcy/view?usp=sharing">coppeliaSim 4.1.0 官方版與 MSYS2 編譯版.7z</a> (檔案大小 412 MB, 解開壓縮後 1GB) 以及 <a href="https://drive.google.com/file/d/1iVkXk-YD0o1pRejL6YTgIwem1lpJaRM3/view?usp=sharing">coppeliaSim 4.1.0 原始碼</a> (檔案大小 250 MB, 解開壓縮後 1GB)</p>
<h4>自行編譯動機:</h4>
<p style="padding-left: 30px;">因為 CoppeliaSim 官方釋出 4.2.0 之後的教育版並無開啟 .simscene.xml 檔案的功能, 而 <a href="https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm">XML 開放檔案格式</a>在自動建立機電資模擬場景, 以及延伸整合 <a href="https://cyberbotics.com/">Webots</a> 檔案格式的過程有其重要性, 因此在電腦輔助設計課程中採用 <a href="https://www.msys2.org/">MSYS2</a> 可攜程式系統編譯 CoppeliaSim 教育版原始碼 (<a href="https://github.com/CoppeliaRobotics">https://github.com/CoppeliaRobotics</a> ).</p>
<p style="padding-left: 30px;">自行編譯 CoppeliaSim 是一項不錯的 C++ 與 Qt 程式練習專案, 由於過程中牽涉如何使用 <a href="https://doc.qt.io/qt-5/qmake-manual.html">qmake</a>, <a href="https://doc.qt.io/qt-5/qmake-manual.html">CMake</a> 與 <a href="https://www.gnu.org/software/make/manual/make.html">Make</a>, 使用者從中可以逐步了解與 <a href="https://riverbankcomputing.com/software/qscintilla/intro">qscintilla</a>, <a href="https://riverbankcomputing.com/software/qscintilla/intro">boost</a>, <a href="https://riverbankcomputing.com/software/qscintilla/intro">Lua</a>, <a href="https://github.com/bulletphysics/bullet3">Bullet</a>, <a href="https://github.com/thomasmarsh/ODE">ODE</a>, <a href="https://github.com/MADEAPPS/newton-dynamics">Newton</a> 與 <a href="https://gcc.gnu.org/">GCC</a> 相關的特性與運用技巧.</p>
<p style="padding-left: 30px;">當然, 最大的動機是希望能夠透過觀摩 CoppeliaSim 的程式碼, 了解如何利用 C++, Lua 與 Python, 結合各種自由開源的 Dynamics 程式庫, 培訓出更多了解運用 Symbolic and Numerical integrated Inverse Kinematic and Dynamic constraints solver 技術, 進而透過動態模擬與控制系統設計改善產品開發的機械設計工程師.</p>
<h4>編譯說明:</h4>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/compilingCoppeliaSim.htm">https://www.coppeliarobotics.com/helpFiles/en/compilingCoppeliaSim.htm</a> </p>
<p>上述可攜程式系統採用 <a href="https://www.msys2.org/">https://www.msys2.org/</a> 製作. 可以放入外接 SSD 中執行與電腦輔助設計相關的程式套件開發.</p><h3>Lua and CPP</h3>
<h4>可攜編譯系統:</h4>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1hEGgONw8ahNs7JPAKOurc7JvGfhgO2zY/view?usp=sharing">compile_copsim_for_pj2022.7z</a> (檔案大小 4 GB, 解開壓縮後 14 GB),  <a href="https://drive.google.com/file/d/1hV8hHjjnLvUp-AEjd2iCfBYk067WSjcy/view?usp=sharing">coppeliaSim 4.1.0 官方版與 MSYS2 編譯版.7z</a> (檔案大小 412 MB, 解開壓縮後 1GB) 以及 <a href="https://drive.google.com/file/d/1iVkXk-YD0o1pRejL6YTgIwem1lpJaRM3/view?usp=sharing">coppeliaSim 4.1.0 原始碼</a> (檔案大小 250 MB, 解開壓縮後 1GB)</p>
<h4>學習動機:</h4>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/playlist?list=PLLwK93hM93Z3nhfJyRRWGRXHaXgNX0Itk">CoppeliaSim</a> 以 Qt + C++ 編寫, 並將 Lua embedded 於 C++ 套件中, 使用者可以利用 Lua Script 操控機電模擬場景中的物件.</p>
<h4>機電模擬系統編譯實習:</h4>
<p style="padding-left: 30px;">以 <a href="https://drive.google.com/file/d/19fRksWRkP9mpYgDFvaBPnFkB6q8B09_w/view?usp=sharing">V-rep 3.1.2 原始碼</a>為例, 利用上列可攜程式系統編譯後, 加上<a href="https://drive.google.com/file/d/1thQ72bUQ2K1d-ODhwgnkUWxfU1mgpwNO/view?usp=sharing">所需的 dll 與相關目錄檔案</a>後, 就可以直接放入隨身系統在 Windows 64 位元環境中執行.</p>
<p>以下為 Lua 與 CPP 結合運用的範例:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/4l5HdmPoynw" title="YouTube video player" width="560"></iframe></p>
<p>編譯流程:</p>
<p style="padding-left: 30px;">mkdir build</p>
<p style="padding-left: 30px;">cd build</p>
<p style="padding-left: 30px;">cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/><br/>mingw32-make</p>
<p style="padding-left: 30px;">取得 main.exe 與下列 EmbeddingLua1.lua 後, 若需要轉為可攜, 需要 libgcc_s_seh-1.dll, libstdc++-6.dll 與 libwinpthread-1.dll 等檔案.</p>
<p>main.cpp</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">/*
	Embedding Lua in C++ Part #1
	"Stupid 3D printer, I didn't want a nest..." - javidx9

	License (OLC-3)
	~~~~~~~~~~~~~~~

	Copyright 2018-2019 OneLoneCoder.com

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions
	are met:

	1. Redistributions or derivations of source code must retain the above
	copyright notice, this list of conditions and the following disclaimer.

	2. Redistributions or derivative works in binary form must reproduce
	the above copyright notice. This list of conditions and the following
	disclaimer must be reproduced in the documentation and/or other
	materials provided with the distribution.

	3. Neither the name of the copyright holder nor the names of its
	contributors may be used to endorse or promote products derived
	from this software without specific prior written permission.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

	Relevant Video: https://youtu.be/4l5HdmPoynw

	Links
	~~~~~
	YouTube:	https://www.youtube.com/javidx9
				https://www.youtube.com/javidx9extra
	Discord:	https://discord.gg/WhwHUMV
	Twitter:	https://www.twitter.com/javidx9
	Twitch:		https://www.twitch.tv/javidx9
	GitHub:		https://www.github.com/onelonecoder
	Patreon:	https://www.patreon.com/javidx9
	Homepage:	https://www.onelonecoder.com

	Author
	~~~~~~
	David Barr, aka javidx9, �OneLoneCoder 2019
*/

#include &lt;iostream&gt;
#include &lt;string&gt;

// include Lua, assumes it is local to this file
extern "C"
{
#include "Y:/lua-5.3.5/src/lua.h"
#include "Y:/lua-5.3.5/src/lauxlib.h"
#include "Y:/lua-5.3.5/src/lualib.h"
}


// Little error checking utility function
bool CheckLua(lua_State *L, int r)
{
	if (r != LUA_OK)
	{
		std::string errormsg = lua_tostring(L, -1);
		std::cout &lt;&lt; errormsg &lt;&lt; std::endl;
		return false;
	}
	return true;
}


int lua_HostFunction(lua_State *L)
{
	float a = (float)lua_tonumber(L, 1);
	float b = (float)lua_tonumber(L, 2);
	std::cout &lt;&lt; "[CPP S4] HostFunction(" &lt;&lt; a &lt;&lt; ", " &lt;&lt; b &lt;&lt; ") called from Lua" &lt;&lt; std::endl;
	float c = a * b;
	lua_pushnumber(L, c);
	return 1;
}


// NOTE !!!
// YOU WILL NEED THE "EmbeddingLua1.lua" FILE FROM GITHUB REPO


int main()
{

	struct Player
	{
		std::string title;
		std::string name;
		std::string family;
		int level;
	} player;
	
	// Create Lua State
	lua_State *L = luaL_newstate();

	// Add standard libraries to Lua Virtual Machine
	luaL_openlibs(L);

	// Register our C++ Function in the global Lua space
	lua_register(L, "HostFunction", lua_HostFunction);
	 

	// Load and parse the Lua File
	if(CheckLua(L, luaL_dofile(L, "EmbeddingLua1.lua")))
	{ 
		// Stage 1: Just read simple variables
		std::cout &lt;&lt; "[CPP] Stage 1 - Read Simple Variables" &lt;&lt; std::endl;
		lua_getglobal(L, "a");
		if (lua_isnumber(L, -1)) std::cout &lt;&lt; "[CPP S1] a = " &lt;&lt; (int)lua_tointeger(L, -1) &lt;&lt; std::endl;
		lua_getglobal(L, "b");
		if (lua_isnumber(L, -1)) std::cout &lt;&lt; "[CPP S1] b = " &lt;&lt; (int)lua_tointeger(L, -1) &lt;&lt; std::endl;
		lua_getglobal(L, "c");
		if (lua_isnumber(L, -1)) std::cout &lt;&lt; "[CPP S1] c = " &lt;&lt; (int)lua_tointeger(L, -1) &lt;&lt; std::endl;
		lua_getglobal(L, "d");
		if (lua_isstring(L, -1)) std::cout &lt;&lt; "[CPP S1] d = " &lt;&lt; lua_tostring(L, -1) &lt;&lt; std::endl &lt;&lt; std::endl;

		// Stage 2: Read Table Object
		std::cout &lt;&lt; "[CPP] Stage 2 - Read Table (Key/Value pairs)" &lt;&lt; std::endl;
		lua_getglobal(L, "player");
		if (lua_istable(L, -1))
		{
			lua_pushstring(L, "Name");
			lua_gettable(L, -2);
			player.name = lua_tostring(L, -1);
			lua_pop(L, 1);

			lua_pushstring(L, "Family");
			lua_gettable(L, -2);
			player.family = lua_tostring(L, -1);
			lua_pop(L, 1);

			lua_pushstring(L, "Title");
			lua_gettable(L, -2);
			player.title = lua_tostring(L, -1);
			lua_pop(L, 1);

			lua_pushstring(L, "Level");
			lua_gettable(L, -2);
			player.level = (int)lua_tointeger(L, -1);
			lua_pop(L, 1);
		}
		std::cout &lt;&lt; "[CPP S2] " &lt;&lt; player.title &lt;&lt; " " &lt;&lt; player.name &lt;&lt; " of " &lt;&lt; player.family &lt;&lt; " [Lvl: " &lt;&lt; player.level &lt;&lt; "]" &lt;&lt; std::endl &lt;&lt; std::endl; 

		// Stage 3: Call Lua Function
		std::cout &lt;&lt; "[CPP] Stage 3 - Call Lua Function" &lt;&lt; std::endl;
		lua_getglobal(L, "CalledFromCPP1");
		if (lua_isfunction(L, -1))
		{
			lua_pushnumber(L, 5.0f);
			lua_pushnumber(L, 6.0f);
			lua_pushstring(L, "Bwa ha ha!");
			std::cout &lt;&lt; "[CPP S3] Calling 'CalledFromCPP1' in lua script" &lt;&lt; std::endl;
			if (CheckLua(L, lua_pcall(L, 3, 1, 0)))
			{
				std::cout &lt;&lt; "[CPP S3] 'CalledFromCPP1' returned " &lt;&lt; (float)lua_tonumber(L, -1) &lt;&lt; std::endl &lt;&lt; std::endl;
			}
		}

		// Stage 4: Call Lua Function, which calls C++ Function
		std::cout &lt;&lt; "[CPP] Stage 4 - Call Lua Function, whcih in turn calls C++ Function" &lt;&lt; std::endl;
		lua_getglobal(L, "CalledFromCPP2");
		if (lua_isfunction(L, -1))
		{
			lua_pushnumber(L, 5.0f);
			lua_pushnumber(L, 6.0f);
			std::cout &lt;&lt; "[CPP S4] Calling 'CalledFromCPP2' in lua script" &lt;&lt; std::endl;
			if (CheckLua(L, lua_pcall(L, 2, 1, 0)))
			{
				std::cout &lt;&lt; "[CPP S4] 'CalledFromCPP2' returned " &lt;&lt; (float)lua_tonumber(L, -1) &lt;&lt; std::endl &lt;&lt; std::endl;
			}
		}
	}

	
	system("pause");
	lua_close(L);
	return 0;
}</pre>
<p>CMakeLists.txt</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">cmake_minimum_required(VERSION 3.9.0)
project(main)

set (PROJECT_SOURCES
        "main.cpp"
        )

add_executable(main ${PROJECT_SOURCES})

target_link_libraries(main winmm "Y:/lua-5.3.5/src/liblua.a")</pre>
<p>EmbeddingLua1.lua</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">--	Embedding Lua in C++ Part #1
--	"Stupid 3D printer, I didn't want a nest..." - javidx9
--
--	License (OLC-3)
--	~~~~~~~~~~~~~~~
--
--	Copyright 2018-2019 OneLoneCoder.com
--
--	Redistribution and use in source and binary forms, with or without
--	modification, are permitted provided that the following conditions
--	are met:
--
--	1. Redistributions or derivations of source code must retain the above
--	copyright notice, this list of conditions and the following disclaimer.
--
--	2. Redistributions or derivative works in binary form must reproduce
--	the above copyright notice. This list of conditions and the following
--	disclaimer must be reproduced in the documentation and/or other
--	materials provided with the distribution.
--
--	3. Neither the name of the copyright holder nor the names of its
--	contributors may be used to endorse or promote products derived
--	from this software without specific prior written permission.
--
--	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
--	"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
--	LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
--	A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
--	HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
--	SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
--	LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
--	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
--	THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
--	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
--	OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--
--	Relevant Video: https://youtu.be/4l5HdmPoynw
--
--	Links
--	~~~~~
--	YouTube:	https://www.youtube.com/javidx9
--				https://www.youtube.com/javidx9extra
--	Discord:	https://discord.gg/WhwHUMV
--	Twitter:	https://www.twitter.com/javidx9
--	Twitch:		https://www.twitch.tv/javidx9
--	GitHub:		https://www.github.com/onelonecoder
--	Patreon:	https://www.patreon.com/javidx9
--	Homepage:	https://www.onelonecoder.com
--
--	Author
--	~~~~~~
--	David Barr, aka javidx9, �OneLoneCoder 2019



-- Stage 1: Reading Simple Values
a = 5
b = 7
c = a + b
d = "OneLoneCoder.com"

-- Stage 2: Reading a simple object
player = {Title = "Squire", Name = "Ciaran", Family = "Wirral", Level = 20}

-- Stage 3: Calling a Lua Function
function CalledFromCPP1(r1, r2, r3)
	io.write("[LUA S3] CalledFromCPP1("..r1..", "..r2..", "..r3..")\n")
	return r1 * r2
end

-- Stage 4: Calling a C++ Function
function CalledFromCPP2(r1, r2)
	io.write("[LUA S4] CalledFromCPP2("..r1..", "..r2..")\n")
	io.write("[LUA S4] Calling HostFunction("..r1..", "..r2..")\n")
	r = HostFunction(r1, r2)
	io.write("[LUA S4] HostFunction returned "..r.."\n")
	return r * 15
end
	</pre>
<h4>進階參考:</h4>
<p style="padding-left: 30px;"><a href="https://poga.github.io/lua53-notes/introduction.html">Notes on the Implementation of Lua 5.3</a></p>
<p style="padding-left: 30px;">Lua 與 Rust 的綁定: <a href="https://github.com/amethyst/rlua">https://github.com/amethyst/rlua</a> </p>
<p></p><h3>RML</h3>
<p><a href="http://www.reflexxes.ws/software/typeiirml/v1.2.6/docs/page__reflexxes_motion_libraries.html">Reflexxes Motion Libraries</a> (RML)</p>
<h4>About <a href="http://www.reflexxes.ws">Reflexxes</a>:</h4>
<p style="padding-left: 30px;">Source: <a href="http://www.reflexxes.ws/company/about-us.html">http://www.reflexxes.ws/company/about-us.html</a></p>
<p style="padding-left: 30px;">Reflexxes is an engineering company that specializes in developing online motion generation software for robots and servo drive controllers. Founded in May 2010, the company began as a spinoff of the <a href="https://www.rob.cs.tu-bs.de/">Robotics Institute</a> at <a href="https://www.tu-braunschweig.de/">TU Braunschweig</a> (Germany), where a team of researchers around Torsten Kroeger first developed an algorithm for computing robot motion trajectories from arbitrary initial states on-the-fly. This allowed robots to react instantaneously to sensor signals and events in any situation.<br/><br/>Using these research results, we offer:<br/><br/>Professional software products, long-term support and updates for robotics and servo drive control manufacturers entering new application domains that require highly reactive motion control capabilities.</p>
<p style="padding-left: 30px;">Free software implementations of advanced online trajectory generation algorithms and free support for research and education institutions.<br/><br/>Our developments of sensor-based robot motion control features bring cutting-edge research results directly to reliable industrial applications and everyday-life. In 2014, Reflexxes has joined Google, Inc..</p>
<p style="padding-left: 30px;">Source: <a href="https://de.linkedin.com/in/kroegertorsten">https://de.linkedin.com/in/kroegertorsten</a></p>
<p style="padding-left: 30px;">Kroeger Torsten is Chief Technology Officer at Intrinsic. Before joining Intrinsic, in July 2021, he was a a Director of Robotics Research and Engineering at X.<br/><br/>Torsten has been working as a research consultant for Volkswagen AG, KUKA Roboter GmbH, Connyun GmbH, Manz Automation AG, Auris Surgical Robotics, Inc., Redwood Robotics, Inc., and Google, Inc.. Torsten is an advisory board member of Fischerwerke and Pictet Asset Management.<br/><br/>He is the founder and former CEO of Reflexxes GmbH, a startup working on research and development of real-time motion generation software. In 2014, Reflexxes was acquired by Google, where Torsten became the Head of a Robotics Software Division. This included coordinating robotics and machine learning research activities between DeepMind, Google Research, Boston Dynamics, and X.<br/><br/>He is also a Co-founder and former CEO of Loom Vision GmbH. Loom Vision's focus was on software and certification of machine learning and robotics software. In 2018, the team of Loom Vision GmbH joined X.<br/><br/>He is also Professor of Computer Science and the Director of Intelligent Process Control and Robotics Laboratory (IPR) of the Institute for Anthropomatics and Robotics (IAR) at Karlsruhe Institute of Technology (KIT), currently on leave.<br/><br/>Torsten is Vice President of Conference Activities of the IEEE Robotics and Automation Society, an editor or an associate editor of multiple IEEE conference proceedings, books, and book series, and the Multimedia Editor of the Springer Handbook of Robotics.</p>
<p><a href="https://motion.cs.illinois.edu/RoboticSystems/WhatIsMotionPlanning.html">https://motion.cs.illinois.edu/RoboticSystems/WhatIsMotionPlanning.html</a></p>
<p>在線運動軌跡程式庫 Type II: <a href="https://github.com/iocroblab/reflexxes">https://github.com/iocroblab/reflexxes</a></p>
<p><a href="http://www.reflexxes.ws/products/reflexxes-motion-libraries.html">http://www.reflexxes.ws/products/reflexxes-motion-libraries.html</a></p>
<p>Open Motion Planning Library (OMPL): <a href="https://github.com/ompl/ompl">https://github.com/ompl/ompl</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-3-642-05175-3">On-Line Trajectory Generation in Robotic Systems</a> (在校園網路中下載電子書)</p>
<p><a href="/downloads/2014_Time-Optimal Control by Iterating Forward and Backward in Time.pdf">2014_Time-Optimal Control by Iterating Forward and Backward in Time.pdf</a></p>
<p><a href="/downloads/2016_On Trajectory Generation for Robots.pdf">2016_On Trajectory Generation for Robots.pdf</a></p>
<p><a href="/downloads/2019_An Online Trajectory Generator on SE3 for Human–Robot Collaboration.pdf">2019_An Online Trajectory Generator on SE3 for Human–Robot Collaboration.pdf</a></p>
<p><a href="/downloads/2020_Real-time quintic Hermite interpolation for robot trajectory execution.pdf">2020_Real-time quintic Hermite interpolation for robot trajectory execution.pdf</a></p>
<p><a href="/downloads/Robotic Pre-Manipulation-Real-Time Polynomial Trajectory Control for Dynamic Object Interception with Minimum Jerk.pdf">Robotic Pre-Manipulation-Real-Time Polynomial Trajectory Control for Dynamic Object Interception with Minimum Jerk.pdf</a></p>
<p><a href="/downloads/2021_Sample-efficient Reinforcement Learning in Robotic Table Tennis.pdf">Sample-efficient Reinforcement Learning in Robotic Table Tennis.pdf</a></p>
<p><a href="/downloads/2018_An Open-Source Library for Physical Human–Robot Interaction.pdf">2018_An Open-Source Library for Physical Human–Robot Interaction.pdf</a></p>
<p><a href="https://github.com/open-phri/open-phri">https://github.com/open-phri/open-phri</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/lirmm/pid-workspace">https://github.com/lirmm/pid-workspace</a></p>
<p></p><h3>XML</h3>
<p>CoppeliaSim 支援<a href="https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm">模擬場景 XML 檔案</a>格式.</p>
<p><a href="https://gazebosim.org/tutorials/?tut=ros_urdf">https://gazebosim.org/tutorials/?tut=ros_urdf</a></p>
<p><a href="http://sdformat.org/">http://sdformat.org/</a> </p>
<p>有關 <a href="https://leoeditor.com/">Leo Editor</a> @data import-xml-tags <a href="https://groups.google.com/g/leo-editor/c/kgwfUHJdM1s?pli=1">設定</a>.</p>
<p><a href="https://motion.cs.illinois.edu/software/klampt/latest/pyklampt_docs/Manual-FileTypes.html">https://motion.cs.illinois.edu/software/klampt/latest/pyklampt_docs/Manual-FileTypes.html</a></p>
<p></p><h2>Webots</h2>
<p>原始作者: Olivier Michel <a href="https://scholar.google.com/citations?user=7v4LnnUAAAAJ&amp;hl=en">論文發表</a></p>
<p>原始碼: <a href="https://github.com/cyberbotics/webots">https://github.com/cyberbotics/webots</a></p>
<p>使用授權: <a href="https://github.com/cyberbotics/webots/blob/master/LICENSE">https://github.com/cyberbotics/webots/blob/master/LICENSE</a> (<a href="https://ossf.denny.one/en/legal-column-list/8581-the-elaborate-license-apache-20.html">Apache License 2.0 使用授權</a>)</p>
<p>Webots 在原始碼的使用授權上比 CoppeliaSim <a href="https://www.coppeliarobotics.com/helpFiles/en/licensing.htm">多元的教育與商業使用授權</a>上寬鬆許多, 由於 Apache License 2.0 具有不可撤回 (irrevocable) 的特性, 因此自從 <a href="https://cyberbotics.com/doc/blog/Webots-2019-a-release">2019a</a> 從封閉商用系統轉為開源之後, 無論在 Github 上的熱絡度, 或者參與協同編碼的人數明顯高於 CoppeliaSim 許多.</p>
<p>但是由於 Webots 並沒有像 CoppeliSim 提供公開的 <a href="https://forum.coppeliarobotics.com/">Forum</a>, 因此在研究 Webots 的過程只能從 <a href="https://cyberbotics.com/doc/guide/index">Documentation</a> 與</p>
<p><a href="https://github.com/cyberbotics/webots">原始碼</a>下手.</p>
<p>假如從 Github 原始碼管理的角度來看, <a href="https://github.com/cyberbotics/webots">Webots 原始碼</a>的整合度遠高於 CoppeliaSim (<a href="https://github.com/CoppeliaRobotics">github</a>), <a href="https://github.com/cyberbotics/webots">Webots 原始碼</a> 將主要的程式放在同一個倉儲中, 且 <a href="https://cyberbotics.com/doc/guide/index">Documentation</a> 採用 <a href="https://github.com/showdownjs/showdown">Showdown</a> 以 Markdown 編寫後在網頁上即時轉為 html, 且配合每年兩次改版 <a href="https://cyberbotics.com/doc/guide/index">Documentation</a> 可同時配合倉儲內容更動.</p>
<p>至於 CoppeliaSim 除了<a href="https://github.com/CoppeliaRobotics/CoppeliaSimLib">主核心程式庫倉儲</a>外, 還包含多達幾十個大小不同的必要程式庫與延伸程式庫, 所採用的 <a href="https://github.com/bulletphysics/bullet3">Bullet</a>, <a href="https://github.com/thomasmarsh/ODE">ODE</a>, <a href="https://github.com/MADEAPPS/newton-dynamics">Newton</a> 屬於開源軟體, 但 <a href="https://en.wikipedia.org/wiki/Vortex_(software)">Vortex </a>dynamics 程式庫則是封閉商用套件. 且即便是最新版的 CoppeliaSim 4.2.0 仍然採用 2015 年的 3.12 版 Newton</p>
<h4>編譯 Webots</h4>
<p style="padding-left: 30px;">編譯 Controllers: <a href="https://www.cyberbotics.com/doc/guide/compiling-controllers-in-a-terminal">https://www.cyberbotics.com/doc/guide/compiling-controllers-in-a-terminal</a></p>
<p style="padding-left: 60px;"><a href="https://cyberbotics.com/doc/guide/controller-programming">https://cyberbotics.com/doc/guide/controller-programming</a></p>
<p style="padding-left: 60px;"><a href="https://cyberbotics.com/doc/guide/using-webots-makefiles">https://cyberbotics.com/doc/guide/using-webots-makefiles</a></p>
<p style="padding-left: 30px;">編譯 <a href="https://cyberbotics.com/doc/reference/physics-plugin">Physics plugin</a>: <a href="https://cyberbotics.com/doc/reference/compiling-the-physics-plugin">https://cyberbotics.com/doc/reference/compiling-the-physics-plugin</a></p>
<p style="padding-left: 60px;">A physics plugin is a user-implemented shared library which is loaded by Webots at run-time, and which gives access to the low-level API of the ODE physics engine.</p>
<p style="padding-left: 60px;">A physics plugin can be used, for example, to gather information about the simulated bodies (position, orientation, linear or angular velocity, etc.), to add forces and torques, to add extra joints, e.g., "ball &amp; socket" or "universal joints" to a simulation.</p>
<p style="padding-left: 60px;">For example with a physics plugin it is possible to design an aerodynamics model for a flying robot, a hydrodynamics model for a swimming robot, etc. Moreover, with a physics plugin you can implement your own collision detection system and define non-uniform friction parameters on some surfaces. Note that physics plugins can be programmed only in C or C++.</p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com">Webots</a> 原始碼: <a href="https://github.com/cyberbotics/webots">https://github.com/cyberbotics/webots</a></p>
<p style="padding-left: 60px;">主要核心程式碼: <a href="https://github.com/cyberbotics/webots/tree/master/src/webots">https://github.com/cyberbotics/webots/tree/master/src/webots</a></p>
<p style="padding-left: 60px;">必須搭配:</p>
<p style="padding-left: 90px;">controller: <a href="https://github.com/cyberbotics/webots/tree/master/src/controller">https://github.com/cyberbotics/webots/tree/master/src/controller</a></p>
<p style="padding-left: 90px;">glad: <a href="https://github.com/cyberbotics/webots/tree/master/src/glad">https://github.com/cyberbotics/webots/tree/master/src/glad</a> (Loader generator)</p>
<p style="padding-left: 90px;">OpenGL math: <a href="https://github.com/g-truc/glm">https://github.com/g-truc/glm</a></p>
<p style="padding-left: 90px;">ode: <a href="https://github.com/cyberbotics/webots/tree/master/src/ode">https://github.com/cyberbotics/webots/tree/master/src/ode</a></p>
<p style="padding-left: 90px;">stb: <a href="https://github.com/nothings/stb">https://github.com/nothings/stb</a></p>
<p style="padding-left: 90px;">wren: <a href="https://github.com/cyberbotics/webots/tree/master/src/wren">https://github.com/cyberbotics/webots/tree/master/src/wren</a> (Rendering library)</p>
<p style="padding-left: 30px;">採用外部 IDE: <a href="https://cyberbotics.com/doc/guide/using-your-ide">https://cyberbotics.com/doc/guide/using-your-ide</a></p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com">Webots</a> 輸入 3D 幾何零組件所使用的程式庫為 <a href="https://github.com/assimp/assimp">https://github.com/assimp/assimp</a>, 與 CoppliaSim 的 <a href="https://github.com/CoppeliaRobotics/simExtAssimp">https://github.com/CoppeliaRobotics/simExtAssimp</a> extensions 使用同一個 Open Asset Importer Library. 而 assimp 倉儲來帶有一個 <a href="https://github.com/assimp/assimp_qt_viewer">https://github.com/assimp/assimp_qt_viewer</a> 利用 Qt 與 OpenGL 檢視 3D 零組件, 也有一個採 C# 編寫只能用於 Windows 的 <a href="https://github.com/acgessler/open3mod">https://github.com/acgessler/open3mod</a> 3D 零組件檢視套件.</p>
<p style="padding-left: 60px;">根據 <a href="https://github.com/assimp/assimp">Assimp</a> 主要開發者 <a href="https://github.com/acgessler">Alexander Gessler</a> 的<a href="https://de.linkedin.com/in/acgessler">領英資料</a>, 此程式庫於 2008 年啟動開發, 而作者於 2011-2014 於 <a href="https://www.uni-stuttgart.de/en/">https://www.uni-stuttgart.de/en/</a> 大學取得電腦與數學學士學位.</p>
<p style="padding-left: 30px;">根據<a href="https://github.com/cyberbotics/webots/wiki/Windows-Optional-Dependencies">編譯說明</a>, <a href="https://cyberbotics.com">Webots</a> 的 Python wrapper 採用 <a href="http://www.swig.org/">SWIG </a>介面製作.</p>
<p style="padding-left: 30px;">將模擬控制系統轉至實體 Robots: <a href="https://www.cyberbotics.com/doc/guide/transfer-to-your-own-robot">https://www.cyberbotics.com/doc/guide/transfer-to-your-own-robot</a></p>
<p style="padding-left: 30px;">在 <a href="https://cyberbotics.com">Webots</a> documentation 連結後加上版次號 (每年分 a 與 b 兩個版本), 就可以列出對應版次的資料內容:</p>
<p style="padding-left: 60px;"><a href="https://www.cyberbotics.com/doc/guide/starting-webots?version=R2021a">https://www.cyberbotics.com/doc/guide/starting-webots?version=R2021a</a></p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com">Webots</a> 與 <a href="https://github.com/ArduPilot/ardupilot">Ardupilot</a> 整合應用: <a href="https://ardupilot.org/dev/docs/sitl-with-webots.html">https://ardupilot.org/dev/docs/sitl-with-webots.html</a></p>
<p style="padding-left: 60px;">Source: <a href="https://ardupilot.org/index.php/about">https://ardupilot.org/index.php/about</a></p>
<p style="padding-left: 60px;">The ArduPilot Project provides an advanced, full-featured and reliable open source autopilot software system. The first ArduPilot open code repository was created in 2009 - since then it has been developed by a team of diverse professional engineers, academics, computer scientists, and other members of our global community. It is capable of controlling almost any vehicle system imaginable: conventional and Vertical Take-Off and Landing (<a href="https://en.wikipedia.org/wiki/VTOL">VTOL</a>) airplanes, gliders, multirotors, helicopters, sailboats, powered boats, submarines, ground vehicles and even Balance-Bots.</p>
<p style="padding-left: 60px;"><a href="https://ardupilot.org/copter/docs/common-autopilots.html">https://ardupilot.org/copter/docs/common-autopilots.html</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/cyberbotics/porting-a-c-rendering-engine-to-webassembly-9c32d76c31f1">Porting Webots rendering engine to webassembly</a> (<a href="https://github.com/cyberbotics/webots/pull/2769">Pull request</a>)</p><h3>SUMO</h3>
<p>Source: <a href="https://www.eclipse.org/sumo/">https://www.eclipse.org/sumo/</a></p>
<p style="padding-left: 30px;">Simulation of Urban MObility (SUMO) is a free and open source traffic simulation suite. It is available since 2001 and allows modelling of intermodal traffic systems - including road vehicles, public transport and pedestrians. Included with SUMO is a wealth of supporting tools which automate core tasks for the creation, the execution and evaluation of traffic simulations, such as network import, route calculations, visualization and emission calculation. SUMO can be enhanced with custom models and provides various APIs to remotely control the simulation.</p>
<p> 原始碼: <a href="https://github.com/eclipse/sumo">https://github.com/eclipse/sumo</a></p>
<p>Open Street Map: <a href="https://www.openstreetmap.org">https://www.openstreetmap.org</a> </p>
<p>Open Asset Importer Library: <a href="https://www.assimp.org/">https://www.assimp.org/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/assimp/assimp">https://github.com/assimp/assimp</a></p>
<p>Open 3D Model Viewer: <a href="https://github.com/acgessler/open3mod">https://github.com/acgessler/open3mod</a> </p>
<p></p><h2>強化學習</h2>
<p><a href="https://github.com/timzhang642/3D-Machine-Learning">https://github.com/timzhang642/3D-Machine-Learning</a></p>
<h4>Pytorch Reinforcement Learning Library:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/thu-ml/tianshou">https://github.com/thu-ml/tianshou</a></p>
<h4>Deep Learning Platform:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/determined-ai/determined">https://github.com/determined-ai/determined</a> </p>
<h4>UIUC CS440:</h4>
<h4 style="padding-left: 30px;">2020:</h4>
<p style="padding-left: 60px;"><a href="https://courses.grainger.illinois.edu/cs440/fa2020/MPs/mp7/assignment7.html">https://courses.grainger.illinois.edu/cs440/fa2020/MPs/mp7/assignment7.html</a></p>
<p style="padding-left: 90px;">Snake is a famous video game originated in the 1976 arcade game Blockade. The player uses up, down, left and right to control the snake which grows in length (when it eats the food pellet), with the snake body and walls around the environment being the primary obstacle. In this assignment, you will train AI agents using reinforcement learning to play a simple version of the game snake. You will implement a TD version of the Q-learning algorithm.</p><h3>Snake RL</h3>
<p><a href="https://github.com/mdecourse/Snake-Reinforcement-Learning">https://github.com/mdecourse/Snake-Reinforcement-Learning</a></p>
<p>Applying basic reinforcement learning principles using the Snake game in Python<br/><br/>Snake.py is a basic snake game.<br/><br/>QLearning.py teaches an agent to play the snake game using Q-Learning. For every move, the game will send a reward. If the snake collides with itself or a wall, there is a negative reward. If the snake moves towards the food, there is a positive reward.</p>
<p>The Q matrix is initially filled with zeros. The size is (number of states, number of actions).</p>
<p>Every move that the agent makes, the Q table is updated as below:</p>
<p>Q[state, action] = reward + gamma * max(Q[new_state, :])</p>
<p>During the training phase, the agent will either choose the action with the max Q value at that state or the agent will randomly choose an action. The Q matrix is then updated using the equation above.</p>
<p>This process is repeated until the game is complete. Many games are played to update the Q matrix.</p>
<p>QLearning.py will automatically animate some samples games at various stages of the training process.</p>
<p>See below for example games using the Q matrix at various stages in the training process.</p>
<p><img alt="" height="398" src="/images/Animated_Snake_Games.gif" width="400"/></p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://towardsdatascience.com/snake-played-by-a-deep-reinforcement-learning-agent-53f2c4331d36">https://towardsdatascience.com/snake-played-by-a-deep-reinforcement-learning-agent-53f2c4331d36</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/snake">https://github.com/mdecourse/snake</a></p>
<p style="padding-left: 30px;"><a href="https://www.learndatasci.com/tutorials/reinforcement-q-learning-scratch-python-openai-gym/">https://www.learndatasci.com/tutorials/reinforcement-q-learning-scratch-python-openai-gym/</a></p>
<p style="padding-left: 30px;"><a href="https://www.analyticsvidhya.com/blog/2021/04/q-learning-algorithm-with-step-by-step-implementation-using-python/">https://www.analyticsvidhya.com/blog/2021/04/q-learning-algorithm-with-step-by-step-implementation-using-python/</a></p>
<h4>Snake.py</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
Basic snake game for use by reinforcement learning.
Run this script to test it out in the console
'''
import numpy as np
import random


class BodyNode():
    def __init__(self, parent, x, y):
        self.parent = parent
        self.x = x
        self.y = y

    def setX(self, x):
        self.x = x

    def setY(self, y):
        self.y = y

    def setParent(self, parent):
        self.parent = parent

    def getPosition(self):
        return (self.x, self.y)
    
    def getIndex(self):
        return (self.y, self.x)


class Snake():
    def __init__(self, x, y):
        self.head = BodyNode(None, x, y)
        self.tail = self.head

    def moveBodyForwards(self):
        currentNode = self.tail
        while currentNode.parent != None:
            parentPosition = currentNode.parent.getPosition()
            currentNode.setX(parentPosition[0])
            currentNode.setY(parentPosition[1])
            currentNode = currentNode.parent

    def move(self, direction):
        (oldTailX, oldTailY) = self.tail.getPosition()
        self.moveBodyForwards()
        headPosition = self.head.getPosition()
        if direction == 0:
            # y 座標 - 1 表示往下移動 - down
            self.head.setY(headPosition[1] - 1)
        elif direction == 1:
            # x 座標 + 1 表示往右移動 - right
            self.head.setX(headPosition[0] + 1)
        elif direction == 2:
            # y 座標 + 1 表示往上移動 - up
            self.head.setY(headPosition[1] + 1)
        elif direction == 3:
            # x 座標 - 1 表示往左移動 - left
            self.head.setX(headPosition[0] - 1)
        return (oldTailX, oldTailY, *self.head.getPosition())

    def newHead(self, newX, newY):
        newHead = BodyNode(None, newX, newY)
        self.head.setParent(newHead)
        self.head = newHead
        
    def getHead(self):
        return self.head
    
    def getTail(self):
        return self.tail


class SnakeGame():
    def __init__(self, width, height):
        # arbitrary numbers to signify head, body, and food)
        # 0 for empty space
        self.headVal = 2
        self.bodyVal = 1
        self.foodVal = 7
        self.width = width
        self.height = height
        self.board = np.zeros([height, width], dtype=int)

        self.length = 1

        startX = width//2
        startY = height//2

        self.board[startX, startY] = self.headVal
        self.snake = Snake(startX, startY)
        self.spawnFood()
        self.calcState()
#        print(self.board)

    def spawnFood(self):
        # spawn food at location not occupied by snake
        emptyCells = []
        for index, value in np.ndenumerate(self.board):
            if value != self.bodyVal and value != self.headVal:
                emptyCells.append(index)
        self.foodIndex = random.choice(emptyCells)
        self.board[self.foodIndex] = self.foodVal

    def checkValid(self, direction):
        # check if move is blocked by wall
        newX, newY = self.potentialPosition(direction)
        if newX == -1 or newX == self.width:
            return False
        if newY == -1 or newY == self.height:
            return False
        # check if move is blocked by snake body
        if self.board[newY, newX] == self.bodyVal:
            return False
        return True

    def potentialPosition(self, direction):
        (newX, newY) = self.snake.getHead().getPosition()
        if direction == 0:
            newY -= 1
        elif direction == 1:
            newX += 1
        elif direction == 2:
            newY += 1
        elif direction == 3:
            newX -= 1
        return (newX, newY)

    def calcState(self):
        # state is as follows.
        # Is direction blocked by wall or snake?
        # Is food in this direction?
        # (top blocked, right blocked, down blocked, left blocked,
        # top food, right food, down food, left food)
        self.state = np.zeros(8, dtype=int)
        for i in range(4):
            self.state[i] = not self.checkValid(i)
        self.state[4:] = self.calcFoodDirection()

    def calcStateNum(self):
        # calculate an integer number for state
        # there will be 2^8 potential states but not all states are reachable
        stateNum = 0
        for i in range(8):
            stateNum += 2**i*self.state[i]
        return stateNum

    def calcFoodDirection(self):
        # food can be 1 or 2 directions eg. right and up
        # 0 is up, 1 is right, 2 is down, 3 is left
        foodDirections = np.zeros(4, dtype=int)
        dist = np.array(self.foodIndex) - np.array(self.snake.getHead().getIndex())
        if dist[0] &lt; 0:
            # down
            foodDirections[0] = 1
        elif dist[0] &gt; 0:
            # up
            foodDirections[2] = 1
        if dist[1] &gt; 0:
            # right
            foodDirections[1] = 1
        elif dist[1] &lt; 0:
            # left
            foodDirections[3] = 1
        return foodDirections

    def plottableBoard(self):
        #returns board formatted for animations
        board = np.zeros([self.width, self.height])
        currentNode = self.snake.tail
        count = 0
        while True:
            count += 1
            board[currentNode.getIndex()] = 0.2 + 0.8*count/self.length
            currentNode = currentNode.parent
            if currentNode == None:
                break
        board[self.foodIndex] = -1
        return board
        
        
    def display(self):
        for i in range(self.width+2):
            print('-', end='')
        for i in range(self.height):
            print('\n|', end='')
            for j in range(self.width):
                if self.board[i, j] == 0:
                    print(' ', end='')
                elif self.board[i, j] == self.headVal:
                    print('O', end='')
                elif self.board[i, j] == self.bodyVal:
                    print('X', end='')
                elif self.board[i, j] == self.foodVal:
                    print('*', end='')
            print('|', end='')
        print()
        for i in range(self.width+2):
            print('-', end='')
        print()
#        print(self.board)

    def makeMove(self, direction):
        gameOver = False
        if self.checkValid(direction):
            # set reward if moving in the right direction
            if self.calcFoodDirection()[direction] == 1:
                reward = 1
            else:
                reward = 0
            (headX, headY) = self.snake.getHead().getPosition()
            # set old head to body val
            self.board[headY, headX] = self.bodyVal

            # check if we got the fruit
            potX, potY = self.potentialPosition(direction)
            if self.board[potY, potX] == self.foodVal:
                # extend the snake
                self.snake.newHead(potX, potY)
                self.board[potY, potX] = self.headVal
                self.spawnFood()
                self.length += 1
                # if you want to give a higher reward for getting the fruit, uncomment below
                reward = 2
            else:
                # move the snake
                (oldTailX, oldTailY, newHeadX, newHeadY) = self.snake.move(direction)
                self.board[oldTailY, oldTailX] = 0
                self.board[newHeadY, newHeadX] = self.headVal
        else:
            reward = -2
            gameOver = True
        self.calcState()
        return (self.calcStateNum(), reward, gameOver, self.length)


if __name__ == "__main__":
    game = SnakeGame(8, 8)
    game.display()
    print("Score: 1")
    while True:
        direction = input("Input Direction (w,a,s,d or q to quit): ")
        if direction == 'w':
            new_state, reward, gameOver, score = game.makeMove(0)
        elif direction == 'a':
            new_state, reward, gameOver, score = game.makeMove(3)
        elif direction == 's':
            new_state, reward, gameOver, score = game.makeMove(2)
        elif direction == 'd':
            new_state, reward, gameOver, score = game.makeMove(1)
        elif direction == 'q':
            break
        if gameOver:
            print("Game Over, Score:", score)
            break
        else:
            game.display()
            print("Reward:", reward, "Score:", score)
</pre>
<h4>QLearning.py</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
Basic implementation of Q Learning without neural networks
Sometimes the machine will get stuck in an infinite loop of non-scoring moves. If so just rerun the script
'''
import random
from Snake import SnakeGame
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
#%%

def evaluateScore(Q, boardDim, numRuns, displayGame=False):
    # Run the game for a specified number of runs given a specific Q matrix
    cutoff = 100  # X moves without increasing score will cut off this game run
    scores = []
    for i in range(numRuns):
        game = SnakeGame(boardDim, boardDim)
        state = game.calcStateNum()
        score = 0
        oldScore = 0
        gameOver = False
        moveCounter = 0
        while not gameOver:
            possibleQs = Q[state, :]
            action = np.argmax(possibleQs)
            state, reward, gameOver, score = game.makeMove(action)
            if score == oldScore:
                moveCounter += 1
            else:
                oldScore = score
                moveCounter = 0
            if moveCounter &gt;= cutoff:
                # stuck going back and forth
                break
        scores.append(score)
    return np.average(scores), scores


# %%
boardDim = 16  # size of the baord

# state is as follows.
# Is direction blocked by wall or snake?
# Is food in this direction? can either be one or two directions eg (food is left) or (food is left and up)
# state =  (top blocked, right blocked, down blocked, left blocked, up food, right food, down food, left food)
# 8 boolean values. Not all states are reachable (eg states with food directions that don't make sense)
numStates = 2**8
numActions = 4  # 4 directions that the snake can move
Q = np.zeros((numStates, numActions))

# lr = 0.9 #learning rate. not used in this Q learning equation
gamma = 0.8  # discount rate
epsilon = 0.2  # exploration rate in training games
numEpisodes = 10001  # number of games to train for

Qs = np.zeros([numEpisodes, numStates, numActions])
bestLength = 0
print("Training for", numEpisodes, "games...")
for episode in range(numEpisodes):
    #    print("New Game")
    game = SnakeGame(boardDim, boardDim)
    state = game.calcStateNum()
    gameOver = False
    score = 0
    while not gameOver:
        if random.uniform(0, 1) &lt; epsilon:
            action = random.randint(0, 3)
        else:
            possibleQs = Q[state, :]
            action = np.argmax(possibleQs)
        new_state, reward, gameOver, score = game.makeMove(action)

        # http: // mnemstudio.org/path-finding-q-learning-tutorial.htm
        Q[state, action] = reward + gamma * np.max(Q[new_state, :])

        # https://towardsdatascience.com/simple-reinforcement-learning-q-learning-fcddc4b6fe56
        # Q[state, action] = Q[state, action] + lr * (reward + gamma * np.max(Q[new_state, :]) - Q[state, action])
        state = new_state
    Qs[episode, :, :] = np.copy(Q)
    if episode % 100 == 0:
        averageLength, lengths = evaluateScore(Q, boardDim, 25)
        if averageLength &gt; bestLength:
            bestLength = averageLength
            bestQ = np.copy(Q)
        print("Episode", episode, "Average snake length without exploration:", averageLength)
        
#%%
#Animate games at different episodes
print("Generating data for animation...")
#plotEpisodes = [0, 200, 300, 400, 500, 600, 700, 800, 900]
plotEpisodes = [0, 200, 400, 600, 800, 1000, 2500, 5000, 10000]
fig, axes = plt.subplots(3, 3, figsize=(9,9))

axList = []
ims = []
dataArrays = []
scores = []
labels = []

for i, row in enumerate(axes):
    for j, ax in enumerate(row):
        ax.set_title("Episode " + str(plotEpisodes[i*len(row) + j]))
        ax.get_yaxis().set_visible(False)
        ax.get_xaxis().set_visible(False)
        axList.append(ax)
        ims.append(ax.imshow(np.zeros([boardDim, boardDim]), vmin=-1, vmax=1, cmap='RdGy'))
        labels.append(ax.text(0,15, "Length: 0", bbox={'facecolor':'w', 'alpha':0.75, 'pad':1, 'edgecolor':'white'}))
        dataArrays.append(list())
        scores.append(list())
        
stopAnimation = False
maxFrames = 1000
cutoff = 100
numGames = 10
for k in range(numGames):
    games = []
    states = []
    gameOvers = []
    moveCounters = []
    oldScores = []
    for l in range(len(plotEpisodes)):
        game = SnakeGame(boardDim, boardDim)
        games.append(game)
        states.append(game.calcStateNum())
        gameOvers.append(False)
        moveCounters.append(0)
        oldScores.append(0)
    for j in range(maxFrames):
        for i in range(len(plotEpisodes)):
            possibleQs = Qs[plotEpisodes[i], :, :][states[i], :]
            action = np.argmax(possibleQs)
            states[i], reward, gameOver, score = games[i].makeMove(action)
            if gameOver:
                gameOvers[i] = True
            dataArrays[i].append(games[i].plottableBoard())
            scores[i].append(score)
            if score == oldScores[i]:
                moveCounters[i] += 1
            else:
                oldScores[i] = score
                moveCounters[i] = 0
            if moveCounters[i] &gt;= cutoff:
                # stuck going back and forth
                gameOvers[i] = True
        if not any(gameOver == False for gameOver in gameOvers):
            print("Game", k, "finished, total moves:", len(dataArrays[0]))
            break

def animate(frameNum):
    for i, im in enumerate(ims):
        labels[i].set_text("Length: " + str(scores[i][frameNum]))
        ims[i].set_data(dataArrays[i][frameNum])
    return ims+labels
print("Animating snakes at different episodes...")

numFrames = len(dataArrays[0])
ani = animation.FuncAnimation(fig, func=animate, frames=numFrames,blit=True, interval=75, repeat=False, )
plt.show(block=False)
#%%
##uncomment below if you want to output to a video file
#print("Saving to file")
#ani.save('AnimatedGames.mp4', fps=15, extra_args=['-vcodec', 'libx264'])
#print("Done")</pre>
<p>makeQconversionGraphics.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">##Generates convergence graph after QLearning script has run
#%%
usedQs = []
for index, val in np.ndenumerate(Qs[0,:,:]):
    qLine = Qs[:, index[0], index[1]][:5000]
    if any([item != 0 for item in qLine]) and qLine[-1] != 0:
        usedQs.append(np.copy(qLine))
        
usedQs = np.abs(usedQs)
y = []
finalVals = []
for i in range(len(usedQs)):
    #y.append((fullQs[j][hasSomethingList[i][0],hasSomethingList[i][1]] - maxVals[i])/maxVals[i])
    finalVal = np.mean(usedQs[i][-100:])
    finalVals.append(finalVal)
    y = (usedQs[i]-finalVal) / finalVal
    plt.plot(y,color="black",alpha=0.025)
plt.ylim(-1,0.5)
plt.title("Convergence of Q Table")
plt.ylabel("Normalized Q Value")
plt.xlabel("Episode Number")
plt.savefig("ConvergenceGraph.png", dpi=300)
plt.show()</pre>
<p></p>
<h1>課程主題</h1>
<p>直播與討論, MCAD, SSO, Robotics 與系統開發.</p>
<h4>Theoretical based:</h4>
<p style="padding-left: 30px;"><a href="/downloads/india_me6501_computeraideddesign.pdf">india_me6501_computeraideddesign.pdf</a> (<a href="http://rmkec.ac.in/ydeptabout.php?dept=mech">source</a>)</p>
<h4>P.E. based:</h4>
<p style="padding-left: 30px;"><a href="https://catalog.sjsu.edu/preview_course_nopop.php?catoid=1&amp;coid=3748">SJSU CAD course</a>, <a href="https://sjsu.bncollege.com/shop/BNCBTBListView?catalogId=10001&amp;langId=-1&amp;storeId=65133">3 course required materials</a> (<a href="https://www.amazon.com/Analysis-Machine-Elements-SOLIDWORKS-Simulation/dp/1630573795/ref=sr_1_1?dchild=1&amp;keywords=Analysis+of+Machine+Elements+Using+SOLIDWORKS+Simulation+2021&amp;qid=1625290670&amp;s=books&amp;sr=1-1">教科書1</a>, <a href="https://www.amazon.com/Beginners-Guide-SOLIDWORKS-2021-Level/dp/1630573868/ref=sr_1_1?dchild=1&amp;keywords=9781630573867&amp;qid=1625290885&amp;s=books&amp;sr=1-1">教科書2</a>, <a href="https://www.amazon.com/Official-Guide-Certified-SOLIDWORKS-Associate/dp/163057421X">教科書3</a>)</p>
<h4>Ours are ____ based:</h4>
<p style="padding-left: 30px;">Problem solving?</p>
<p style="padding-left: 30px;">Pre-master programs?</p>
<p style="padding-left: 30px;">FMS and AS/RS realization?</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-84800-336-1">Theory and Design of CNC Systems</a> (校園網路下載電子書)</p>
<h4>MCAD 套件:</h4>
<p style="padding-left: 30px;">Solidworks 於 1995 年出現, 在解決 ____ 問題?</p>
<p style="padding-left: 30px;">Onshape 的出現, 在解決 ____ 問題? (<a href="https://www.onshape.com/en/resource-center/videos/introducing-generative-design-for-onshape">reference</a>)</p>
<p style="padding-left: 30px;"><a href="https://www.onshape.com/en/education/">申請 Onshape 教育版帳號</a>. 假如 Onshape 不再免費: <a href="https://solvespace.com">Solvespace</a></p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Generative_design">Generative Design</a> 時代<a href="https://www.youtube.com/watch?v=AnyM-sjXPMo">真的來臨了</a>嗎? (<a href="https://www.worldcadaccess.com/blog/computeraided_design_news/">reference</a>)</p>
<h4>Onshape videos:</h4>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/c/OnshapeInc/videos">https://www.youtube.com/c/OnshapeInc/videos</a></p>
<p style="padding-left: 30px;">Onshape weaknesses: <a href="https://www.worldcadaccess.com/blog/2021/05/onshapes-two-weaknesses.html">https://www.worldcadaccess.com/blog/2021/05/onshapes-two-weaknesses.html</a></p>
<h4>電腦輔助設計實習課程面臨的第一個問題是:</h4>
<p><a href="/downloads/Onshape vs SolidWorks July 2020.pdf">Onshape 與 Solidworks 比較.pdf</a></p>
<p style="padding-left: 30px;">我們該採用剛購買的 SolidWorks 2021 單機套件, 目前只能支援 IPv4 網路協定認證 (校方安裝認證的 AutoDesk Inventor 已經支援 IPv6 網路協定認證), 還是直接採用近端免安裝, 可以利用瀏覽器使用的 Onshape？</p>
<p style="padding-left: 30px;">就方便性而言, 採用 Onshape 有許多優點, 但 SolidWorks 仍然是目前台灣業界普遍採用的參數式電腦輔助設計軟體, 因此若最後仍無法在純 IPv6 環境下取得使用授權, 仍可以設法在上課前五分鐘先以 IPv4 協定上網取得 SolidWorks 的使用授權後, 再切換至純 IPv6 的網路環境 (Why?). 然後主要的零組件繪圖軟體仍以 Onshape 為主.</p>
<p style="padding-left: 30px;">AutoDesk Inventor 呢? 其他 NX12 以及 Solvespace 等三套用不用? Inventor 與 NX12 仍會用於透過 Python API 網際程式介面修改既有零件參數尺寸的範例中, 而 Solvespace 則仍會納入透過 Msys2 進行編譯後, 可產生基本參數零組件的課程主題中, 假如 Solvespace 也能用於網際程式 API 零件訂製中的一環, 當然更好.</p>
<p style="padding-left: 30px;">至於為何要在電腦輔助設計室採用純 IPv6 網路連線, 主要原因在於只有如此才能有足夠的頻寬聯外, 讓所有學員都能將近端的個人或協同分組倉儲的改版資料送到 Github.com, Gitlab.com 與 Heroku.</p>
<p>Git 與 Fossil SCM 的出現分別在解決 ____ 問題?</p>
<h4>電腦輔助設計實習課程面臨的第二個問題是:</h4>
<p style="padding-left: 30px;">課程的主軸為何? 在承接計算機程式與網際內容管理課程之後, 我們希望能夠儘量透過程式方法, 協助解決機電整合產品設計與開發上所面臨的問題. 其中包括:</p>
<p style="padding-left: 30px;">1. 設計歷程中版本保留的議題 - 採用 CMSiMDE 與 Github, Gitlab, Heroku 及 Fossil SCM 再加上 Onshape 中的設計繪圖版本進行管理.</p>
<p style="padding-left: 30px;">2. 從 CAD 轉檔至 CoppeliaSim 時, 能否透過程式方法加速建模流程?</p>
<p style="padding-left: 30px;">3. 產品設計報告除了 CMSiMDE 中的網頁, 簡報與網誌外, 能夠直接透過 Github Actions 適時建立所需的 pdf 文件與雙欄位論文格式檔案?</p>
<p style="padding-left: 30px;">4. 希望在 CoppeliaSim 場景中建立自動化機電整合製造系統, 能否透過手動 IK, 純程式設定 IK 與客製化 IK  運算模組進行模擬運算?</p>
<p style="padding-left: 30px;">5. CMSiMDE html 是否能夠透過 <a href="https://github.com/showdownjs/showdown">https://github.com/showdownjs/showdown</a> 轉為 Markdown 檔案後, 進一步再透過 Pandoc 轉為 LaTeX 或 pdf, 以便實現產品開發流程中的 <a href="https://en.wikipedia.org/wiki/Literate_programming">Literate Programming </a>架構.</p>
<p style="padding-left: 60px;">It’s been more than three decades since literate programming was invented by the legendary Donald Knuth. Its promise was immense — creating software which was more reliable, more understandable, more maintainable, and with hugely more teaching value — software which targeted both humans and computers.</p>
<p style="padding-left: 60px;">What if we replace the software with physical product, <span style="background-color: #ffff99;">can we reach out a more reliable, more understandable, more maintainable, and with hugely more teaching value product which targeted both humans and computers.</span></p>
<p style="padding-left: 60px;"><span style="background-color: #ffff99;">意即: 如何能夠在人與電腦雙重導向的架構中, 完成更可靠, 更令人容易理解, 更易於維護且具備教育價值的產品開發流程.</span></p>
<p style="padding-left: 60px;"><span style="background-color: #ccffcc;">更可靠</span> - 設計資料不易丟失, 每一個環節都能接受驗證, 針對設計流程提出可信賴且正確運算的結果.</p>
<p style="padding-left: 60px;"><span style="background-color: #ccffcc;">更令人容易理解</span> - 列出與設計相關的每一項細節, 背景說明及參考資料.</p>
<p style="padding-left: 60px;"><span style="background-color: #ccffcc;">更容易維護</span> - 不斷思索如何讓產品設計流程更加快速便捷, 易於管理.</p>
<p style="padding-left: 60px;"><span style="background-color: #ccffcc;">具備教育價值</span> - 留下產品設計歷程中進行決策的所有細節, 並舉出當時所面臨的環境與條件選項, 以供參考追蹤學習.</p>
<p>電腦輔助設計實習課程應該要解決 ____ 問題?</p>
<h4>然後呢?</h4>
<ol>
<li>從 <a href="https://www.pbr-book.org/">https://www.pbr-book.org/</a> 帶出 <a href="https://cyberbotics.com/">Webots </a>也許是下一階段有關電腦輔助與協同產品設計相關課程應該進入的領域. (<a href="https://cyberbotics.com/doc/guide/samples-rendering">https://cyberbotics.com/doc/guide/samples-rendering</a>)</li>
<li>Oauth2 從取得使用者登入帳號之後, 再根據 session 中的資料與 Fossil SCM 的 password management, 或許就能有效連結 Google, Github, Gitlab 帳號. 亦即, 當網際 Python 程式經由 Oauth2 取得使用者帳號後, 就發出一則 SQL, 讓該用戶在 Fossil SCM 視為已經登入, 如此便可由該帳號對所屬 Fossil SCM 倉儲進行管理. (<a href="https://github.com/mdecourse/fossiloauth">https://github.com/mdecourse/fossiloauth</a>)</li>
<li>繼續探究 <a href="https://www.coppeliarobotics.com/helpFiles/en/PyRep.htm">https://www.coppeliarobotics.com/helpFiles/en/PyRep.htm</a> 在機電整合系統中與視覺辨識及強化學習相關應用.</li>
</ol>
<h4>利用 <a href="https://www.onshape.com/en/">Onshape</a> 設計繪圖 (教學使用 course At mde):</h4>
<p style="padding-left: 30px;"><a href="https://learn.onshape.com/collections/onshape-fundamentals-cad">https://learn.onshape.com/collections/onshape-fundamentals-cad</a></p>
<p style="padding-left: 30px;">Onshape Forum: <a href="https://forum.onshape.com/">https://forum.onshape.com/</a></p>
<p style="padding-left: 30px;">Can we joint <a href="https://dev-portal.onshape.com/">https://dev-portal.onshape.com/</a></p>
<p style="padding-left: 30px;"><a href="https://cad.onshape.com/documents/d696553a0a6faad6a14608cd/w/f06420e3afff11bc144d91b6/e/d262ede0a6df1b9bda3cfaa3">Conveyor Calculator</a></p>
<p style="padding-left: 30px;"><a href="https://www.onshape.com/en/resource-center/innovation-blog/how-the-dhl-product-development-team-drives-change-from-the-digital-to-the-physical-world">Digital Manufacturing with Onshape</a></p>
<p style="padding-left: 30px;"><a href="https://www.onshape.com/en/resource-center/articles/how-to-onboard-your-first-robotics-team">https://www.onshape.com/en/resource-center/articles/how-to-onboard-your-first-robotics-team</a></p>
<p style="padding-left: 30px;">Featurescript: <a href="https://cad.onshape.com/FsDoc/">https://cad.onshape.com/FsDoc/</a></p>
<p style="padding-left: 30px;"><a href="https://cadlab.mde.tw/post/tag/featurescript.html">Featurescript 參考資料</a></p>
<p style="padding-left: 30px;"><a href="https://cadlab.mde.tw/post/onshape-featurescript-spur-gear-lun-kuo-hui-tu.html">利用 Featurescript 建立正齒輪程式庫</a> (<a href="https://forum.onshape.com/discussion/12532/update-to-featurescript-spur-gear">Onshape 版本</a>)</p>
<p style="padding-left: 30px;"><a href="https://www.onshape.com/en/features/custom-features">https://www.onshape.com/en/features/custom-features</a></p>
<p>六軸機械手臂在解決 ____ 問題?</p>
<h4>Onshape and CoppeliaSim to create an automation assembly line:</h4>
<p style="padding-left: 30px;"><a href="http://mde.tw/cd2021/content/%E5%85%AD%E8%BB%B8%E6%A9%9F%E6%A2%B0%E8%87%82%E6%A8%A1%E5%9E%8B.html">六軸機械手臂零組件</a></p>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm">https://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm</a></p>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm">https://www.coppeliarobotics.com/helpFiles/en/xmlFormat.htm</a></p>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/simUI-widgets.htm">https://www.coppeliarobotics.com/helpFiles/en/simUI-widgets.htm</a></p>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/importExport.htm">https://www.coppeliarobotics.com/helpFiles/en/importExport.htm</a></p>
<h4 style="padding-left: 30px;">IK and Automation:</h4>
<p style="padding-left: 60px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsTutorial.htm">https://www.coppeliarobotics.com/helpFiles/en/inverseKinematicsTutorial.htm</a></p>
<p style="padding-left: 60px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/basicsOnIkGroupsAndIkElements.htm">https://www.coppeliarobotics.com/helpFiles/en/basicsOnIkGroupsAndIkElements.htm</a></p>
<p style="padding-left: 60px;"><a href="https://www.researchgate.net/publication/351561339_An_Inverse_Kinematics_Demonstration_of_a_Custom_Robot_using_C_and_CoppeliaSim/link/609d4bfb458515c2658c7c52/download">IK example</a> (use Onshape create robot assembly and use Lua and Python to control the robot)</p>
<p style="padding-left: 30px;"></p>
<h2>直播與討論</h2>
<p>電腦輔助設計實習課程開設目的在:</p>
<ol>
<li>教導學員收集, 閱讀並整理與 Computer Aided Mechanical Design 有關的知識.</li>
<li>引導學員運用所整理的知識, 藉由實作與練習, 解決"<span style="background-color: #ffff99;">設計多軸機械手臂與周邊設施, 開發能夠自動組裝機械手臂的<a href="https://zh.wikipedia.org/wiki/%E5%BD%88%E6%80%A7%E8%A3%BD%E9%80%A0%E7%B3%BB%E7%B5%B1" style="background-color: #ffff99;">彈性製造系統</a> (Flexible Manufacturing System) 與 <a href="https://en.wikipedia.org/wiki/Automated_storage_and_retrieval_system" style="background-color: #ffff99;">AS/RS</a> (Automated Storage and Retrieval System) 系統</span>"過程所遭遇的各種問題.</li>
<li>鼓勵學員將學習過程所遭遇的問題或成果, 仔細描述後寫成網誌, 其中必須有系統地說明如何搜尋相關資料, 如何擬定解題步驟, 並利用帶字幕的影片說明實作與練習過程.</li>
<li>讓各學員於課程項目實作與練習自評階段時, 能夠提供可定量化與定性化的表格後, 再總結給分.</li>
<li>讓各學員於互評階段時, 能根據上述受評者所提供的網誌, 操作影片與自評參考內容後, 再總結給分.</li>
</ol>
<h4>個人倉儲與網站:</h4>
<p style="padding-left: 30px;">為何參與電腦輔助設計流程的工程師需要運用分散式版次管理系統與雲端網站?</p>
<p style="padding-left: 30px;">版次管理系統在解決 ____ 問題?</p>
<p style="padding-left: 30px;">為何電腦輔助設計相關檔案與設計內容需要分散式管理? 筆電被汽車碾碎之後, 導致研究數據及論文內容丟失, 而無法及時畢業, 該不該令人同情?</p>
<p style="padding-left: 30px;">為何電腦輔助設計流程強調輕薄短小, 敏捷 (<a href="https://en.wikipedia.org/wiki/Agile_software_development">agile</a>) 迅速? 是因為現代人所處的環境瞬息萬變? 還是因為 ____ ?</p>
<p style="padding-left: 30px;">為何少負擔多建樹會是參與協同電腦輔助設計專案流程的重要貢獻指標?</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-73842-0">The Scrum Culture</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-59978-6">Knowledge Management</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-33916-0">Grammar for Teachers</a> (校園網路下載電子書)</p>
<h4 style="padding-left: 30px;">少負擔:</h4>
<p style="padding-left: 60px;">無需厚重的軟硬體工具, 就可以完成團隊直播會議中所指定 (assign) 的工作.</p>
<p style="padding-left: 60px;">無需擔心電腦輔助設計檔案會丟失, 近端硬碟會損壞, 網路會斷線, 電腦會當機.</p>
<p style="padding-left: 60px;">無需擔心團隊工作過程中, 重要的貢獻會被忽視或掩蓋, 團隊直播會議中會沒有發言內容.</p>
<p style="padding-left: 60px;">有沒有好方法可以解決此刻分組團隊正在頭痛的電腦輔助設計問題?</p>
<h4 style="padding-left: 30px;">多建樹:</h4>
<p style="padding-left: 60px;">任何一項工作進度, 都有佐證用的操作影片與提交紀錄可以供人檢視查驗</p>
<p style="padding-left: 60px;">時刻都在思考並搜尋每一項工作任務, 是否可以採用更好的作法解題, 是否已經有人克服相關難題.</p>
<p style="padding-left: 30px;">cmstemplate: <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p style="padding-left: 30px;">CMSiMDE: <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a></p>
<h4>直播與錄影:</h4>
<p style="padding-left: 30px;">課程直播與分組討論直播 - Microphone 與 Webcam 選擇與推薦.</p>
<p style="padding-left: 30px;"><a href="https://meet.google.com">Google Meet</a>, <a href="https://obsproject.com/">OBS</a> + <a href="https://www.youtube.com/">Youtube</a>, <a href="https://jitsi.org/,">https://jitsi.org/,</a> <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/zoomit">zoomit</a>, <a href="https://github.com/ShareX/ShareX">Sharex</a> (直播錄影過程是否可再同時進行其他示範錄影?), <a href="https://github.com/FFmpeg/FFmpeg">FFmpeg</a> 應用等議題.</p>
<h4>課程討論區:</h4>
<h4 style="padding-left: 30px;">Gitter:</h4>
<p style="padding-left: 60px;"><a href="https://gitter.im/">https://gitter.im/</a></p>
<p style="padding-left: 60px;"><a href="https://gitter.im/mdecourse/cad2021">https://gitter.im/mdecourse/cad2021</a></p>
<h4 style="padding-left: 30px;">Zulip:</h4>
<p style="padding-left: 60px;">為什麼要使用 Zulip?</p>
<p style="padding-left: 60px;">學習使用 <a href="https://kmolab.zulipchat.com">https://kmolab.zulipchat.com</a></p>
<h4 style="padding-left: 30px;">Fossil SCM:</h4>
<p style="padding-left: 60px;">Forum 與 Chat</p>
<h2>CAD</h2>
<p><a href="/downloads/1973_Engineering_Design_Handbook_Computer_Aided_Design.pdf">1973_engineering_design_handbook_computer_aided_design_of_mechanical_systems.pdf</a> (<a href="https://apps.dtic.mil/sti/pdfs/AD0767826.pdf">Source</a>)</p>
<p><a href="/downloads/Automatically Generating 60,000 CAD Variantsfor Big Data Applications.pdf">Automatically Generating 60,000 CAD Variantsfor Big Data Applications.pdf</a></p>
<p><a href="https://towardsdatascience.com/suggestive-computer-aided-design-a9c7698c1cc9">https://towardsdatascience.com/suggestive-computer-aided-design-a9c7698c1cc9</a></p>
<p><a href="/downloads/Computer Aided Design as Language.pdf">Computer Aided Design as Language.pdf</a></p>
<p><a href="/downloads/Integrating Deep Learning into CAD:CAE System Generative Design and Evaluation of3D Conceptual Wheel.pdf">Integrating Deep Learning into CAD/CAE System Generative Design and Evaluation of3D Conceptual Wheel.pdf</a></p>
<p style="padding-left: 30px;">Computer-Aided Design (CAD) applications are used in manufacturing to model everything from coffee mugs to sports cars. These programs are complex and require years of training and experience to master. A component of all CAD models particularly difficult to make are the highly structured 2D sketches thatlie at the heart of every 3D construction. In this work, we propose a machine learning model capable of automatically generating such sketches. Through this, we pave the way for developing intelligent tools that would help engineers <span style="background-color: #ffff99;">create better designs with less effort</span>. Our method is a combination of a general-purpose language modeling technique alongside an off-the-shelf data serialization protocol. We show that our approach has enough flexibility to accommodate the complexity of the domain and performs well for both unconditional synthesis and image-to-sketch translation.</p>
<h4>SolidWorks</h4>
<p>SolidWorks Robot model import into CoppeliaSim</p>
<p><a href="https://www.youtube.com/watch?v=jfUA2W-niIc">https://www.youtube.com/watch?v=jfUA2W-niIc</a></p>
<h4>URDF:</h4>
<p style="padding-left: 30px;">Unified Robotic Description Format (<a href="https://github.com/ros/urdf">URDF</a>) is an XML file format used in ROS to describe all elements of a robot.</p>
<p style="padding-left: 30px;"><a href="http://wiki.ros.org/urdf/XML/model">http://wiki.ros.org/urdf/XML/model</a></p>
<p style="padding-left: 30px;">Intro to URDF: <a href="https://industrial-training-master.readthedocs.io/en/melodic/_source/session3/Intro-to-URDF.html">https://industrial-training-master.readthedocs.io/en/melodic/_source/session3/Intro-to-URDF.html</a></p>
<p style="padding-left: 30px;"><a href="http://wiki.ros.org/urdf/Tutorials/Building%20a%20Visual%20Robot%20Model%20with%20URDF%20from%20Scratch">Building a Visual Robot Model with URDF from Scratch</a></p>
<p style="padding-left: 30px;">Use Python to generate URDF: <a href="https://github.com/mdecourse/odio_urdf">https://github.com/mdecourse/odio_urdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/yanshil/Fusion2PyBullet">https://github.com/yanshil/Fusion2PyBullet</a> (Pybullet)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/urdf2webots">https://github.com/mdecourse/urdf2webots</a> (Webots)</p>
<p style="padding-left: 30px;"><a href="https://github.com/dfki-ric/phobos">https://github.com/dfki-ric/phobos</a> (Blender)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/0M2b1p6H20o" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/K4QWuTMxnsY" title="YouTube video player" width="560"></iframe></p>
<h4>simExtURDF:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/CoppeliaRobotics/simExtURDF">https://github.com/CoppeliaRobotics/simExtURDF</a></p><h3>Compile Solvespace</h3>
<p>Solvespace 可用來解決 ____ 問題?</p>
<p><a href="https://solvespace.com/forum.pl">https://solvespace.com/forum.pl</a> </p>
<p>能夠自行編譯 Solvespace 參數式 3D 零組件繪圖套件的意義何在?</p>
<p>了解 Solvespace 套件的<a href="https://solvespace.com/tech.pl">設計原理</a>, 對於機械產品開發有任何意義嗎?</p>
<h4 style="text-align: left;">Don’t confuse essence with tools. 到底在說什麼?</h4>
<p>電腦輔助設計的 <a href="https://www.merriam-webster.com/dictionary/essence">essence</a> 是 ____?</p>
<hr/>
<p><a href="https://link.springer.com/book/10.1007/978-3-319-73132-2">Guide to Scientific Computing in C++</a> (校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4471-5601-7">Concise Guide to Databases</a> (校園網路下載電子書)</p>
<p>由於利用 <a href="https://www.msys2.org/">MSYS2</a> 編譯 Solvespace, 需要 install cmake</p>
<p style="padding-left: 30px;">pacman -S mingw-w64-x86_64-cmake</p>
<p>而且必須 rename Y:\msys64_20210419\mingw64\bin\sh.exe 與 Y:\portablegit_2.31.1\bin\sh.exe 換成其他名稱.</p>
<p>git clone --recurse-submodules https://github.com/solvespace/solvespace.git<br/>cd solvespace<br/>mkdir build<br/>cd build<br/>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/>make<br/><br/>need libwinpthread-1.dll to execute solvespace.exe</p>
<hr/>
<p><a href="https://solvespace.com/forum.pl?action=viewthread&amp;parent=3775&amp;tt=1628359708">Solvespace can link STL part</a></p>
<p><a href="https://github.com/solvespace/solvespace/issues/77">About parametric sketches</a> (<a href="https://solvespace.com/forum.pl?action=viewthread&amp;parent=3169&amp;tt=1598104778">ref1</a>, <a href="https://solvespace.com/forum.pl?action=viewthread&amp;parent=3600&amp;tt=1617912893">ref2</a>, <a href="https://github.com/mdecourse/solvespace-w-var-dimension">Solvespace with variable dimension repo</a>)</p>
<p><a href="https://github.com/solvespace/solvespace/pull/493">About Python wrapper of the solver</a></p>
<p><a href="https://github.com/solvespace/solvespace/issues/292">About the .slvs file format</a> (We try to use Solvespace for auto assembly of multi-link mechanism. <a href="https://kmolyuan.github.io/pyslvs-slide-en/#/">ref</a>)</p><h3>Lua</h3>
<p><a href="/downloads/lua_programming/2016_LuaProgramming.pdf">2016_LuaProgramming.pdf</a></p>
<p><a href="https://www.lua.org/pil/contents.html">Programming in Lua first edition online material</a> (Lua 5.0)</p>
<p><a href="https://webserver2.tecgraf.puc-rio.br/lua/local/manual/5.1/">Lua 5.1 Reference Manual</a></p>
<p><a href="/downloads/lua_programming/Introduction_to_lua_programming_language.pdf">Introduction to Lua Programming Language.pdf</a></p>
<hr/>
<p>Lua 是用於 CoppeliaSim 機電系統控制的程式之一, 以下為利用 User Interface 介面控制場景中的各運動軸範例:</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function closeEventHandler(h)
    sim.addLog(sim.verbosity_scriptinfos,'Window '..h..' is closing...')
    simUI.hide(h)
end

function joint1_rotate(ui,id,newVal)
    simUI.setLabelText(ui,3000,'theta1 set to '..newVal)
    sim.setJointTargetPosition(joint1, newVal*deg)
end

function joint2_rotate(ui,id,newVal)
    simUI.setLabelText(ui,3000,'theta2 set to '..newVal)
    sim.setJointTargetPosition(joint2, newVal*deg)
end

function joint3_rotate(ui,id,newVal)
    simUI.setLabelText(ui,3000,'theta3 set to '..newVal)
    sim.setJointTargetPosition(joint3, newVal*deg)
end

function joint16_rotate(ui,id,newVal)
    simUI.setLabelText(ui,3000,'theta16 set to '..newVal)
    sim.setJointTargetPosition(joint16, newVal*deg)
    sim.setJointTargetPosition(joint20, -newVal*deg)
end

function sysCall_init()
    -- do some initialization here
    joint1 = sim.getObjectHandle('motor1')
    joint2 = sim.getObjectHandle('motor2')
    joint3 = sim.getObjectHandle('motor3')
    joint16 = sim.getObjectHandle('motor16')
    joint20 = sim.getObjectHandle('motor20')
    i = 0
    deg = math.pi/180
    print(i)
    xml = [[
&lt;ui closeable="true" on-close="closeEventHandler" resizable="true"&gt;
    &lt;label text="This is a demo of the CustomUI plugin. Browse through the tabs below to explore all the widgets that can be created with the plugin." wordwrap="true" /&gt;
    &lt;tabs&gt;
        &lt;tab title="Numeric"&gt;a
            &lt;label text="Sliders can be oriented horizontally or vertically, and have optional properties that can be set (in the XML) such as minimum and maximum value." wordwrap="true" /&gt;
            &lt;label text="" id="3000" wordwrap="true" /&gt;
            &lt;label text="theta1" /&gt; &lt;hslider tick-position="above" tick-interval="1" 
            minimum="0" maximum="360" on-change="joint1_rotate" /&gt;
            &lt;label text="theta2" /&gt; &lt;hslider tick-position="above" tick-interval="1" 
            minimum="-90" maximum="65" on-change="joint2_rotate" /&gt;
            &lt;label text="theta3" /&gt; &lt;hslider tick-position="above" tick-interval="1" 
            minimum="-90" maximum="185" on-change="joint3_rotate" /&gt;
            &lt;label text="theta16" /&gt; &lt;hslider tick-position="above" tick-interval="1" 
            minimum="0" maximum="15" on-change="joint16_rotate" /&gt;
        &lt;/tab&gt;
    &lt;/tabs&gt;
&lt;/ui&gt;
]]
    ui=simUI.create(xml)
end

function sysCall_actuation()
    -- put your actuation code here
end

function sysCall_sensing()
    -- put your sensing code here
end

function sysCall_cleanup()
    -- do some clean-up here
end

-- See the user manual or the available code snippets for additional callback functions and details
</pre>
<p></p><h3>CAD in Rust</h3>
<p><a href="https://drive.google.com/file/d/1SDLtjyddvFs9OHobMu7Ddx6Doa15RVMY/view?usp=sharing">rust_1.53.0_portable_for_msys2.7z</a> (下載 147MB , 解開壓縮後 1.13GB)</p>
<p>Rust Playground: <a href="https://play.rust-lang.org/">https://play.rust-lang.org/</a></p>
<p><a href="https://doc.rust-lang.org/stable/book/">https://doc.rust-lang.org/stable/book/</a></p>
<h4>Upenn Rust Programming:</h4>
<p style="padding-left: 30px;"><strong></strong><a href="https://www.cis.upenn.edu/~cis198/">https://www.cis.upenn.edu/~cis198/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/upenn-cis198">https://github.com/upenn-cis198</a></p>
<h4>Umd Organization of Programming Language:</h4>
<p style="padding-left: 30px;"><a href="https://www.cs.umd.edu/class/fall2020/cmsc330/">https://www.cs.umd.edu/class/fall2020/cmsc330/</a></p>
<p style="padding-left: 30px;"><a href="https://www.cs.umd.edu/class/fall2020/cmsc330/lectures/27-rust-introduct.pdf">https://www.cs.umd.edu/class/fall2020/cmsc330/lectures/27-rust-introduct.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.cs.umd.edu/class/fall2020/cmsc330/lectures/28-ownership.pdf">https://www.cs.umd.edu/class/fall2020/cmsc330/lectures/28-ownership.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.cs.umd.edu/class/fall2020/cmsc330/lectures/29-collections.pdf">https://www.cs.umd.edu/class/fall2020/cmsc330/lectures/29-collections.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.cs.umd.edu/class/fall2020/cmsc330/lectures/30-structs-enums.pdf">https://www.cs.umd.edu/class/fall2020/cmsc330/lectures/30-structs-enums.pdf</a></p>
<h4>Geometric Constraints Solver:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/constraints">https://github.com/mdecourse/constraints</a> (In Rust)</p>
<p style="padding-left: 30px;"><a href="https://adventures.michaelfbryan.com/posts/constraints-part-1-expressions/">https://adventures.michaelfbryan.com/posts/constraints-part-1-expressions/</a></p>
<h4>A Rust CAD system:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/arcs">https://github.com/mdecourse/arcs</a></p>
<p style="padding-left: 60px;"><a href="https://adventures.michaelfbryan.com/posts/ecs-outside-of-games/">https://adventures.michaelfbryan.com/posts/ecs-outside-of-games/</a></p>
<h4>Rust for Linux:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/Rust-for-Linux/linux">https://github.com/Rust-for-Linux/linux</a></p>
<h4>Planar Linkage in Rust:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/KmolYuan/four-bar-rs">https://github.com/KmolYuan/four-bar-rs</a></p>
<p style="padding-left: 60px;"><a href="https://kmolyuan.github.io/four-bar-rs/">https://kmolyuan.github.io/four-bar-rs/</a></p>
<h3>DSL</h3>
<h4>Domain-Specific Languages</h4>
<h4 style="padding-left: 30px;">Taichi:</h4>
<p style="padding-left: 60px;"><a href="https://taichi.graphics/">https://taichi.graphics/</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/taichi-dev/taichi">https://github.com/taichi-dev/taichi</a></p>
<p style="padding-left: 60px;"><a href="https://yuanming.taichi.graphics/publication/2020-taichi-tutorial/taichi-tutorial.pdf">Taichi Tutorial</a></p>
<p style="padding-left: 60px;"><a href="https://dl.acm.org/doi/pdf/10.1145/3355089.3356506">Taichi: A Language for High-Performance Computation on Spatially Sparse Data Structures</a></p>
<h4 style="padding-left: 30px;">Life of a Taichi Kernel:</h4>
<p><img caption="false" height="285" src="/images/life_of_taichi_kernel.png" width="560"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/wKw8LMF3Djo" title="YouTube video player" width="560"></iframe></p>
<h4 style="padding-left: 30px;">Featurescript</h4>
<p style="padding-left: 60px;"><a href="https://cad.onshape.com/FsDoc/">https://cad.onshape.com/FsDoc/</a> 能做什麼?</p>
<p style="padding-left: 60px;"><a href="http://cadlab.mde.tw/post/onshape-featurescript-cheng-shi-yu-yan.html">http://cadlab.mde.tw/post/onshape-featurescript-cheng-shi-yu-yan.html</a></p>
<p style="padding-left: 60px;"><a href="https://cadlab.mde.tw/post/tag/featurescript.html">https://cadlab.mde.tw/post/tag/featurescript.html</a> </p>
<p style="padding-left: 60px;"><a href="https://github.com/dcowden/featurescript">https://github.com/dcowden/featurescript</a></p>
<p style="padding-left: 60px;"><a href="https://www.onshape.com/en/features/custom-features">https://www.onshape.com/en/features/custom-features</a></p>
<h4 style="padding-left: 60px;">A Big CAD dataset for geometric deep learning:</h4>
<p style="padding-left: 90px;"><a href="https://deep-geometry.github.io/abc-dataset/">https://deep-geometry.github.io/abc-dataset/</a></p>
<p style="padding-left: 90px;"><a href="https://deep-geometry.github.io/abc-dataset/">https://deep-geometry.github.io/abc-dataset/</a></p>
<h3>Open CAD</h3>
<h4>CAD in Python:</h4>
<h4 style="padding-left: 30px;">純 Python 2D CAD:</h4>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/pyurcad">https://github.com/mdecourse/pyurcad</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/cad">https://github.com/mdecourse/cad</a> (PyQt5)</p>
<h4 style="padding-left: 30px;">3D:</h4>
<p style="padding-left: 60px;"><a href="https://sites.google.com/site/3dprogramminginpython/">https://sites.google.com/site/3dprogramminginpython/</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/codecad">https://github.com/mdecourse/codecad</a></p>
<h4>LeoCAD in C++ and Qt5:</h4>
<h4 style="padding-left: 30px;">編譯 LeoCAD:</h4>
<p style="padding-left: 60px;"><a href="https://www.leocad.org/docs/compiling.html">https://www.leocad.org/docs/compiling.html</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/leozide/leocad">原始碼: https://github.com/leozide/leocad</a></p>
<h4>Xeogl:</h4>
<p style="padding-left: 30px;"><a href="https://cx20.github.io/webgl-test/">https://cx20.github.io/webgl-test/</a></p>
<p style="padding-left: 30px;"><a href="http://xeogl.org/">http://xeogl.org/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/cx20/webgl-test">https://github.com/cx20/webgl-test</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/gPzBw1uG2Ms" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/aGWMKq5ZuYM" title="YouTube video player" width="560"></iframe></p>
<h3>Bevel Gears</h3>
<h4>參考:</h4>
<p style="padding-left: 30px;"><a href="https://hackaday.io/project/174370-minamil-a-minimal-cnc-mill-and-friends/log/185917-bevel-gears-twos-company">https://hackaday.io/project/174370-minamil-a-minimal-cnc-mill-and-friends/log/185917-bevel-gears-twos-company</a></p>
<h4>Featurescript (<a href="https://cad.onshape.com/documents/9b04fb889def400dfd4a693f/v/7e4070a95d663f4afeb156f3/e/786005a281331572a0efe88b">source</a>, <a href="https://forum.onshape.com/discussion/6031/bevel-gear-pair-generator">discussion</a>):</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">/*    
    Bevel Gear pair
    
    This custom feature creates a bevel gear pair.
    
    TODO:
     - use better tooth profile. See:
         https://cad.onshape.com/documents/5742c8cde4b06c68b362d748/v/c65839fc6078faeb4d2aece1/e/01a666571e625f8b819fd75b
*/

FeatureScript 531;
import(path : "onshape/std/geometry.fs", version : "531.0");


annotation { "Feature Type Name": "Bevel Gear Pair", "Filter Selector": ["bevel", "gear"]}
export const BevelGearPair = defineFeature(function(context is Context, id is Id, definition is map)
    precondition
    {
        annotation {"Name": "Number of teeth for gear 1"}
        isInteger(definition.Z1, TEETH_BOUNDS);
        
        annotation {"Name": "Number of teeth for gear 2"}
        isInteger(definition.Z2, TEETH_BOUNDS);

        annotation {"Name": "Module"}
        isReal(definition.m, MODULE_BOUNDS);

        annotation {"Name": "Shafts angle"}
        isAngle(definition.theta, SHAFT_ANGLE_BOUNDS);

        annotation {"Name": "Teeth width"}
        isLength(definition.e, TEETH_WIDTH_BOUNDS);
        
        annotation {"Name": "Height 1"}
        isLength(definition.h1, H1_BOUNDS);
        
        annotation {"Name": "Height 2"}
        isLength(definition.h2, H2_BOUNDS);
        
        annotation {"Name": "Pressure angle"}
        isAngle(definition.alpha, PRESSURE_ANGLE_BOUNDS);
    }
    
    {
        // lambdas
        // pitch apex to outside pitch distance for a bevel gears pair
        var pitchApex = function(r1, r2, theta) { return r2 * sin(theta) + (r2 * cos(theta) + r1) / tan(theta); };
        
        // cone distance (R) for a bevel gears pair
        var coneDistance = function(r1, r2, theta) { return sqrt(pitchApex(r1, r2, theta) ^ 2 + r1 ^ 2); };

        // common values for a gear pair
        const addendum = 1 * definition.m * millimeter;
        const dedendum = 1.25 * definition.m * millimeter;
        const r1 = definition.m * definition.Z1 / 2 * millimeter;  // external pitch radius
        const r2 = definition.m * definition.Z2 / 2 * millimeter;
        const delta1 = atan(sin(definition.theta) / (definition.Z2 / definition.Z1 + cos(definition.theta)));
        const delta2 = atan(sin(definition.theta) / (definition.Z1 / definition.Z2 + cos(definition.theta)));
        const scale_ = 1 - definition.e / coneDistance(r1, r2, definition.theta);  // scale factor for teeth generation

        // gear 1
        var value1 = {
            Z: definition.Z1,
            delta: delta1,
            scale: scale_,
            shift1: 0 * millimeter,
            shift2: 0 * millimeter,
            rot: 0 * degree,
            turn: 0
        };
        bevelGear(context, id + "1", definition, value1);

        // gear 2
        var turn_;
        if ((definition.Z2 % 2) != 0) {
            turn_ = 0;
        }
        else {
            turn_ = 1;
        }
        var value2 = {
            Z: definition.Z2,
            delta: delta2,
            scale: scale_,
            shift1: pitchApex(r1, r2, definition.theta) + dedendum * sin(delta1),
            shift2: pitchApex(r2, r1, definition.theta) + dedendum * sin(delta2),
            rot: definition.theta,
            turn: turn_
        };
        bevelGear(context, id + "2", definition, value2);

    }, {});


function bevelGear(context is Context, id is Id, definition is map, value is map)
{
    /*
    value = {
        Z,
        delta,
        scale,
        shift1,
        shift2,
        rot,
        turn
    }
    */

    // compute gear geometry
    const addendum = 1 * definition.m * millimeter;
    const dedendum = 1.25 * definition.m * millimeter;
    const r = definition.m * value.Z / 2 * millimeter;  // external pitch radius
    const ri = r - definition.e * sin(value.delta);     // internal pitch radius
    const h1 = dedendum * sin(value.delta) + definition.e * cos(value.delta) - dedendum * value.scale * sin(value.delta);
    const ra1 = r + addendum * cos(value.delta);
    const rf1 = r - dedendum * cos(value.delta);
    const ra2 = ri + addendum * cos(value.delta) * value.scale;
    const rf2 = ri - dedendum * cos(value.delta) * value.scale;
    const rf1p = rf1 - definition.h1 / tan(value.delta);
    const rf2p = rf2 - definition.h2 / tan(value.delta);
    //const rf2pp = rf2 - h1 / tan(value.delta);

    const plane1 = plane(vector(0, 0, 0) * millimeter, vector(0, -1, 0), vector(1, 0, 0));
    const sketch1 = newSketchOnPlane(context, id + "sketch1", {"sketchPlane": plane1});
    
    skPolyline(sketch1, "polyline1", {
        points : [
            vector(0 * millimeter, -definition.h1),
            vector(rf1p, -definition.h1),
            vector(rf1, 0 * millimeter),
            vector(rf2, h1),
            vector(rf2p, h1 - definition.h2),
            vector(0 * millimeter, h1 - definition.h2),
            vector(0 * millimeter, -definition.h1)
        ],
        constrained: true
    });

    skSolve(sketch1);

    // rotate extrude segments
    opRevolve(context, id + "revolve1", {
        "entities" : qSketchRegion(id + "sketch1"),
        "axis" : line(vector(0, 0, 0) * millimeter, vector(0, 0, 1)),
        "angleForward" : 360 * degree
    });

    // Remove sketch entities no longer required
    opDeleteBodies(context, id + "delete1", {"entities" : qCreatedBy(id + "sketch1")});

    // teeths generation
    const plane2 = plane(vector(0, 0, 0) * millimeter, vector(0, 0, 1), vector(1, 0, 0));
    const sketch2 = newSketchOnPlane(context, id + "sketch2", {"sketchPlane": plane2});

    // outer teeth profile
    skPolyline(sketch2, "polyline2", {
        points: gearTooth2D(r / cos(value.delta), definition.m, definition.alpha),
    });

    skSolve(sketch2);
    
    const plane3 = plane(vector(0 * millimeter, 0 * millimeter, definition.e), vector(0, 0, 1), vector(1, 0, 0));
    const sketch3 = newSketchOnPlane(context, id + "sketch3", {"sketchPlane": plane3});

    // inner teeth profile
    skPolyline(sketch3, "polyline3", {
        points: gearTooth2D(value.scale * r / cos(value.delta), value.scale * definition.m, definition.alpha),
    });

    skSolve(sketch3);

    // generate tooth body
    opLoft(context, id + "loft1", {
        "profileSubqueries": [
            qCreatedBy(id + "sketch2", EntityType.FACE),
            qCreatedBy(id + "sketch3", EntityType.FACE),
        ],
    });

    // Remove sketch entities no longer required
    opDeleteBodies(context, id + "delete2", {"entities" : qCreatedBy(id + "sketch2")});
    opDeleteBodies(context, id + "delete3", {"entities" : qCreatedBy(id + "sketch3")});

    // move tooth back in place
    const matrix1 = rotationMatrix3d(vector(1, 0, 0), value.delta);
    const transform1 = transform(matrix1, vector(0, 0, 0) * millimeter);
    const transform2 = transform(vector(0 * millimeter, r, dedendum * sin(value.delta)));
    opTransform(context, id + "transform1", {
            "bodies" : qCreatedBy(id + "loft1", EntityType.BODY),
            "transform": transform2 * transform1
    });

    // copy teeth all around
    var transforms = [];
    var names = [];
    for (var i = 1; i &lt; value.Z; i += 1) {
        const matrix = rotationMatrix3d(vector(0, 0, 1), i * 360 / value.Z * degree);
        transforms = append(transforms, transform(matrix, vector(0, 0, 0) * millimeter));
        names = append(names, toString(i));
    }
    opPattern(context, id + "pattern1", {
        "entities": qCreatedBy(id + "loft1", EntityType.BODY),
        "transforms": transforms,
        "instanceNames": names
    });

    // merge all parts
    opBoolean(context, id + "boolean1", {
        "tools" : qCreatedBy(id, EntityType.BODY),
        "operationType" : BooleanOperationType.UNION
    });

    // move gear in place
    const matrix2 = rotationMatrix3d(vector(0, 0, 1), value.turn * 360 / value.Z / 2 * degree);
    const transform3 = transform(matrix2, vector(0, 0, 0) * millimeter);
    const transform4 = transform(vector(0 * millimeter, 0 * millimeter, -value.shift2));
    const matrix3 = rotationMatrix3d(vector(1, 0, 0), value.rot);
    const transform5 = transform(matrix3, vector(0, 0, 0) * millimeter);
    const transform6 = transform(vector(0 * millimeter, 0 * millimeter, value.shift1));
    opTransform(context, id + "transform2", {
        "bodies" : qCreatedBy(id, EntityType.BODY),
        "transform": transform6 * transform5 * transform4 * transform3
    });
}


function gearTooth2D(r is ValueWithUnits, m is number, alpha is ValueWithUnits)
{
    // convert polar to cartesian coordinates
    var polar = function(r, theta) { return r * vector(sin(theta), cos(theta)); };

    // unwind a string this many degrees to go from radius r1 to radius r2
    var iang = function(r1, r2) { return sqrt((r2 / r1) ^ 2 - 1) / PI * 180 * degree - acos(r1 / r2); };

    // point at radius d on the involute curve
    var q6 = function(b, s, t, d) { return polar(d, s * (iang(b, d) + t)); };

    // radius a fraction f up the curved side of the tooth
    var q7 = function(f, r, b, r2, t, s) { return q6(b, s, t, (1 - f) * max(b, r) + f * r2); };

    const Z = 2 * r / (m * millimeter);                      // number of teeth
    const ra = r + 1 * m * millimeter;                       // radius of outer circle (tête)
    const rb = r * cos(alpha);                               // radius of base circle (base de la dent)
    const rf = r - 1.25 * m * millimeter;                    // radius of root circle (pied)
    const w = m * PI / 2 * millimeter;                       // tooth width at pitch circle
    const k = -iang(rb, r) - w / 2 / r / PI * 180 * degree;  // angle to where involute meets base circle on each side of tooth

    const offset = vector(0 * millimeter, -r);               // bring back tooth at origin

    var points;
    if (rf &lt; rb) {
        points = [
            polar(rf, k) + offset,
            q7(0/5, rf, rb, ra, k,  1) + offset, q7(1/5, rf, rb, ra, k,  1) + offset, q7(2/5, rf, rb, ra, k,  1) + offset,
            q7(3/5, rf, rb, ra, k,  1) + offset, q7(4/5, rf, rb, ra, k,  1) + offset, q7(5/5, rf, rb, ra, k,  1) + offset,
            q7(5/5, rf, rb, ra, k, -1) + offset, q7(4/5, rf, rb, ra, k, -1) + offset, q7(3/5, rf, rb, ra, k, -1) + offset,
            q7(2/5, rf, rb, ra, k, -1) + offset, q7(1/5, rf, rb, ra, k, -1) + offset, q7(0/5, rf, rb, ra, k, -1) + offset,
            polar(rf, -k) + offset,
            polar(rf, k) + offset  // close profile
        ];
    }
    else {
        points = [
            q7(0/5, rf, rb, ra, k,  1) + offset, q7(1/5, rf, rb, ra, k,  1) + offset, q7(2/5, rf, rb, ra, k,  1) + offset,
            q7(3/5, rf, rb, ra, k,  1) + offset, q7(4/5, rf, rb, ra, k,  1) + offset, q7(5/5, rf, rb, ra, k,  1) + offset,
            q7(5/5, rf, rb, ra, k, -1) + offset, q7(4/5, rf, rb, ra, k, -1) + offset, q7(3/5, rf, rb, ra, k, -1) + offset,
            q7(2/5, rf, rb, ra, k, -1) + offset, q7(1/5, rf, rb, ra, k, -1) + offset, q7(0/5, rf, rb, ra, k, -1) + offset,
            q7(0/5, rf, rb, ra, k,  1) + offset  // close profile
        ];
    }

    return points;
}


const TEETH_BOUNDS = {
    (unitless) : [4, 25, 250]
} as IntegerBoundSpec;


const SHAFT_ANGLE_BOUNDS = {
    (degree) : [5, 90, 175]
} as AngleBoundSpec;


const MODULE_BOUNDS = {
    (unitless) : [0.1, 1, 10]
} as RealBoundSpec;


const TEETH_WIDTH_BOUNDS = {
    (millimeter) : [0.1, 5, 100],
    (centimeter) : 0.5,
    (meter) : 0.005,
    (inch) : 0.2
} as LengthBoundSpec;


const H1_BOUNDS = {
    (millimeter) : [0.1, 1, 50],
    (centimeter) : 0.1,
    (meter) : 0.001,
    (inch) : 0.0375
} as LengthBoundSpec;


const H2_BOUNDS = {
    (millimeter) : [0.1, 0.5, 50],
    (centimeter) : 0.05,
    (meter) : 0.0005,
    (inch) : 0.0175
} as LengthBoundSpec;


const PRESSURE_ANGLE_BOUNDS = {
    (degree) : [14.999, 20, 25]
} as AngleBoundSpec;
</pre>
<h4>Bevel Gear2 (<a href="https://www.cctech.co.in/assets/files/blog/exploring-onshape-featurescript/Onshape-FeatureScript-for-Bevel-Gear.txt">source</a>, <a href="https://www.cctech.co.in/blog/exploring-onshape-featurescript">page</a>):</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">FeatureScript 961;
import(path : "onshape/std/geometry.fs", version : "961.0");

annotation { "Feature Type Name" : "Bevel Gear" }
export const myFeature = defineFeature(function(context is Context, id is Id, definition is map)
precondition
{
	// Define the parameters of the feature type

	annotation { "Name" : "Module" }
	isInteger(definition.module, POSITIVE_COUNT_BOUNDS);  
	
	annotation { "Name" : "Pressure Angle Input type" }
	definition.PressAngInputType is PressureAngleType;
	
	if(definition.PressAngInputType == PressureAngleType.standardPressAngle)
	{
		annotation { "Name" : "Pressure Angle (degrees)" }
		definition.stdPressAngle is stdPressAngles;
	}
	else
	{
		annotation { "Name" : "Custom Pressure Angle (degrees)"  }
		isAngle(definition.pressureAngle, ANGLE_360_BOUNDS); 
	}
	
	annotation { "Name" : "Number of Teeths in Gear" }
	isInteger(definition.gearTeeths, POSITIVE_COUNT_BOUNDS);
	
	annotation { "Name" : "Face Width" }
	isLength(definition.faceWidth, LENGTH_BOUNDS);        
	
	annotation { "Name" : "Root Fillet Radius" }
	isLength(definition.RootFilletRadius, LENGTH_BOUNDS);
	
	annotation { "Name" : "Gear Ratio" }
	isInteger(definition.gearRatio, POSITIVE_COUNT_BOUNDS);
	
	annotation { "Name" : "Hole Diameter" }
	isLength(definition.HoleDia, LENGTH_BOUNDS);   
	
	//End of Parameter def
}
{
	// Define the function's action
	//Calculations for gear nomenclatures

	var diameteralPitch = (25.4 / definition.module);        
	var gearPitchDia = (definition.gearTeeths / diameteralPitch) * meter;
	definition.pinionTeeths = round(definition.gearTeeths / definition.gearRatio);
	var pinionPitchDia = (definition.pinionTeeths / diameteralPitch) * meter;
	var theta = atan(gearPitchDia / pinionPitchDia);

	theta = ((theta * 180 / PI) / radian);
	var zOffset = (definition.faceWidth * cos((theta / 2) * degree));

	if(zOffset &gt; ((pinionPitchDia / 2) * 0.9))
	{
		throw regenError("Component failed to create - Face Width greater than cone distance");
	}
	
	if(zOffset &lt; ((pinionPitchDia / 2) * 0.2))
	{
		throw regenError("Component failed to create - Face Width less than minimum required value.");
	}
	
	var pitchDiameter = gearPitchDia + definition.faceWidth * sin(theta * 0.5 * degree);
	var planeOffset = 0 * meter;        
	// Recalculate diametral Pitch
	diameteralPitch = definition.gearTeeths / pitchDiameter * meter;
	
	var dedendum =  0;        
	dedendum = calculateDedendum(context, diameteralPitch) * meter;
	
	var rootDiameter = pitchDiameter - (2 * dedendum);

	var baseCircleDiameter = pitchDiameter * cos(definition.pressureAngle);

	var outsideDiameter = (definition.gearTeeths + 2) / diameteralPitch * meter;
	
	// Add base circle sketch;               
	var baseCircle1 = newSketch(context, id + "baseCircle1", {
			"sketchPlane" : qCreatedBy(makeId("Front"), EntityType.FACE)
	});
	
		skCircle(baseCircle1, "baseCircle1", {
			   "center" : vector(0, 0) * meter,
			   "radius" : 1 * (baseCircleDiameter / 2)
		});
	
	skSolve(baseCircle1);

	// End of base circle sketch
	
	// Calculate and define nomenclatures for offset Plane for Loft operation
	var pitchDiameter2 = gearPitchDia - (definition.faceWidth * sin(theta * degree) / 2);
	
	var diameteralPitch2 = definition.gearTeeths / pitchDiameter2 * meter;

	var dedendum2 = 0;
	dedendum2 = calculateDedendum(context, diameteralPitch2) * meter;
	if (dedendum2 == 0)
		throw regenError("failed to calculate value of dedndum");
	
	planeOffset = zOffset;
	
	//Creating Offset Plane
	opPlane(context, id + "plane1", {
			"plane" : plane(vector(0, (-1) *  zOffset / meter, 0) * meter, vector(0, -1, 0 )),
			"width" : 6 * inch,
			"height" : 6 * inch
	});
	
	var rootDiameter2 = pitchDiameter2 - (2 * dedendum2);

	var baseCircleDiameter2 = pitchDiameter2 * cos(definition.pressureAngle);

	var outsideDiameter2 = (definition.gearTeeths + 2) / diameteralPitch2 * meter;
	
	// Add base circle 2 sketch
	var baseCircle2 = newSketch(context, id + "baseCircle2", {
			"sketchPlane" : qCreatedBy((id + "plane1"), EntityType.FACE)
	});
	
	skCircle(baseCircle2, "baseCircle2", {
			"center" : vector(0, 0) * meter,
			"radius" : 1 * (baseCircleDiameter2 / 2)
	});  
		
	skSolve(baseCircle2);
	// End of base circle sketch
   
	// Create sketch entity for shaft.
	var shaftCircle = newSketch(context, id + "shaftCircle", {
			"sketchPlane" : qCreatedBy(makeId("Front"), EntityType.FACE)
	});

	skCircle(shaftCircle, "shaftCircle", {
			"center" : vector(0, 0) * meter,
			"radius" : 1 * (definition.HoleDia / 2)
	});
	
	skSolve(shaftCircle);
	// ### Executing Loft Operation ############################################################       
	opLoft(context, id + "loft1", {
			"profileSubqueries" : [ qCreatedBy(id + "baseCircle1", EntityType.FACE), qCreatedBy(id + "baseCircle2", EntityType.FACE) ],
	});
	// Begining Calculations for Involute points for gear teeth sketch.        
	var involutePoints1 = [];
	var involutePoints2 = [];
	var tempInvoluteSet = [];        

	var toothThicknessAngle = ((2 * PI) / (2 * definition.gearTeeths)) * 180 / PI;       
	var involutePointCount = 15;    
	var involuteIntersectionRadius = baseCircleDiameter / 2;
	var involuteSize = (outsideDiameter / 2) - (baseCircleDiameter / 2);
  
	planeOffset = 0 * meter;

	for (var t = 0; t &lt; involutePointCount; t += 1)
	{    
		involuteIntersectionRadius = (baseCircleDiameter / 2.0) + ((involuteSize / (involutePointCount - 1)) * t);
		var newPt = involutePoint(context, baseCircleDiameter / 2, involuteIntersectionRadius, planeOffset);
		tempInvoluteSet = append(tempInvoluteSet, newPt);
	}
	// Determine the angle between the X axis and a line between the origin of the curve and the intersection point between the involute and the pitch diameter circle.

	var pitchInvolutePt = involutePoint(context, baseCircleDiameter / 2, pitchDiameter / 2, planeOffset);
		
	var pitchPointAngle = atan(pitchInvolutePt[1] / pitchInvolutePt[0]) * 180 /(PI * radian);

	// Determine the angle defined by the tooth thickness as measured at the pitch diameter circle.

	//Angle to rotate the curve
	var rotateAngle = (-1) * (toothThicknessAngle / 2 + pitchPointAngle);
	// Rotate the involute so the intersection point lies on the x axis.
	var cosAngle = cos(rotateAngle * degree);
	var sinAngle = sin(rotateAngle * degree);

	for (var pt in tempInvoluteSet)
	{
		pt[0] = pt[0] * cosAngle - pt[1] * sinAngle;
		pt[1] = pt[0] * sinAngle + pt[1] * cosAngle;
		involutePoints1 = append(involutePoints1, vector( pt[0], pt[1] ) * meter);
		// Create a new set of points with a negated y.  This effectively mirrors the original points about the X axis. 
		var negatedPt = vector(pt[0], (-1) * pt[1] );
		involutePoints2 = append(involutePoints2, negatedPt * meter);
	}

	// Create sketch for Teeth Profile
	var Involute1 = newSketch(context, id + "Involute1", {
			"sketchPlane" : qCreatedBy(makeId("Front"), EntityType.FACE)
	});

	skFitSpline(Involute1, "spline1", {
			"points" : involutePoints1
	});
	
	skFitSpline(Involute1, "spline2", {
			"points" : involutePoints2
	});
	
	skArc(Involute1, "gearTop", {
			"start" : 1 * involutePoints1[involutePointCount - 1] ,
			"mid" : 1 * vector(outsideDiameter / 2, 0 * meter ),
			"end" : 1 * involutePoints2[involutePointCount - 1]
	});
			
   skArc(Involute1, "gearBase", {
			"start" : 1 * involutePoints1[0] ,
			"mid" : 1 * vector(baseCircleDiameter / 2, 0 * meter ),
			"end" : 1 * involutePoints2[0]
	});

	skSolve(Involute1);
	//##### Begining Calculations for Involute points for gear teeth sketch on offset Plane for loft operation. 
	var tempInvoluteSet2 = [];
	var involutePts1 = [];
	var involutePts2 = [];
	
	involuteIntersectionRadius = baseCircleDiameter2 / 2;
	involuteSize = (outsideDiameter2 / 2) - (baseCircleDiameter2 / 2);        
	planeOffset = zOffset;       

	for (var t = 0; t &lt; involutePointCount; t += 1)
	{    
		involuteIntersectionRadius = (baseCircleDiameter2 / 2.0) + ((involuteSize / (involutePointCount - 1)) * t);
		var newPt = involutePoint(context, baseCircleDiameter2 / 2, involuteIntersectionRadius, planeOffset);
		tempInvoluteSet2 = append(tempInvoluteSet2, newPt);
	}
	// Determine the angle between the X axis and a line between the origin of the curve and the intersection point between the involute and the pitch diameter circle.

	pitchInvolutePt = involutePoint(context, baseCircleDiameter2 / 2, pitchDiameter2 / 2, planeOffset);
	debug(context, pitchInvolutePt);
	pitchPointAngle = atan(pitchInvolutePt[1] / pitchInvolutePt[0]) * 180 /(PI * radian);

	// Determine the angle defined by the tooth thickness as measured at the pitch diameter circle.

	//Angle to rotate the curve
	rotateAngle = (-1) * (toothThicknessAngle / 2 + pitchPointAngle);//-backlashAngle
	// Rotate the involute so the intersection point lies on the x axis.
	cosAngle = cos(rotateAngle * degree);
	sinAngle = sin(rotateAngle * degree);

	for (var pt in tempInvoluteSet2)
	{
		pt[0] = pt[0] * cosAngle - pt[1] * sinAngle;
		pt[1] = pt[0] * sinAngle + pt[1] * cosAngle;
		involutePts1 = append(involutePts1, vector( pt[0], pt[1] ) * meter);
	// Create a new set of points with a negated y.  This effectively mirrors the original points about the X axis. 
		var negatedPt = vector(pt[0], (-1) * pt[1] );
		involutePts2 = append(involutePts2, negatedPt * meter);
	}
	// Create sketch for Teeth Profile for offset plane
	var Involute2 = newSketch(context, id + "Involute2", {
		"sketchPlane" : qCreatedBy((id + "plane1"), EntityType.FACE)
	});

	skFitSpline(Involute2, "spline1", {
			"points" : involutePts1
	});
	
	skFitSpline(Involute2, "spline2", {
			"points" : involutePts2
	});
	
	skArc(Involute2, "gearTop", {
			"start" : 1 * involutePts1[involutePointCount - 1] ,
			"mid" : 1 * vector(outsideDiameter2 / 2, 0 * meter ),
			"end" : 1 * involutePts2[involutePointCount - 1]
	});
			
	skArc(Involute2, "gearBase", {
			"start" : 1 * involutePts1[0] ,
			"mid" : 1 * vector(baseCircleDiameter2 / 2, 0 * meter ),
			"end" : 1 * involutePts2[0]
	});

	skSolve(Involute2);

	// Loft Operation for Teeth Profile
	opLoft(context, id + "loft2", {
			"profileSubqueries" : [ qCreatedBy(id + "Involute1", EntityType.FACE), qCreatedBy(id + "Involute2", EntityType.FACE) ],
	});
	
	opFitSpline(context, id + "Axis", {
			"points" : [vector( 0,  0,  0) * inch, vector(0,  -1, 0) * inch] });
	const axis = qCreatedBy(id + "Axis", EntityType.EDGE);

	// Circular patteren operation for creating all the terth profile bodies around base.
	circularPattern(context, id + "gearTeeths", {
			"patternType" : PatternType.PART,
			"entities" : qCreatedBy(id + "loft2", EntityType.BODY),
			"axis" : axis,
			"angle" : 360 * degree,
			"instanceCount" : definition.gearTeeths,
			"equalSpace" : true
	});
	
});

//Function to calculate dedendum value.
export function calculateDedendum(context, diametralPitch)returns number
{
	if(diametralPitch  &lt; ((20 * (PI / 180)) - 0.000001))
	{
		return (1.157 / diametralPitch);
	}
	else
	{
		var circularPitch = PI / diametralPitch;
		if(circularPitch &gt;= 20)
		{
			return (1.25 / diametralPitch);
		}
		else
		{
			return (1.2 / diametralPitch);
		}
	}
}

const PRESSURE_ANGLE_BOUNDS =
{
	(degree) : [14.5, 20, 25]
} as AngleBoundSpec;

export enum stdPressAngles
{
	annotation { "NAME" : "14.5 degree" }
	PressAngle_14_5 ,
	annotation { "NAME" : "20 degree" }
	PressAngle_20,
	annotation { "NAME" : "25 degree" }
	PressAngle_25
}

export enum PressureAngleType
{
	annotation { "Name" : "Standard Pressure Angle(Recomended)" }
	standardPressAngle,
	annotation { "Name" : "Custom Pressure Angle" }
	customPressAngle
}

// Function to calculate Involute Point coordinates / vectors
export function involutePoint(context, baseCircleRadius, involuteIntersectionRadius, planeOffset)returns Vector
{
	var l = sqrt(involuteIntersectionRadius ^ 2 - baseCircleRadius ^ 2 );

	var alpha = (l / baseCircleRadius);
	alpha = alpha * 180 / PI;

	var thta = alpha - (180 / PI) * (acos(baseCircleRadius / involuteIntersectionRadius)) / radian;

	var x = involuteIntersectionRadius * cos(thta * degree) / meter;
	var y = involuteIntersectionRadius * sin(thta * degree) / meter;

	return vector(x,y);
}</pre>
<h3>Control</h3>
<h4>Modeling and Control systems design</h4>
<h4>Modeling:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-84882-882-7">Bond Graph Methodology</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="/downloads/2020_FoundationsOfMulti-ParadigmMod.pdf">2020_Foundations Of Multi-Paradigm Modelling for Cyber-Physical systems.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/BondGraphTools">https://github.com/mdecourse/BondGraphTools</a></p>
<h4>Automatic Control:</h4>
<p style="padding-left: 30px;"><a href="http://controlbook.byu.edu/lib/exe/fetch.php?media=controlbook.pdf">Introduction to Feedback control.pdf</a> (<a href="http://controlbook.byu.edu/doku.php">source</a>, <a href="http://controlbook.byu.edu/lib/exe/fetch.php?media=hummingbird_manual.pdf">lab</a>)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-75804-6">Automatic Control with Experiments</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="/downloads/2010_GRADIENT-BASED REINFORCEMENT LEARNING TECHNIQUES FOR UNDERWATER ROBOTICS BEHAVIOR LEARNING.pdf">2010_GRADIENT-BASED REINFORCEMENT LEARNING TECHNIQUES FOR UNDERWATER ROBOTICS BEHAVIOR LEARNING.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2015_Backstepping Controllers for a Cart-Pole System in Two Configurations.pdf">2015_Backstepping Controllers for a Cart-Pole System in Two Configurations.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://towardsdatascience.com/comparing-optimal-control-and-reinforcement-learning-using-the-cart-pole-swing-up-openai-gym-772636bc48f4">https://towardsdatascience.com/comparing-optimal-control-and-reinforcement-learning-using-the-cart-pole-swing-up-openai-gym-772636bc48f4</a></p>
<p style="padding-left: 30px;">2016_MODELING, SIMULATION AND REAL-TIME CONTROL OF UNDERACTUATED SYSTEMS- A CART-PENDULUM EXAMPLE.pdf</p>
<p style="padding-left: 30px;"><a href="/downloads/2021_irtual Reinforcement Learning for Balancing an Inverted Pendulum in Real Time.pdf">2021_irtual Reinforcement Learning for Balancing an Inverted Pendulum in Real Time.pdf</a></p><h3>AI and CAD</h3>
<h4>Reinforcement Learning (強化學習):</h4>
<p style="padding-left: 30px;"><a href="https://www.davidsilver.uk/teaching/">https://www.davidsilver.uk/teaching/</a></p>
<p style="padding-left: 30px;"><a href="https://neptune.ai/blog/reinforcement-learning-applications">https://neptune.ai/blog/reinforcement-learning-applications</a></p>
<h4 style="padding-left: 60px;">強化學習的實務應用:</h4>
<p style="padding-left: 90px;">自駕車, <span style="background-color: #ffff99;">工業自動化</span> (高效節能), 金融貿易 (前景預測), 自然語言處理 (翻譯, 會議摘要, 自動答詢), 醫療保健 (自動診斷), <span style="background-color: #ffff99;">工程應用</span> (最佳化設計與製造), <span style="background-color: #ffff99;">機電設備自動控制</span>.</p>
<p style="padding-left: 30px;"><a href="https://wiki.pathmind.com/deep-reinforcement-learning">https://wiki.pathmind.com/deep-reinforcement-learning</a></p>
<h4 style="padding-left: 60px;">深度強化學習應用領域:</h4>
<p style="padding-left: 90px;"><span style="background-color: #ffff99;">Robotics</span>, Industrial Operations, Supply Chain &amp; Logistics, Traffic Control, Bidding &amp; Advertising, Recommender Systems, Load Balancing, Augmented NLP.</p>
<p style="padding-left: 30px;"><a href="https://www.amazon.science/latest-news/3-ways-reinforcement-learning-is-changing-the-world-around-you">https://www.amazon.science/latest-news/3-ways-reinforcement-learning-is-changing-the-world-around-you</a></p>
<h4 style="padding-left: 60px;">強化學習帶來的三大變革:</h4>
<p style="padding-left: 90px;">新聞推介系統, 高效能源配置, <span style="background-color: #ffff99;">機器人領域</span>.</p>
<p style="padding-left: 30px;"><a href="/downloads/Optimize Robots Physical Design byParameterization in Deep Reinforcement Learning.pdf">Optimize Robots Physical Design byParameterization in Deep Reinforcement Learning.pdf</a></p>
<p style="padding-left: 60px;">When designing robots, it is a common practice to <span style="background-color: #ccffcc;">decide some mechanical pa-</span><br/><span style="background-color: #ccffcc;">rameters prior to carrying out any detailed design</span>. However, it is often difficult to<br/>find the optimal values for those parameters. In most of reinforcement learning<br/>tasks, the agent is learning a control policy in a fixed environment. This project<br/>aims to enable the agent to modify some environment parameters related to its<br/>physical configuration, i.e. <span style="background-color: #ccffcc;">the agent is able to evolve to a better version that is</span><br/><span style="background-color: #ccffcc;">more suitable for a certain task</span>. We proposed methods to argument the reward<br/>function to influence the direction of evolution according to our preference. We<br/>discovered how the joint learning of policy and optimal physical configuration will<br/>impact the learning efficiency. We also found some interesting relationship between<br/>the learning of control policy and the evolution of the physical configuration.</p>
<h4>Q Learning:</h4>
<p style="padding-left: 30px;"><a href="https://cedar.buffalo.edu/~srihari/CSE574/Chap15/15.3-Q-Learning.pdf">https://cedar.buffalo.edu/~srihari/CSE574/Chap15/15.3-Q-Learning.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/pyladies-taiwan/reinforcement-learning-%E9%80%B2%E9%9A%8E%E7%AF%87-deep-q-learning-26b10935a745">https://medium.com/pyladies-taiwan/reinforcement-learning-%E9%80%B2%E9%9A%8E%E7%AF%87-deep-q-learning-26b10935a745</a></p>
<h4>Artificial Intelligence:</h4>
<p style="padding-left: 30px;"><a href="https://www.goodfirms.co/blog/importance-artificial-intelligence-computer-aided-design">https://www.goodfirms.co/blog/importance-artificial-intelligence-computer-aided-design</a></p>
<h4 style="padding-left: 60px;">AI 在電腦輔助設計領域的重要性:</h4>
<p style="padding-left: 90px;">Traditional CAD software solutions are <span style="background-color: #ccffcc;">parametric</span>, which <span style="background-color: #ccffcc;">demands extensive planning</span>. This process is time-consuming as a single property can change the whole design, and eventually, it can slow down the work-flow.<br/><br/>CAD today covers several engineering functions ranging from simple drawings to 3D models. With the incorporation of AI, the process of designing becomes a bit easier with AI taking the lead to <span style="background-color: #ccffcc;">integrate the manufacturing aspects or the engineering aspects</span>, <span style="background-color: #ccffcc;">predict and perform the tasks with its own intelligence</span>. This suits all types of design, whether it is a new design, or an innovative design, or a routine design.</p>
<p style="padding-left: 90px;">AI is capable of storing knowledge, and this knowledge-based information, when incorporated with CAD/CAM procedure, <span style="background-color: #ccffcc;">automates several functions</span>.<br/><br/>The AI algorithm can itself <span style="background-color: #ccffcc;">make the required changes in the design</span> without the intervention of the humans.<br/><br/>The testing and simulations process can be completed with the help AI, which majorly <span style="background-color: #ccffcc;">cuts down the design time</span>.<br/><br/>The implementation of CAD with AI technology is capable of <span style="background-color: #ccffcc;">delivering ergonomic engineering</span>.</p>
<p style="padding-left: 30px;"><a href="https://www.digitalengineering247.com/article/deep-learning-meets-3d-modeling/engineering-resource-center">https://www.digitalengineering247.com/article/deep-learning-meets-3d-modeling/engineering-resource-center</a></p>
<p style="padding-left: 60px;">The application of machine learning, also known as deep learning, to computer-aided design (CAD) is gradually becoming commonplace.  Almost all mainstream CAD programs—Autodesk Fusion and SOLIDWORKS, to name but two—include some form of generative design (衍生式設計) or topology optimization (拓撲最佳化) tools. This allows the software to employ AI-like algorithms to <span style="background-color: #ccffcc;">identify the best shapes</span> for the designer’s stated purpose, whether to <span style="background-color: #ccffcc;">reduce weight</span> or to <span style="background-color: #ccffcc;">counterbalance the anticipated stress</span> (usually it’s a combination of both). 即達成少負擔 (less burden), 多建樹 (more achievements) 的設計目標.</p>
<p><a href="https://www.autodesk.com/autodesk-university/content/future-design-powered-ai-mike-haley-2019">https://www.autodesk.com/autodesk-university/content/future-design-powered-ai-mike-haley-2019</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/NSJwq9CVoIk" title="YouTube video player" width="560"></iframe></p>
<h4>電腦輔助設計練習題:</h4>
<p style="padding-left: 30px;">在<a href="http://mde.tw/cp2021/content/Python.html">網際 Python 程式環境</a>中, 以下程式採用直覺邏輯執行<a href="https://zh.wikipedia.org/wiki/%E8%B4%AA%E9%A3%9F%E8%9B%87">貪食蛇遊戲</a>, 從已知經驗最高紀錄得分為 45 分, 請問: 可以採用人工執行或機器學習方法, 找出在此一遊戲環境中所能取得的最高極限得分嗎?</p>
<p style="padding-left: 30px;">可以結合 <a href="https://brython.info/">Brython</a> 當前端, 透過 AJAX 與後端 <a href="https://towardsdatascience.com/how-to-easily-deploy-machine-learning-models-using-flask-b95af8fe34d4">Flask</a> (<a href="https://www.lpalmieri.com/posts/2019-12-01-taking-ml-to-production-with-rust-a-25x-speedup/">Python</a>) + Rust 執行此一貪食蛇強化學習訓練嗎?</p>
<h4 style="padding-left: 30px;">參考資料:</h4>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/Snake-Reinforcement-Learning">https://github.com/mdecourse/Snake-Reinforcement-Learning</a></p>
<p style="padding-left: 90px;"><a href="https://www.programmersought.com/article/71723429072/">Q-Learning Algorithm</a> </p>
<p style="padding-left: 90px;"><a href="/downloads/Q-Learning/Path_finding_q_learning.py">Path_finding_q_learning.py</a></p>
<p style="padding-left: 60px;"><a href="/downloads/Autonomous-Agents-in-Snake-Game-via-Deep-Reinforcement-Learning.pdf">Autonomous Agents in Snake Game via Deep Reinforcement Learning.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://courses.grainger.illinois.edu/cs440/fa2020/MPs/mp7/assignment7.html">https://courses.grainger.illinois.edu/cs440/fa2020/MPs/mp7/assignment7.html</a></p>
<p style="padding-left: 60px;"><a href="/downloads/2016_Exploration%20of Reinforcement Learning to SNAKE.pdf">2016_<span dir="ltr" role="presentation">Exploration of Reinforcement Learning to SNAKE</span>.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/Train a snake with reinforcement learning algorithms.pdf">Train a snake with reinforcement learning algorithms.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/python-engineer/snake-ai-pytorch">https://github.com/python-engineer/snake-ai-pytorch</a></p>
<p style="padding-left: 60px;"><a href="/downloads/deep Reinforcement Learning for Snake.pdf">Deep Reinforcement Learning for Snake.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/2019_Implementation of artificial intelligence in Snake game using genetic algorithm and neural networks.pdf">2019_Implementation of artificial intelligence in Snake game using genetic algorithm and neural networks.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/2020_Battlesnake Challenge- A Multi-agent Reinforcement Learning Playground with Human-in-the-loop.pdf">2020_Battlesnake Challenge- A Multi-agent Reinforcement Learning Playground with Human-in-the-loop.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://davideliu.com/2020/01/24/teaching-ai-to-play-snake-with-reinforcement-learning/">https://davideliu.com/2020/01/24/teaching-ai-to-play-snake-with-reinforcement-learning/</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/Snake-Battle-Royale">https://github.com/mdecourse/Snake-Battle-Royale</a></p>
<p style="padding-left: 60px;"><a href="https://towardsdatascience.com/snake-played-by-a-deep-reinforcement-learning-agent-53f2c4331d36">https://towardsdatascience.com/snake-played-by-a-deep-reinforcement-learning-agent-53f2c4331d36</a></p>
<p style="padding-left: 60px;"><a href="https://towardsdatascience.com/how-to-teach-an-ai-to-play-games-deep-reinforcement-learning-28f9b920440a">https://towardsdatascience.com/how-to-teach-an-ai-to-play-games-deep-reinforcement-learning-28f9b920440a</a></p>
<p style="padding-left: 60px;"><a href="https://www3.hs-albsig.de/wordpress/point2pointmotion/2020/10/09/deep-reinforcement-learning-with-the-snake-game/">https://www3.hs-albsig.de/wordpress/point2pointmotion/2020/10/09/deep-reinforcement-learning-with-the-snake-game/</a></p>
<p style="padding-left: 60px;"><a href="https://medium.com/@hugo.sjoberg88/using-reinforcement-learning-and-q-learning-to-play-snake-28423dd49e9b">https://medium.com/@hugo.sjoberg88/using-reinforcement-learning-and-q-learning-to-play-snake-28423dd49e9b</a></p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=PJl4iabBEz0">https://www.youtube.com/watch?v=PJl4iabBEz0</a> (part1)</p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=5Vy5Dxu7vDs">https://www.youtube.com/watch?v=5Vy5Dxu7vDs</a> (part2)</p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=6pJBPPrDO40">https://www.youtube.com/watch?v=6pJBPPrDO40</a> (part3)</p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=VGkcmBaeAGM">https://www.youtube.com/watch?v=VGkcmBaeAGM</a> (part4)</p>
<p style="padding-left: 60px;"><a href="https://www.youtube.com/watch?v=yp826Ybh4rU">https://www.youtube.com/watch?v=yp826Ybh4rU</a></p>
<h4 style="padding-left: 60px;">In Rust:</h4>
<p style="padding-left: 90px;"><a href="https://github.com/SLMT/rust-snake">https://github.com/SLMT/rust-snake</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/prajwaldp/rust-snake-game">https://github.com/prajwaldp/rust-snake-game</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/RodionChachura/rust-js-snake-game">https://github.com/RodionChachura/rust-js-snake-game</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/leocavalcante/rust-snake">https://github.com/leocavalcante/rust-snake</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/tensor-programming/snake-tutorial">https://github.com/tensor-programming/snake-tutorial</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/AlexRiosJ/rust_snake">https://github.com/AlexRiosJ/rust_snake</a></p>
<p><img caption="false" height="438" src="/images/brython_snake_eater_high_score_45.png" width="400"/></p>
<h4><a href="https://brython.info/">Brython</a> snake eater game:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 從 browser 導入 document 並設為 doc
from browser import document as doc
# 使用者可以透過 window 當作介面使用其他 Javascript 功能
from browser import html, window
# 用於定時執行特定函式
import browser.timer
# 導入數學模組
import math
# 導入亂數模組
from random import random, randint
 
def update_score(new_score):
    global high_score
    score_doc.innerHTML = "Score: " + str(new_score)
    if new_score &gt; high_score:
        high_score_doc.innerHTML = "High Score: " + str(new_score)
        high_score = new_score
        
def eat(px, py, ax, ay):
    global xv, yv, pre_pause, paused
    # (px, py) go to (ax, ay) through incremented xv, yv
    if ax != px or ay != py:
        if ax &gt; px and not paused:
            xv = 1
            yv = 0
        if ax &lt; px and not paused:
            xv = -1
            yv = 0
        if ay &gt; py and not paused:
            xv = 0
            yv = 1
        if ay &lt; py and not paused:
            xv = 0
            yv = -1

def game():
    global px, py, tc, gs, ax, ay, trail, tail, score
    # px 為 snake 第一個點的 x 座標, 增量值為 xv
    px += xv
    py += yv
    # 允許穿越四面牆, 以 tc 表示牆面座標極限
    # 若 px 為負值則設定為 tc -1, 表示 tc 為 x 方向 limit
    # x 座標方向的穿牆設定
    if px &lt; 0:
        px = tc-1
    if px &gt; tc-1:
        px = 0
    # y 座標方向的穿牆設定
    if py &lt; 0:
        py = tc-1
    if py &gt; tc-1:
        py = 0
    ctx.fillStyle = "black"
    # 畫布填入黑色
    ctx.fillRect(0, 0, canvas.width, canvas.height)
    # snake 為 lime 色
    ctx.fillStyle = "lime"
    # trail 為數列, 代表 snake 各節 [x,y] 座標
    # trail = [[x0,y0], [x1, y1], [x2, y2]...]
    # gs 為方塊邊長 pixel 數
    for i in range(len(trail)):
        # https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes
        # fillRect(x, y, width, height)
        ctx.fillRect(trail[i][0]*gs, trail[i][1]*gs, gs-2, gs-2)
        # 若 snake 第一節座標 (px, py)  穿過身體任一節, 則 score 歸零
        if trail[i][0] == px and trail[i][1] == py:
            score = score if paused else 0
            # snake reset 為五節
            tail = 5
    # trail 數列以碰到的 [px, py] 座標數列插入作為第一節
    trail.insert(0, [px, py])
    while len(trail) &gt; tail:
        # pop() 內建移除數列最後一個 element
        trail.pop()
    # ax, ay 為紅點座標
    # 當 snake 第一節座標[px, py] 與紅色食物座標 [ax, ay] 重合
    # 則 tail 增量, 即多一節且得分加 1, 然後食物座標 [ax, ay] 重新以亂數定位
    if ax == px and ay == py:
        tail += 1
        ax = math.floor(random()*tc)
        ay = math.floor(random()*tc)
        score += 1
    # [ax, ay] is known here
    # [px, py] is where the head of the snake
    # xv needed to be incremented from px to ax first
    # and yv needed to be incremented from py to ay
    eat(px, py, ax, ay)
    # 更新計分顯示
    update_score(score)
    ctx.fillStyle = "red"
    ctx.fillRect(ax*gs, ay*gs, gs-2, gs-2)
   
def key_push(evt):
    global xv, yv, pre_pause, paused
    key = evt.keyCode
    # 37 is left arrow key
    # 74 is j key
    if key == 74 and not paused:
        xv = -1
        yv = 0
    # 38 is up arrow key
    # 73 is i key
    elif key == 73 and not paused:
        xv = 0
        yv = -1
    # 39 is right arrow key
    # 76 is l key
    elif key == 76 and not paused:
        xv = 1
        yv = 0
    # 40 is down arrow key
    # 77 is m key
    elif key == 77 and not paused:
        xv = 0
        yv = 1
    # 32 is pause key
    # 80 is p key
    elif key == 80:
        temp = [xv, yv]
        xv = pre_pause[0]
        yv = pre_pause[1]
        pre_pause = [*temp]
        paused = not paused
   
def show_instructions(evt):
        window.alert("keys to control: i=up, m=down, j=left, l=right, p=pause")
       
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 600, height = 600)
canvas.id = "game-board"
brython_div = doc["brython_div"]
brython_div &lt;= canvas
   
score_doc = html.DIV("score")
score_doc.id = "score"
brython_div &lt;= score_doc
   
high_score_doc = html.DIV("high-score")
high_score_doc.id = "high-score"
brython_div &lt;= high_score_doc
   
button = html.BUTTON("Keys to control")
button.id = "instructions-btn"
brython_div &lt;= button
   
score = 0
high_score = 0
   
px = py = 10
# gs*tc = canvas width and height
gs = 20
tc = 30
ax = ay = 15
xv = yv = 0
trail = []
tail = 5
   
pre_pause = [0,0]
paused = False
ctx = canvas.getContext("2d")
doc.addEventListener("keydown", key_push)
instructions_btn = doc["instructions-btn"]
instructions_btn.addEventListener("click", show_instructions)
browser.timer.set_interval(game, 1000/15)</pre>
<p></p>
<!-- 導入 brython -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p></p>
<!-- 啟動 brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<!-- brython webgl div -->
<div id="brython_div"></div>
<p></p>
<!-- 執行貪食蛇遊戲 -->
<p>
<script type="text/python3">
# 從 browser 導入 document 並設為 doc
from browser import document as doc
# 使用者可以透過 window 當作介面使用其他 Javascript 功能
from browser import html, window
# 用於定時執行特定函式
import browser.timer
# 導入數學模組
import math
# 導入亂數模組
from random import random, randint
 
def update_score(new_score):
    global high_score
    score_doc.innerHTML = "Score: " + str(new_score)
    if new_score > high_score:
        high_score_doc.innerHTML = "High Score: " + str(new_score)
        high_score = new_score
        
def eat(px, py, ax, ay):
    global xv, yv, pre_pause, paused
    # (px, py) go to (ax, ay) through incremented xv, yv
    if ax != px or ay != py:
        if ax > px and not paused:
            xv = 1
            yv = 0
        if ax < px and not paused:
            xv = -1
            yv = 0
        if ay > py and not paused:
            xv = 0
            yv = 1
        if ay < py and not paused:
            xv = 0
            yv = -1
            
def game():
    global px, py, tc, gs, ax, ay, trail, tail, score
    # px 為 snake 第一個點的 x 座標, 增量值為 xv
    px += xv
    py += yv
    # 允許穿越四面牆, 以 tc 表示牆面座標極限
    # 若 px 為負值則設定為 tc -1, 表示 tc 為 x 方向 limit
    # x 座標方向的穿牆設定
    if px < 0:
        px = tc-1
    if px > tc-1:
        px = 0
    # y 座標方向的穿牆設定
    if py < 0:
        py = tc-1
    if py > tc-1:
        py = 0
    ctx.fillStyle = "black"
    # 畫布填入黑色
    ctx.fillRect(0, 0, canvas.width, canvas.height)
    # snake 為 lime 色
    ctx.fillStyle = "lime"
    # trail 為數列, 代表 snake 各節 [x,y] 座標
    # trail = [[x0,y0], [x1, y1], [x2, y2]...]
    # gs 為方塊邊長 pixel 數
    for i in range(len(trail)):
        # https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes
        # fillRect(x, y, width, height)
        ctx.fillRect(trail[i][0]*gs, trail[i][1]*gs, gs-2, gs-2)
        # 若 snake 第一節座標 (px, py)  穿過身體任一節, 則 score 歸零
        if trail[i][0] == px and trail[i][1] == py:
            score = score if paused else 0
            # snake reset 為五節
            tail = 5
    # trail 數列以碰到的 [px, py] 座標數列插入作為第一節
    trail.insert(0, [px, py])
    while len(trail) > tail:
        # pop() 內建移除數列最後一個 element
        trail.pop()
    # ax, ay 為紅點座標
    # 當 snake 第一節座標[px, py] 與紅色食物座標 [ax, ay] 重合
    # 則 tail 增量, 即多一節且得分加 1, 然後食物座標 [ax, ay] 重新以亂數定位
    if ax == px and ay == py:
        tail += 1
        ax = math.floor(random()*tc)
        ay = math.floor(random()*tc)
        score += 1
    # [ax, ay] is known here
    # [px, py] is where the head of the snake
    # xv needed to be incremented from px to ax first
    # and yv needed to be incremented from py to ay
    eat(px, py, ax, ay)
    # 更新計分顯示
    update_score(score)
    ctx.fillStyle = "red"
    ctx.fillRect(ax*gs, ay*gs, gs-2, gs-2)
   
def key_push(evt):
    global xv, yv, pre_pause, paused
    key = evt.keyCode
    # 37 is left arrow key
    # 74 is j key
    if key == 74 and not paused:
        xv = -1
        yv = 0
    # 38 is up arrow key
    # 73 is i key
    elif key == 73 and not paused:
        xv = 0
        yv = -1
    # 39 is right arrow key
    # 76 is l key
    elif key == 76 and not paused:
        xv = 1
        yv = 0
    # 40 is down arrow key
    # 77 is m key
    elif key == 77 and not paused:
        xv = 0
        yv = 1
    # 32 is pause key
    # 80 is p key
    elif key == 80:
        temp = [xv, yv]
        xv = pre_pause[0]
        yv = pre_pause[1]
        pre_pause = [*temp]
        paused = not paused
   
def show_instructions(evt):
        window.alert("keys to control: i=up, m=down, j=left, l=right, p=pause")
       
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 600, height = 600)
canvas.id = "game-board"
brython_div = doc["brython_div"]
brython_div <= canvas
   
score_doc = html.DIV("score")
score_doc.id = "score"
brython_div <= score_doc
   
high_score_doc = html.DIV("high-score")
high_score_doc.id = "high-score"
brython_div <= high_score_doc
   
button = html.BUTTON("Keys to control")
button.id = "instructions-btn"
brython_div <= button
   
score = 0
high_score = 0
   
px = py = 10
# gs*tc = canvas width and height
gs = 20
tc = 30
ax = ay = 15
xv = yv = 0
trail = []
tail = 5
   
pre_pause = [0,0]
paused = False
ctx = canvas.getContext("2d")
doc.addEventListener("keydown", key_push)
instructions_btn = doc["instructions-btn"]
instructions_btn.addEventListener("click", show_instructions)
browser.timer.set_interval(game, 1000/15)
</script>
</p>
<h2>SSO</h2>
<p><a href="https://en.wikipedia.org/wiki/Single_sign-on">https://en.wikipedia.org/wiki/Single_sign-on</a></p>
<h4>Oauth2</h4>
<h4>本頁面相關內容的討論, 最終催生出:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/fossiloauth">https://github.com/mdecourse/fossiloauth</a></p>
<p>Flask 與 Fossil SCM  在同一台主機, 可以透過 Oauth2 登入後, 由 Python 程式導引 redirect 登入 Fossil SCM 主機. 其中可以讓 Python 讀取使用者在 Fossil SCM 倉儲中當下所設定的帳號密碼後登入.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
from flask import make_response, request, redirect
import requests

app = Flask(__name__)
app.config['SECRET_KEY'] = 'SUPER SECRET'

@app.route('/')
def hello_world():
    with requests.Session() as s:
        url = 'https://fossil.kmol.info/u/yen/login'
        post_var = {'u': 'username', 'p': 'password'}
        headers = {'X-Requested-With': 'XMLHttpRequest'}
        result = s.post(url, data = post_var, headers = headers)
        cookie = s.cookies.get_dict()
        key = list(cookie.keys())[0]
        value = cookie[key]
        '''
        print(key, value)
        resp = redirect(url)
        resp.set_cookie(key, value)
        return resp
        '''
        response = make_response(redirect(url))
        response.set_cookie(key, value)
        return response
        

if __name__ == '__main__':
    app.run()</pre>
<p>接下來的考量是, 能否不讓使用者直接從 Fossil SCM web 介面中登入?</p>
<h3>Fossil</h3>
<h4>結合 Fossil SCM 與 Flask Oauth2:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/fossiloauth">https://github.com/mdecourse/fossiloauth</a></p>
<h4>Cookie Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://www.valentinog.com/blog/cookies/">https://www.valentinog.com/blog/cookies/</a></p>
<p>採用 Flask Oauth2 介面登入後, 取得使用者 Gmail 帳號名稱 (具有唯一性) 後, 利用此一帳號查詢 Fossil SCM 中是否已經建立此一用戶,  若是, 則以亂數 (使用者無法得知, 因此無法直接從 Fossil SCM 倉儲網際介面中登入) 變更帳號對應密碼, 若尚無帳號, 則新建帳號並以亂數設定密碼. 使用者透過 Cookie 登入同硬體的 Fossil SCM 主機後, 程式必須自動替使用者登出 Flask 網際介面, 因此當使用者進入 Fossil SCM, 前面已經分別由程式登出 Gmail 與 Flask 網際帳號.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">@app.route('/forum')
# at the end of forum must logout from 8443
@login_required
def forum():
    """Create forum routine"""
    username, userpass = repo()

    with requests.Session() as s:
        url = 'https://fossil.kmol.info/u/yen/login'
        post_var = {'u': username, 'p': userpass}
        headers = {'X-Requested-With': 'XMLHttpRequest'}
        result = s.post(url, data = post_var, headers = headers)
        cookie = s.cookies.get_dict()
        key = list(cookie.keys())[0]
        value = cookie[key]

        forum = "https://fossil.kmol.info/u/yen/forum"
        response = make_response(redirect(forum))
        response.set_cookie(key, value)
        # logout from 8443
        logout()
        return response</pre>
<h4>Rererences:</h4>
<p style="padding-left: 30px;"><a href="https://fossil-scm.org/forum/forumpost/59c6552555">https://fossil-scm.org/forum/forumpost/59c6552555</a> (Fossil SCM with json)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2019/downloads/Why%20Fossil-SCM%20is%20an%20excellent%20choice%20for%20introductory%20programming%20courses.pdf">Why Fossil-SCM is an excellent choice for introductory programming courses </a></p>
<p style="padding-left: 30px;"><a href="https://www.sqlite.org/index.html">https://www.sqlite.org/index.html</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/@nerdijoe/how-to-deploy-flask-on-iis-with-windows-authentication-733839d657b7">https://medium.com/@nerdijoe/how-to-deploy-flask-on-iis-with-windows-authentication-733839d657b7</a></p>
<p style="padding-left: 30px;"><a href="https://atrium.ai/resources/how-to-implement-oauth-2-0-login-for-python-flask-web-server-applications/">https://atrium.ai/resources/how-to-implement-oauth-2-0-login-for-python-flask-web-server-applications/</a></p>
<h4>Fossil SCM:</h4>
<p><a href="https://fossil-scm.org/home/doc/trunk/www/json-api/api-auth.md">https://fossil-scm.org/home/doc/trunk/www/json-api/api-auth.md</a></p>
<p>Why using Fossil SCM: <a href="https://andreiclinciu.net/why-im-using-fossil-scm-instead-of-other-source-control-systems">https://andreiclinciu.net/why-im-using-fossil-scm-instead-of-other-source-control-systems</a></p>
<p>以 SQL 查詢資料庫中資料表欄位:</p>
<p style="padding-left: 30px;">fossil sql -R repo-name.fossil<br/>.schema user<br/>CREATE TABLE repository.user(<br/>  uid INTEGER PRIMARY KEY,<br/>  login TEXT UNIQUE,<br/>  pw TEXT,<br/>  cap TEXT,<br/>  cookie TEXT,<br/>  ipaddr TEXT,<br/>  cexpire DATETIME,<br/>  info TEXT,<br/>  mtime DATE,<br/>  photo BLOB<br/>);</p>
<h4>主題一:</h4>
<p style="padding-left: 30px;">建立 Fossil SCM 倉儲</p>
<p style="padding-left: 30px;">修改使用者密碼: fossil user password user_name user_password -R repo.fossil</p>
<p style="padding-left: 30px;">Python 與 SQLite</p>
<p style="padding-left: 30px;">CMSiMDE 與 SQLite - 也許可以試著將 content.htm 或靜態網頁內容存入 SQLite 資料表中.</p>
<p style="padding-left: 30px;">利用 Python 讀取 Fossil SCM 資料庫內容:</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/fossilpy">https://github.com/mdecourse/fossilpy</a></p>
<p style="padding-left: 30px;">利用 Python 與 delta 原理進行版次管理:</p>
<p style="padding-left: 60px;"><a href="https://github.com/ggicci/python-fossil-delta">https://github.com/ggicci/python-fossil-delta</a></p>
<h3>Compile Fossil</h3>
<p>自行編譯 <a href="https://www.fossil-scm.org">Fossil SCM</a> 的目的為 ____?</p>
<p><a href="https://www.fossil-scm.org">Fossil SCM</a> 提供 <a href="https://www.fossil-scm.org/home/doc/trunk/www/serverext.wiki">CGI Extensions</a> 功能的目的為何? <a href="https://en.wikipedia.org/wiki/CGI">CGI</a>, <a href="https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">WSGI</a>, <a href="https://en.wikipedia.org/wiki/UWSGI">UWSGI</a> 則又是什麼?</p>
<p><a href="https://www.fossil-scm.org">Fossil SCM</a> 有什麼功能, 在機械設計相關的電腦輔助設計實習流程中, 能夠扮演 ____, ____, ____, ____ 角色?</p>
<p><a href="https://git-scm.com/">Git </a>之於 <a href="https://github.com/torvalds/linux">Linux kernel</a>, <a href="https://www.fossil-scm.org">Fossil SCM</a> 之於 <a href="https://sqlite.org/src/dir?ci=trunk">SQLite</a>, 分別代表什麼意義?</p>
<p>需要自行編譯 <a href="https://sqlite.org/src/dir?ci=trunk">SQLite</a> 原始碼嗎? <a href="https://sqlite.org/src/dir?ci=trunk">SQLite</a> 與 <a href="https://www.fossil-scm.org">Fossil SCM</a> 的原始碼與機電資整合軟硬體產品, 可能有任何關係嗎?</p>
<h4>SQLite and JSON:</h4>
<p style="padding-left: 30px;"><a href="https://stackoverflow.com/questions/8652005/json-file-vs-sqlite-android">https://stackoverflow.com/questions/8652005/json-file-vs-sqlite-android</a></p>
<p style="padding-left: 30px;"><a href="https://stackoverflow.com/questions/22789079/json-vs-sqlite-which-is-more-suitable-for-android-ios-development">https://stackoverflow.com/questions/22789079/json-vs-sqlite-which-is-more-suitable-for-android-ios-development</a></p>
<p style="padding-left: 30px;"><a href="https://www.reddit.com/r/roguelikedev/comments/j5ljzd/game_data_storage_json_sql/">https://www.reddit.com/r/roguelikedev/comments/j5ljzd/game_data_storage_json_sql/</a></p>
<p style="padding-left: 30px;"><a href="https://www.nicholasnadeau.com/post/2020/11/python-for-hardware-engineers-sqlite-or-how-i-learned-to-stop-worrying-and-love-databases/">https://www.nicholasnadeau.com/post/2020/11/python-for-hardware-engineers-sqlite-or-how-i-learned-to-stop-worrying-and-love-databases/</a></p>
<p style="padding-left: 30px;"><a href="https://www.nicholasnadeau.com/post/2020/10/new-series-python-for-hardware-engineering/">https://www.nicholasnadeau.com/post/2020/10/new-series-python-for-hardware-engineering/</a></p>
<p><a href="https://learnsql.com/blog/most-popular-sql-databases-2020/">https://learnsql.com/blog/most-popular-sql-databases-2020/</a></p>
<p><a href="https://towardsdatascience.com/top-10-databases-to-use-in-2021-d7e6a85402ba">https://towardsdatascience.com/top-10-databases-to-use-in-2021-d7e6a85402ba</a></p>
<p><a href="/downloads/2017_Research and Improvement of SQLite’s Concurrency Control Mechanism.pdf">2017_Research and Improvement of SQLite’s Concurrency Control Mechanism.pdf</a></p>
<p><a href="https://ieeexplore.ieee.org/document/8449187">2018 RMAS: Relational Multiagent System for CPS Prototyping and Programming</a> (必須在校園網路下載)</p>
<p><a href="/downloads/2019_Methods of a Heterogeneous Multi-agent Robotic System Group Control.pdf">2019_Methods of a Heterogeneous Multi-agent Robotic System Group Control.pdf</a></p>
<p><a href="/downloads/2020_Design And Development Of An Application For Database MaintenanceIn Inventory Management System Using Tkinter And Sqlite Platform.pdf">2020_Design And Development Of An Application For Database MaintenanceIn Inventory Management System Using Tkinter And Sqlite Platform.pdf</a></p>
<hr/>
<p>一般將 Ubuntu 中的 fossil 設為 server, 配合 Stunnel 建立 https 介面, 而 Windows 中的 fossil.exe 則作為 client, 兩者可以透過 fossil version 查詢版次, 必須注意 server 與 client 的 Fossil SCM 版次是否相應, 以免無法使用新版本 Fossil SCM 可能新增的功能.</p>
<h4>Ubuntu 操作系統:</h4>
<p>下載 Fossil SCM 最新版本原始碼:</p>
<p style="padding-left: 30px;">點選 <a href="https://www.fossil-scm.org/home/timeline">Timeline</a>, 選擇最新版號對應的連結, 例如: <a href="https://www.fossil-scm.org/home/info/7aedd5675883d441">Fossil SCM 2.16 版</a>. 點選 <a href="https://www.fossil-scm.org/home/zip/7aedd567/Fossil-7aedd567.zip">ZIP archive</a> 下載後解開原始碼壓縮檔案.</p>
<p style="padding-left: 30px;">由於操作系統為 Ubuntu, 根據<a href="https://superuser.com/questions/371901/openssl-missing-during-configure-how-to-fix">說明</a>, 可以利用 sudo apt install libssl-dev 安裝所需的 OpenSSL 程式庫開發檔案.</p>
<p style="padding-left: 30px;">利用 xterm 命令列進入 Fossil SCM 原始碼所在目錄後, 執行 ./configure 後, 再執行 make 就可以建立 fossil 可執行檔案. 只不過檔案大小約 17 MB, 若利用 ./configure --static 所建立的 fossil 則將近 22 MB.</p>
<h4>Windows 64 位元操作系統:</h4>
<p style="padding-left: 30px;">以下將採用 <a href="https://www.msys2.org/">MSYS2</a> 執行編譯.</p>
<p style="padding-left: 30px;">從 <a href="http://gnuwin32.sourceforge.net/packages/coreutils.htm">Gnuwin32 coreutils</a> 取得視窗環境下執行的 cat 與 grep.</p>
<p style="padding-left: 30px;">下載 Fossil SCM 最新版原始碼與上列 Ubuntu 相同.</p>
<p style="padding-left: 30px;">由於採用 <a href="https://www.msys2.org/">MSYS2</a>, 因此必須在 mingw64.exe 啟動後的介面, 以 pacman -S openssl-devel 安裝所需的 OpenSSL 程式庫開發檔案, 其中包括 libssl.a 與 libcrypto.a 等兩個靜態程式庫.</p>
<h4 style="padding-left: 30px;">make.exe 檔案複製:</h4>
<p style="padding-left: 60px;">由於已經將 Y:\msys64_20210419\mingw64\bin\mingw32-make.exe 複製一份為 make.exe, 因此之後可以直接以 make 命令執行.</p>
<h4 style="padding-left: 30px;">windres.exe 檔案複製:</h4>
<p style="padding-left: 60px;">另外必須要將 Y:\msys64_20210419\mingw64\bin\windres.exe 複製一份為 x86_64-w64-mingw32-windres.exe, 因為 win/Makefile.mingw 中會採用:</p>
<p style="padding-left: 90px;">RCC = $(PREFIX)windres -I$(SRCDIR)</p>
<p style="padding-left: 60px;">轉換 Windows 原始碼中的 Resource files, 而 PREFIX 變數在下列將設定為 x86_64-w64-mingw32-.</p>
<h4 style="padding-left: 30px;">先編譯 compat/zlib:</h4>
<p style="padding-left: 60px;">cd compat/zlib<br/>mingw32-make -f win32/Makefile.gcc</p>
<h4 style="padding-left: 30px;">Makefile.mingw 設定：</h4>
<p style="padding-left: 60px;"><a href="https://www.msys2.org/">MSYS2</a> 所使用的 Makefile 位於 Fossil SCM 原始碼目錄中的 win/Makefile.mingw 檔案, 以 SciTE 編輯此一檔案時, 將第 22 行改為:</p>
<p style="padding-left: 90px;">PREFIX = x86_64-w64-mingw32-</p>
<p style="padding-left: 90px;">表示編譯完成的 fossil.exe 要在 x86_64-w64-mingw32 平台上執行.</p>
<p style="padding-left: 60px;">第 63 行改為:</p>
<p style="padding-left: 90px;">FOSSIL_ENABLE_SSL = 1</p>
<p style="padding-left: 90px;">表示編譯後的 fossil.exe 要能夠在 https 網路協定中使用.</p>
<h4 style="padding-left: 30px;">OpenSSL 靜態程式庫檔案:</h4>
<p style="padding-left: 60px;">將 pacman -S openssl-devel 安裝後, 在Y:\msys64_20210419\mingw64\lib 目錄中的 libssl.a 與 libcrypto.a 檔案放入 Fossil SCM 原始碼目錄中.</p>
<h4 style="padding-left: 30px;">執行編譯與連結:</h4>
<p style="padding-left: 60px;">make -f win/Makefile.mingw LIB="-l:libssl.a -l:libcrypto.a -lgdi32 -lmingwex -lz -lws2_32 -municode"</p>
<p style="padding-left: 60px;">此處採直接連結 libssl.a 與 libcrypto.a 的方式進行編譯, 完成後的 fossil.exe, 檔案大小約 8MB.</p>
<h3>Althttpd</h3>
<p>Althttpd is a simple webserver that has run the https://sqlite.org/ website since 2004. Althttpd strives for simplicity, security, and low resource usage.</p>
<p><a href="https://sqlite.org/althttpd/doc/trunk/althttpd.md">https://sqlite.org/althttpd/doc/trunk/althttpd.md</a></p>
<p></p>
<h2>Robotics</h2>
<h4>Robot (based upon <a href="https://www.iso.org/standard/55890.html">ISO 8373</a> robot definition):</h4>
<p style="padding-left: 30px;">An automatically controlled, reprogrammable, multipurpose manipulator programmable<br/>in three or more axes, which may be either fixed in place or mobile for use in industrial automation applications.</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-319-72911-4">Robotics</a> (校園網路下載電子書)</p>
<p>Robotic Systems: <a href="https://motion.cs.illinois.edu/RoboticSystems/">https://motion.cs.illinois.edu/RoboticSystems/</a></p>
<h4>Frameless Motor:</h4>
<p style="padding-left: 30px;"><a href="https://www.kollmorgen.com/en-us/products/motors/direct-drive/kbm-series-frameless/">https://www.kollmorgen.com/en-us/products/motors/direct-drive/kbm-series-frameless/</a></p>
<h4>Speed Reducer:</h4>
<p style="padding-left: 30px;">Source: <a href="/downloads/2019_Influencing Factors on Rotate Vector Reducer Dynamic Transmission Error.pdf">2019_Influencing Factors on Rotate Vector Reducer Dynamic Transmission Error.pdf</a></p>
<p style="padding-left: 30px;">The rotate vector (RV) reducer is a closed differential gear train composed of a planetary gear reducer and a cycloidal pin gear reducer. It is widely used in industrial robots, radars, precision machine tools, and other fields.</p>
<p style="padding-left: 30px;">As the core component of industrial robots, RV reducers account for approximately 34% of the total cost of robots. As the demand for industrial robots continues to increase, research regarding RV reducers is receiving increasing attention. Transmission error is an important indicator to measure RV reducer transmission performance.</p>
<p style="padding-left: 30px;"><a href="/downloads/Structural%20Characteristics of Rotate Vector Reducer Free Vibration.pdf" title="Structural Characteristics of Rotate Vector Reducer Free Vibration.pdf">Structural Characteristics of <span style="background-color: #ffff99;">Rotate Vector Reducer</span> Free Vibration.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://ieeexplore.ieee.org/document/8961677">Industrial Robot Rotate Vector Reducer Fault Detection Based on Hidden Markov Models</a> (從校園網路中下載)</p>
<p style="padding-left: 30px;"><a href="https://ieeexplore.ieee.org/document/7992681">2017_Design of Joint Module Equipped with Manually Configurable Reducer for Gearing</a> (從校園網路中下載)</p>
<p><img alt="" class="add_border" height="391" src="/images/structure_of_RV_reducer.png" width="600"/></p>
<p>(Source: <a href="https://link.springer.com/article/10.1007/s00158-020-02781-3">Reliability-based design optimization for RV reducer with experimental constraint</a>)</p>
<p><img alt="" class="add_border" height="434" src="/images/RV_reducer.png" width="600"/></p>
<p>(Source: <a href="https://www.semanticscholar.org/paper/Structural-Characteristics-of-Rotate-Vector-Reducer-Chen-Yang/99eee741ce88231b8271fa8cacfbcfdd85c2fa86">Structural Characteristics of Rotate Vector Reducer Free Vibration</a>)</p>
<p><a href="/downloads/Inverse Kinematic Analysis and Evaluation of a Robot for Nondestructive Testing Application.pdf">Inverse Kinematic Analysis and Evaluation of a Robot for Nondestructive Testing Application.pdf</a></p>
<p><a href="https://par.nsf.gov/servlets/purl/10117599">solving Symbolic Inverse Kinematics with Behavior Tree.pdf</a></p>
<p><a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.225.7025&amp;rep=rep1&amp;type=pdf">Q Learning for Robot Control.pdf</a></p>
<p><a href="https://www.ri.cmu.edu/pub_files/2013/7/Kober_IJRR_2013.pdf">Reinforcement Learning in Robotics: A Survey</a></p>
<p><a href="/downloads/Deep Reinforcement Learning for the Control of Robotic Manipulation- A Focussed Mini-Review.pdf">Deep Reinforcement Learning for the Control of Robotic Manipulation- A Focussed Mini-Review.pdf</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/6L-V4xzUcmM" title="YouTube video player" width="560"></iframe></p>
<h4>Related Courses:</h4>
<p style="padding-left: 30px;"><a href="http://ais.informatik.uni-freiburg.de/teaching/ss21/robotics/">http://ais.informatik.uni-freiburg.de/teaching/ss21/robotics/</a></p>
<p style="padding-left: 30px;"><a href="http://ais.informatik.uni-freiburg.de/teaching/ws20/mapping/">http://ais.informatik.uni-freiburg.de/teaching/ws20/mapping/</a></p>
<p><a href="https://github.com/mithi/robotics-coursework">https://github.com/mithi/robotics-coursework</a> (<a href="https://medium.com/@mithi/robotics-prototyping-zero-to-hero-dfc49cdd8a19">steps</a>)</p>
<h4>Related Ebooks:</h4>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-642-23026-4">Principles of Physics</a> (在校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-91041-3">Applied Linear Algebra</a> (在校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-01851-5">Fundamentals of Robotic Mechanical Systems</a> (在校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-642-20144-8">Robotics, Vision and Control</a> (在校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-32552-1">Springer Handbook of Robotics</a> (在校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-319-72911-4">Robotics</a> (在校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-84628-642-1">Robotics</a> (在校園網路下載電子書))</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-981-15-8053-6">Automotive Cyber Security</a> (在校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4020-2110-7">Fundamentals of Mechanicsof Robotic Manipulation</a> (在校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-030-20190-6">Robot Operating System</a> (在校園網路下載電子書)</p>
<p style="padding-left: 30px;"><a href="https://www.nicholasnadeau.com/publication/nadeau-2019-pybotics/">https://www.nicholasnadeau.com/publication/nadeau-2019-pybotics/</a></p>
<h4>CoppeliaSim:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/Obstacle-Avoidance-Using-A-Genetic-Algorithm">https://github.com/mdecourse/Obstacle-Avoidance-Using-A-Genetic-Algorithm</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/PID_wall_following">https://github.com/mdecourse/PID_wall_following</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/Painting-robot-simulation-in-V-rep">https://github.com/mdecourse/Painting-robot-simulation-in-V-rep</a></p>
<h4 style="padding-left: 30px;">IK</h4>
<h4 style="padding-left: 30px;">單軸, 雙軸, 多軸以及 Symbolic + Numerical Constraint Solver:</h4>
<p style="padding-left: 60px;">利用 CoppeliaSim GUI 流程設置求解 IK, 全部利用 API 程式流程設置求解 IK, 利用自行推導的數學式求解 IK, 終至利用自行設計編寫的通用 Symbolic + Numerical Constraint Solver 求解 IK.</p>
<p style="padding-left: 60px;"><a href="https://wiki.blender.org/wiki/Source/Animation/IK">https://wiki.blender.org/wiki/Source/Animation/IK</a></p>
<p style="padding-left: 60px;"><a href="/downloads/Building-a-Better-IK-Solver.pdf">Building-a-Better-IK-Solver.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/Mobile-Manipulation">https://github.com/mdecourse/Mobile-Manipulation</a></p>
<p style="padding-left: 60px;"><a href="/downloads/An Analytical Solution of the Inverse Kinematics Problem of Industrial Serial Manipulators with an Ortho-parallel Basis and a Spherical Wrist.pdf">An Analytical Solution of the Inverse Kinematics Problem of Industrial Serial Manipulators with an Ortho-parallel Basis and a Spherical Wrist.pdf</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/opw_kinematics">https://github.com/mdecourse/opw_kinematics</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/moveit_opw_kinematics_plugin">https://github.com/mdecourse/moveit_opw_kinematics_plugin</a></p>
<p style="padding-left: 90px;"><a href="https://moveit.ros.org/">https://moveit.ros.org/</a></p>
<h4 style="padding-left: 30px;">BlueZero remote API:</h4>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/Robotics-Research">https://github.com/mdecourse/Robotics-Research</a></p>
<h4 style="padding-left: 30px;">其他:</h4>
<p style="padding-left: 60px;"><a href="https://github.com/craigiedon/ProbRobScene">https://github.com/craigiedon/ProbRobScene</a></p>
<p style="padding-left: 90px;"><a href="https://arxiv.org/pdf/2011.01126.pdf">ProbRobScene - A Probabilistic Specification Languagefor 3D Robotic Manipulation Environments</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/coppelia_gui_robot_control_python">https://github.com/mdecourse/coppelia_gui_robot_control_python</a></p><h3>FMS</h3>
<p>在 <a href="https://www.coppeliarobotics.com/">CoppeliaSim </a>場景中, 從手動組裝自動化生產設備 (<a href="https://en.wikipedia.org/wiki/Industrial_robot">Industrial Robot</a>, <a href="https://en.wikipedia.org/wiki/Conveyor_system">Conveyor</a>, <a href="https://en.wikipedia.org/wiki/Automated_guided_vehicle">AGVS</a> 與 <a href="https://en.wikipedia.org/wiki/Automated_storage_and_retrieval_system">AS/RS</a> 設施等), 終至完成一套 <a href="https://en.wikipedia.org/wiki/Flexible_manufacturing_system">Flexible Manufacturing System</a> (彈性製造系統).</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-540-85414-2">Design of Flexible Production Systems</a> (在校園網路下載電子書）</p>
<p><a href="http://mde.tw/cd2021/content/%E5%85%AD%E8%BB%B8%E6%A9%9F%E6%A2%B0%E8%87%82%E6%A8%A1%E5%9E%8B.html">Robot 機械手臂模型</a></p>
<p>Import Robot from Solidworks into Coppeliasim: <a href="https://www.youtube.com/watch?v=jfUA2W-niIc">https://www.youtube.com/watch?v=jfUA2W-niIc</a></p>
<p style="padding-left: 30px;">URDF: <a href="https://wiki.ros.org/urdf">https://wiki.ros.org/urdf</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mmatl/urdfpy">https://github.com/mmatl/urdfpy</a></p>
<p style="padding-left: 30px;"><a href="/downloads/kuka kr16 assembly URDF.rar">kuka kr16 assembly URDF.rar</a></p>
<p style="padding-left: 30px;"><a href="https://www.youtube.com/channel/UCX6c67E5PTUq5W8n8POeO_w/videos">reference videos</a></p>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/urdfPlugin.htm">https://www.coppeliarobotics.com/helpFiles/en/urdfPlugin.htm</a></p>
<p style="padding-left: 30px;">simExtURDF: <a href="https://github.com/CoppeliaRobotics/simExtURDF">https://github.com/CoppeliaRobotics/simExtURDF</a></p>
<h4>CoppeliaSim Import and Export:</h4>
<p style="padding-left: 30px;"><a href="https://www.coppeliarobotics.com/helpFiles/en/importExport.htm">https://www.coppeliarobotics.com/helpFiles/en/importExport.htm</a></p>
<h4>XML Editor:</h4>
<p style="padding-left: 30px;"><a href="https://microsoft.github.io/XmlNotepad/">https://microsoft.github.io/XmlNotepad/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/lbellonda/qxmledit">https://github.com/lbellonda/qxmledit</a></p>
<h3>EE</h3>
<p>Electrical Engineering 電機工程</p>
<p><a href="/get_page/RL/Practical Electrical Engineering">Practical Electrical Engineering</a> (校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/1-84628-259-4">Mechatronic Systems</a> (校園網路下載電子書)</p>
<p style="padding-left: 30px;">Mechanical systems generate certain motions or transfer forces or torques. For an oriented command of, e.g., displacements, velocities or forces, feedforward and feedback control systems have been applied for many years. The control systems operate either without auxiliary energy (e.g., fly ball governor), or with electrical, hydraulic or pneumatic auxiliary energy, to manipulate the commanded variables directly or with a power amplifier.</p>
<p style="padding-left: 30px;">A realization with added fixed wired (analog) devices turns out to enable only relatively simple<br/>and limited control functions. If these analog devices are replaced with digital computers in the form of, e.g., on-line coupled microcomputers, the information processing can be designed to be considerably more flexible and more comprehensive.</p>
<p style="padding-left: 30px;">This development, beginning with the purely mechanical systems of the nineteenth century to mechatronic systems in the 1980s. The first digitally controlled machines were, e.g., machine tools, where already in around 1973 fixed wired sequential control devices based on transistors were being replaced by digital storage programmable control systems. This was paralleled by the introduction of digital control systems for, e.g., electrical drives, industrial robots and steam turbines and for automotive parts. About 10 years later, the first mechanical systems with integrated sensors, actuators and microcontrollers appeared, e.g., as anti-lock braking systems (ABS) for vehicles or magnetic bearings and in the form of precision electro-mechanical devices as cameras, video recorders, printers and disk storage, thus forming the first mechatronic systems.</p>
<h3>Klampt</h3>
<p><a href="https://github.com/mdecourse/Klampt">https://github.com/mdecourse/Klampt</a></p>
<ol>
<li>Unified C++ and Python package for robot modeling, kinematics, dynamics, control, motion planning, simulation, and visualization.</li>
<li>Supports legged and fixed-based robots.</li>
<li>Interoperable with Robot Operating System (ROS) and Open Motion Planning Library (OMPL).</li>
<li>Many sampling-based motion planners implemented.</li>
<li>Fast trajectory optimization routines.</li>
<li>Real-time motion planning routines.</li>
<li>Forward and inverse kinematics, forward and inverse dynamics</li>
<li>Contact mechanics computations (force closure, support polygons, stability of rigid bodies and actuated robots)</li>
<li>Planning models are fully decoupled from simulation models. This helps simulate uncertainty and modeling errors.</li>
<li>Robust rigid body simulation with triangle mesh / triangle mesh collisions.</li>
<li>Simulation of PID controlled, torque controlled, and velocity controlled motors.</li>
<li>Simulation of various sensors including cameras, depth sensors, laser range finders, gyroscopes, force/torque sensors, and accelerometers.</li>
<li>Works on several platforms: *nux environments, Windows, MacOS and Google Colab.</li>
</ol><h3>RL</h3>
<p><a href="/downloads/1997_tutorial_reinforcement_learning.pdf">1997_tutorial_reinforcement_learning.pdf</a></p>
<p><a href="/get_page/RL/Fundamentals of Artificial Intelligence">Fundamentals of Artificial Intelligence</a> (校園網路下載電子書)</p>
<p>Source: <a href="https://sites.google.com/view/fri-iasa-spring21-rs-1/home">https://sites.google.com/view/fri-iasa-spring21-rs-1/home</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Intro to AI.pdf">Intro to AI.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Reinforcement learning (1).pdf">Reinforcement learning (1).pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Reinforcement learning (2).pdf">Reinforcement learning (2).pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Robotics Intro.pdf">Robotics Intro.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Robotics(2).pdf">Robotics(2).pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Lab Planning, RL, robotics.pdf">Planning, RL and Robotics.pdf</a></p>
<h4>Gym:</h4>
<p style="padding-left: 30px;">Gym is a toolkit for developing and comparing reinforcement learning algorithms.</p>
<p style="padding-left: 30px;"><a href="https://towardsdatascience.com/reinforcement-learning-with-openai-d445c2c687d2">https://towardsdatascience.com/reinforcement-learning-with-openai-d445c2c687d2</a></p>
<p style="padding-left: 30px;"><a href="https://gym.openai.com/docs/">https://gym.openai.com/docs/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/openai/gym">https://github.com/openai/gym</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2021_Adaptation of Openai Gym for Moveo Platform.pdf">Adaptation of Openai Gym for Moveo Platform.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Sim-Env- Decoupling OpenAI GymEnvironments from Simulation Models.pdf">Sim-Env- Decoupling OpenAI GymEnvironments from Simulation Models.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://ctmakro.github.io/site/on_learning/rl/vrep.html">https://ctmakro.github.io/site/on_learning/rl/vrep.html</a></p>
<h4>Reinforcement Learning:</h4>
<p style="padding-left: 30px;"><a href="https://datawhalechina.github.io/easy-rl/">https://datawhalechina.github.io/easy-rl/</a> (中文教程)</p>
<p style="padding-left: 60px;"><a href="https://github.com/datawhalechina/easy-rl">https://github.com/datawhalechina/easy-rl</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5127-0">Applying Reinforcement Learning With Python</a> (校園網路下載電子書)</p>
<p style="padding-left: 60px;">Reinforcement Learning in some sense is a rebranding of <span style="background-color: #ffff99;">optimal control</span>, which is a concept extending from control theory. Optimal control has its origins in the 1950s and 1960s, where it was used to describe a problem where one is trying to achieve a certain "optimal" criterion and what "control" law is needed to achieve this end.</p>
<p style="padding-left: 60px;">Typically, we define an optimal control as a set of differential equations. These equations then define a path toward values that minimize the value of the error function. The core of optimal control is the culmination of Richard Bellman’s work, specifically that of <span style="background-color: #ffff99;">dynamic programming</span>. Developed in the 1950s, dynamic programming is an optimization method that emphasizes the solving of a large individual problem by breaking it down into smaller and easier-to-solve components.</p>
<p style="padding-left: 60px;">It is also considered the only feasible method of solving <span style="background-color: #ffff99;">stochastic optimal control problems</span> and moreover consider in general all of optimal control to be reinforcement learning.</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/4072pj1">https://github.com/mdecourse/4072pj1</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/vrep-env">https://github.com/mdecourse/vrep-env</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/quantumiracle/QT_Opt">https://github.com/quantumiracle/QT_Opt</a></p>
<p style="padding-left: 60px;"><a href="https://arxiv.org/abs/1806.10293">QT-Opt: Scalable Deep Reinforcement Learning for Vision-Based Robotic Manipulation </a></p><h2>系統開發</h2>
<h4>GCS</h4>
<p>Geometric Constrain Solver(GCS) 在解決 ____ 問題?</p>
<p><a href="https://www.cs.purdue.edu/homes/cmh/distribution/papers/Constraints/CAD95.pdf">https://www.cs.purdue.edu/homes/cmh/distribution/papers/Constraints/CAD95.pdf</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-3-642-58898-3">Geometric Constraint Solving and Applications ebook</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-030-15729-6">Introduction to Machine Learning</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4899-7550-8">The Finite Element Method and Applications in Engineering Using ANSYS</a> (在校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-319-99693-6">Computational Methods for Fluid Dynamics</a></p>
<h4>In Python:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/ericPrince/constraint-solver">https://github.com/ericPrince/constraint-solver</a></p>
<p style="padding-left: 30px;"><a href="https://pypi.org/project/py-slvs/">https://pypi.org/project/py-slvs/</a></p>
<p style="padding-left: 30px;"><a href="https://pyslvs-ui.readthedocs.io/en/stable/python-solvespace-api/">https://pyslvs-ui.readthedocs.io/en/stable/python-solvespace-api/</a></p>
<h4 style="padding-left: 30px;">non-geometric:</h4>
<p style="padding-left: 60px;"><a href="https://stackabuse.com/constraint-programming-with-python-constraint">https://stackabuse.com/constraint-programming-with-python-constraint</a></p>
<p style="padding-left: 60px;"><a href="https://www.cvxpy.org/">https://www.cvxpy.org/</a></p>
<h4>In C++:</h4>
<p style="padding-left: 30px;"><a href="https://solvespace.com/tech.pl">https://solvespace.com/tech.pl</a></p>
<h4>In Rust:</h4>
<p style="padding-left: 30px;"><a href="https://adventures.michaelfbryan.com/posts/constraints-part-1-expressions/">https://adventures.michaelfbryan.com/posts/constraints-part-1-expressions/</a> </p>
<p style="padding-left: 30px;"><a href="https://crates.io/crates/arcs">https://crates.io/crates/arcs</a></p>
<p style="padding-left: 30px;">CAD Kernel in Rust: <a href="https://github.com/ricosjp/truck">https://github.com/ricosjp/truck</a></p>
<p style="padding-left: 30px;"><a href="https://www.cis.upenn.edu/~jean/geomcs-v2.pdf">curves_and_surfaces_in_geometric_modeling_v2.pdf</a></p>
<h3>Optimization</h3>
<p><a href="https://link.springer.com/book/10.1007/978-1-4471-0955-6">Genetic Algorithms for Control and Signal Processing</a> (校園網路下載電子書)</p>
<p><a href="https://link.springer.com/book/10.1007/978-3-662-44874-8">Introduction to Evolutionary Computing</a> (校園網路下載電子書)</p>
<p><a href="https://arxiv.org/pdf/2104.01965.pdf">A FRAMEWORK FOR AUTOMATIC DIFFERENTIATION IN TOPOLOGY OPTIMIZATION</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/UW-ERSL/AuTO">https://github.com/UW-ERSL/AuTO</a></p>
<h3>Meta</h3>
<h4>你 Meta 了沒有?:</h4>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Metaprogramming">https://en.wikipedia.org/wiki/Metaprogramming</a></p>
<p style="padding-left: 30px;">Metaprogramming is a programming technique in which computer programs have the ability to treat other programs as their data. It means that a program can be designed to read, generate, analyze or transform other programs, and even modify itself while running.</p>
<p style="padding-left: 30px;">Metaprogramming can be used to move computations from run-time to compile-time, to generate code using compile time computations, and to enable self-modifying code. The ability of a programming language to be its own metalanguage is called reflection. Reflection is a valuable language feature to facilitate metaprogramming.</p>
<p><a href="https://elixirschool.com/zh-hant/lessons/advanced/metaprogramming/">https://elixirschool.com/zh-hant/lessons/advanced/metaprogramming/</a></p>
<p><a href="https://serokell.io/blog/elixir-metaprogramming">https://serokell.io/blog/elixir-metaprogramming</a></p>
<h3>Rust</h3>
<h4>Rust 線上編譯執行網站:</h4>
<p style="padding-left: 30px;"><a href="https://play.rust-lang.org/">https://play.rust-lang.org/</a></p>
<p style="padding-left: 30px;"><a href="https://kaisery.github.io/trpl-zh-cn/title-page.html">Rust 程式設計語言</a> (中文版)</p>
<p style="padding-left: 30px;"><a href="https://doc.rust-lang.org/stable/book/">https://doc.rust-lang.org/stable/book/</a></p>
<p style="padding-left: 30px;"><a href="https://www.itread01.com/content/1546256884.html">About Rust Macro</a> (巨集)</p>
<h4>Ｗindows Rust 可攜系統:</h4>
<h4 style="padding-left: 30px;">start_ipv6.bat 相關設定:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM for Rust
set MINGW_PATH=%path_msys2%;
set GIT_PATH=%path_git%;
set VSCODE_PATH=%path_vscode%
set RUSTUP_HOME=%Disk%:\Rust\rust
set CARGO_HOME=%Disk%:\Rust\cargo
set RUST_PATH=%CARGO_HOME%\bin</pre>
<h4>參考資料:</h4>
<h4 style="padding-left: 30px;">Rust and Assembly:</h4>
<p style="padding-left: 60px;"><a href="https://rustwasm.github.io/docs/book/">https://rustwasm.github.io/docs/book/</a></p>
<p style="padding-left: 30px;"><a href="https://stevedonovan.github.io/rust-gentle-intro/">https://stevedonovan.github.io/rust-gentle-intro/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/yewstack/yew">https://github.com/yewstack/yew</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>  (Web Assembley Binary Toolkit)</p>
<p style="padding-left: 30px;"><a href="https://doc.rust-lang.org/book/">Rust Programming Language.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.ralfj.de/projects/rust-101/main.html">https://www.ralfj.de/projects/rust-101/main.html</a></p>
<p style="padding-left: 30px;"><a href="https://doc.rust-lang.org/stable/rust-by-example/">https://doc.rust-lang.org/stable/rust-by-example/</a></p>
<p style="padding-left: 30px;"><a href="https://thenewstack.io/using-web-assembly-written-in-rust-on-the-server-side/">https://thenewstack.io/using-web-assembly-written-in-rust-on-the-server-side/</a> (Deno, Rust, Typescript, Webassembly)</p>
<p style="padding-left: 60px;"><a href="https://github.com/reselbob/wisesayingswasm">https://github.com/reselbob/wisesayingswasm</a></p>
<p></p>
<h3>Elixir</h3>
<p>Elixir 在解決 ____, ____, ____, ____等問題.</p>
<p><a href="/downloads/a_history_of_erlang.pdf">A history of Erlang</a></p>
<p><a href="https://github.com/dwyl/learn-elixir">https://github.com/dwyl/learn-elixir</a></p>
<p><a href="https://inquisitivedeveloper.com/tag/lwm-elixir/">https://inquisitivedeveloper.com/tag/lwm-elixir/</a></p>
<p><a href="https://www.phoenixframework.org/">https://www.phoenixframework.org/</a></p>
<h4>Elixir to Javascript:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/elixirscript/elixirscript">https://github.com/elixirscript/elixirscript</a></p>
<h4>Erlang VM in Rust:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/archseer/enigma">https://github.com/archseer/enigma</a></p>
<h4>Dart + Phoenix:</h4>
<p style="padding-left: 30px;"><a href="https://pub.dev/packages/phoenix_socket">https://pub.dev/packages/phoenix_socket</a></p>
<p style="padding-left: 30px;"><a href="https://pub.dev/packages/phoenix_wings">https://pub.dev/packages/phoenix_wings</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/approov/quickstart-flutter-elixir-phoenix-channels">https://github.com/approov/quickstart-flutter-elixir-phoenix-channels</a></p>
<p><a href="https://drive.google.com/file/d/1CZfEjvHtQSlAch83jHmw4Ivz6WubPu8h/view?usp=sharing">Erlang and Elixir portable.7z</a> for Windows</p>
<p>Mac: <a href="https://medium.com/@cseanc/setup-elixir-phoenix-on-your-mac-85c9e491fb1">https://medium.com/@cseanc/setup-elixir-phoenix-on-your-mac-85c9e491fb1</a></p>
<p><a href="https://ithelp.ithome.com.tw/articles/10192375">https://ithelp.ithome.com.tw/articles/10192375</a> (函數式編程 Elixir 簡介)</p>
<p>Can mechanical designer also take advantage of Elixir?</p>
<p style="padding-left: 30px;"><a href="https://phoenixframework.org/">https://phoenixframework.org/</a></p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-2394-9">Erlang and Elixir for Imperative Programmers</a> (ebook)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/xrIjfIjssLE" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/OcExABAAsXs" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/lxYFOM3UJzo" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/zL2wcqS78UA" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/me4cANg9RMU" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://www.kabisa.nl/tech/when-elixirs-performance-becomes-rust-y/">https://www.kabisa.nl/tech/when-elixirs-performance-becomes-rust-y/</a></p>
<p><a href="https://www.infoq.com/news/2019/07/rust-elixir-performance-at-scale/">https://www.infoq.com/news/2019/07/rust-elixir-performance-at-scale/</a></p>
<h4>Elixir and IOT:</h4>
<p style="padding-left: 30px;"><a href="https://medium.com/@carlogilmar/learning-iot-first-steps-with-elixir-310c4ad4ab15">https://medium.com/@carlogilmar/learning-iot-first-steps-with-elixir-310c4ad4ab15</a></p>
<p style="padding-left: 30px;"><a href="https://www.verypossible.com/insights/aws-iot-core-elixir-and-nerves-a-crash-course">https://www.verypossible.com/insights/aws-iot-core-elixir-and-nerves-a-crash-course</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/zWytNNPnJUk" title="YouTube video player" width="560"></iframe></p>
<h4>Elixir and reinforcement learning:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/doctorcorral/gyx">https://github.com/doctorcorral/gyx</a></p>
<p style="padding-left: 30px;"><a href="https://medium.datadriveninvestor.com/elixir-e-reinforcement-learning-i-3ecd9399d03c">https://medium.datadriveninvestor.com/elixir-e-reinforcement-learning-i-3ecd9399d03c</a></p>
<p style="padding-left: 30px;"><a href="https://www.erlang-solutions.com/blog/how-to-build-a-machine-learning-project-in-elixir/">https://www.erlang-solutions.com/blog/how-to-build-a-machine-learning-project-in-elixir/</a></p>
<p style="padding-left: 30px;"><a href="https://elixirforum.com/search?q=machine%20learning">https://elixirforum.com/search?q=machine%20learning</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/n0X61Ad8Ofo" title="YouTube video player" width="560"></iframe></p>
<h3>可攜 Elixir</h3>
<p>採用 Elixir 希望解決 ____ 問題?</p>
<p><a href="https://elixir-lang.org/blog/2013/08/08/elixir-design-goals/">https://elixir-lang.org/blog/2013/08/08/elixir-design-goals/</a></p>
<p>在 Windows 環境中建立可攜 Erlang 與 Elixir 的方法, 是先在操作系統中安裝後, 將 Erlang 與 Elixir 目錄內容取出放入可攜系統 y:\ 中的 elixir 目錄後, 在控制台中分別解除 Erlang 與 Elixir 的系統安裝, 然後必須要進入取出放入隨身碟或系統其他目錄後, 先修改:</p>
<p>Y:\elixir\erl10.7\bin 以及 Y:\elixir\erl10.7\erts-10.7\bin 目錄中的兩個 erl.ini:</p>
<p>將原先設定為操作系統安裝的路徑, 改為隨身可攜系統的對應路徑:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[erlang] 
Bindir=Y:\\elixir\\erl10.7\\erts-10.7\\bin 
Progname=erl 
Rootdir=Y:\\elixir\\erl10.7\\ 
</pre>
<p>至於在隨身系統啟動後, 開啟互動式 Elixir 的 batch file, elixir.bat 內容為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">"y:\elixir\erl10.7\bin\werl.exe" -env ERL_LIBS "y:\elixir\Elixir\lib" -user Elixir.IEx.CLI -extra --no-halt</pre>
<p>而 erlang.bat 則為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">echo off
y:\elixir\erl10.7\bin\werl.exe</pre>
<p>另外, 在啟動隨身系統的 start_ipv6.bat 中則加入:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM for Erlang and Elixir
set path_erlang=%Disk%:\elixir\erl10.7\bin\;%Disk%:\elixir\erl10.7\erts-10.7\bin;%Disk%:\elixir\elixir\bin\;
set ERTSPATH=%Disk%:\elixir\erl10.7\erts-10.7\bin
set ERLINI=%Disk%:\elixir\erl10.7\erts-10.7\bin\erl.ini</pre>
<p>並將 %path_erlang% 納入隨後的 Path 環境變數中.</p>
<p>如此就可以在啟動隨身系統後, 以 elixir.bat 啟動 Elixir 互動環境, 而執行 erlang.bat 則啟動 Erlang  互動環境.</p>
<h4>根據上述流程設定的 Elixir 可攜系統下載:</h4>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1CZfEjvHtQSlAch83jHmw4Ivz6WubPu8h/view?usp=sharing">Erlang 10.7 and Elixir portable.7z</a> for Windows (下載 62MB , 解開壓縮後 340MB)</p>
<p>基本操作: <a href="https://inquisitivedeveloper.com/lwm-elixir-75/">https://inquisitivedeveloper.com/lwm-elixir-75/</a></p>
<h1>實習內容</h1>
<p>機械設計工程師在產品開發過程, 面臨什麼挑戰? 電腦輔助設計能幫上什麼忙?</p>
<h4 style="padding-left: 30px;">挑戰一: 封閉且缺乏彈性的工具, 造成許多無法清楚說明原因的問題.</h4>
<p style="padding-left: 60px;">學習面對問題時, 千萬不要說: 我不知道, 而是要設法搜尋探討問題後回答: 這是我目前找到的可行方案.</p>
<p style="padding-left: 90px;">工程師在問問題之前, 要試著自行竭盡全力找答案, 並在每一個求解階段留下細節歷程資料.</p>
<h4 style="padding-left: 30px;">挑戰二: 實體製造與虛擬設計之間的差異鴻溝, 經常由主導藍圖的機械設計師背起各種黑鍋.</h4>
<p style="padding-left: 60px;">學習清楚說明細節, 留下各種佐證資料, 學會安排動態整合系統, 讓電腦軟硬體協助釐清並解決問題.</p>
<p style="padding-left: 90px;">範例: 請比較 CoppeliaSim 與 Webots 在處理 Documentation 流程上的差異.</p>
<h4 style="padding-left: 30px;">挑戰三: 我們是否能夠每一班共同"維護"一個倉儲, 利用一個網站"展現"各學員的學習進度嗎?</h4>
<p style="padding-left: 60px;">亦即:</p>
<p style="padding-left: 90px;">每班起始一個 Github 上的倉儲, 以 <a href="https://github.com/mdecourse/cmstemplate">cmstemplate</a> 為主體架構.</p>
<p style="padding-left: 90px;">針對實體內容中的各 Tasks 任務工作項目, 各學員利用倉儲中的 Discussion 提交工作內容 (mp4 影片, Onshape 零組件連結, CoppeliaSim 模擬場景與其他相關控制程式檔案), 經各學員整合內容修改後, 以 Pull Request 合併至各班實習倉儲, 網頁, 簡報與網誌.</p>
<p style="padding-left: 60px;"><a href="https://education.github.com/git-cheat-sheet-education.pdf">https://education.github.com/git-cheat-sheet-education.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://alessandropellegrini.it/didattica/2019/ia/git.pdf">Introduction to Git and Github</a></p>
<p style="padding-left: 60px;"><a href="https://git-scm.com/book/en/v2">https://git-scm.com/book/en/v2</a></p>
<h4 style="padding-left: 30px;">挑戰四: 當各項產品開發技術與說明手冊不斷改版下, 如何有效建立一個緊密對應的技術項目與文件整合系統?</h4>
<p style="padding-left: 60px;">目前 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 的網站構建流程是由使用者在近端或遠端的動態系統維護 config/content.htm 後, 再轉為靜態網頁, 但是面對 <a href="https://github.com/CoppeliaRobotics/helpfiles">https://github.com/CoppeliaRobotics/helpfiles</a> 已經擁有靜態網頁的內容, 目前尚無轉為 config/content.htm 的機制.</p>
<p style="padding-left: 60px;">由於每一個不同版本的 CoppeliaSim 皆有其對應的 helpFiles, 但 <a href="https://www.coppeliarobotics.com/helpFiles/">https://www.coppeliarobotics.com/helpFiles/</a> 卻只能列出最新版 (目前為 4.2.0) 的 helpFiles. 因此現在只能自行建立 <a href="https://mde.tw/copsim410">https://mde.tw/copsim410</a> 列出 4.1.0 版本的 helpFiles.</p>
<p style="padding-left: 60px;">而 <a href="https://github.com/cyberbotics/webots/tree/master/docs">https://github.com/cyberbotics/webots/tree/master/docs</a> 之所以沒有上述問題的原因是採用 <a href="https://github.com/showdownjs/showdown">showdown</a> Javascript 程式庫, 以動態 markdown 轉為 html 的方式, 從 Github 倉儲中將各版本所 release 的 docs 內容呈現在 Github Pages 靜態網站上:</p>
<p style="padding-left: 60px;">因此只要在各頁面加上 index 或 page, 再加上 version 變數, 就可以擷取該版本對應文件:</p>
<p style="padding-left: 90px;"><a href="https://www.cyberbotics.com/doc/guide/index?version=R2020b">https://www.cyberbotics.com/doc/guide/index?version=R2020b</a></p>
<p style="padding-left: 90px;"><a href="https://www.cyberbotics.com/doc/guide/page?version=R2021a">https://www.cyberbotics.com/doc/guide/page?version=R2021a</a></p>
<p style="padding-left: 90px;"><a href="https://www.cyberbotics.com/doc/guide/page?version=R2021b">https://www.cyberbotics.com/doc/guide/page?version=R2021b</a></p>
<h4 style="padding-left: 60px;">參考資料:</h4>
<p style="padding-left: 90px;"><a href="https://2019wcm.blogspot.com/2019/03/v-rep-cmsimfly.html">https://2019wcm.blogspot.com/2019/03/v-rep-cmsimfly.html</a></p>
<p style="padding-left: 90px;"><a href="https://mde.tw/cd2019/content/Webots%20doc.html">https://mde.tw/cd2019/content/Webots%20doc.html</a></p>
<p style="padding-left: 90px;"><a href="https://mde.tw/cd2021/content/W5.html">https://mde.tw/cd2021/content/W5.html</a></p>
<h4>Github 改版後 push 方法:</h4>
<ol>
<li>在 Windows 環境下, 利用 <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">Putty</a> 與 <a href="https://en.wikipedia.org/wiki/Secure_Shell">SSH</a> 協定進行推送</li>
<li>利用 <a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">Personal Access Token</a> 方式推送</li>
</ol>
<p>請每一位學員拍一個教學影片上傳到 Youtube, 說明如何使用上述兩種方法推送改版資料到 Github.</p><h2>Stage1</h2>
<h4>任務一:</h4>
<p style="padding-left: 30px;">請閱讀 <a href="http://mde.tw/cad2021/content/About.html">About</a> 頁面, 待會要每一橫排抽出一位同學, 上台來報告, 你看到什麼? 能不能給一個三分鐘的簡報?</p>
<p style="padding-left: 30px;">1-1: 看完後, 請利用三分鐘的時間, 說明您看到什麼?</p>
<p style="padding-left: 30px;">1-2: 請使用 <a href="https://www.debugmode.com/wink/">Wink</a> (<a href="https://mde.tw/cmstemplate/content/Wink.html">Tutorial</a>) 在個人頁面中建立一個有關任務1的內容說明影片.</p>
<h4>任務二:</h4>
<p style="padding-left: 30px;">請下載本學期的教科書, 總共有 187 頁, 都是英文資料, 請問: 為什麼身在台灣的機械設計工程師在校期間, 要儘量閱讀英文資料?</p>
<p style="padding-left: 30px;">2-1: 請翻閱一下您所下載的教科書資料, 內容涵蓋哪些主題?</p>
<h4>想像一:</h4>
<p style="padding-left: 30px;">假如 SolidWords 是"我們"這個團隊所開發的, 團隊成員在進行機電資整合產品開發時, 會有什麼不同嗎?</p>
<p style="padding-left: 60px;">大家能夠想像 SolidWorks 的出現與博弈有關嗎?</p>
<h4>想像二:</h4>
<p style="padding-left: 30px;">要具備什麼樣的知識與能力, 才能"開發"類似 SolidWorks 這樣的工具?</p>
<p style="padding-left: 30px;">我們為什麼要想像"能夠"開發 CAD 或其他能用電腦輔助機械設計的工具, 而不僅是"使用"就好? 請大家查一查 <a href="https://www.moldex3d.com">Moldex3d</a> 是哪一國的團隊開發的?</p>
<h4>想像三:</h4>
<p style="padding-left: 30px;">3D 列印自 1980 年代起即發明<a href="https://patentimages.storage.googleapis.com/fd/db/8f/27cf989e55898b/US5155324.pdf">逐層選擇金屬粉末燒結</a>技術, 以下是目前的<a href="https://www.relativityspace.com/">應用發展</a>. 可以想像其中牽涉哪些與機械有關的電腦輔助設計技術嗎? (About <a href="https://en.wikipedia.org/wiki/Tim_Ellis_(engineer)">Tim Ellis</a>)</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/2Fp_aMCR468" title="YouTube video player" width="560"></iframe></p><h3>Task 1</h3>
<h4>Computer-aided design</h4>
<p>Computer-aided design (CAD) uses the <span style="background-color: #ffff99;">mathematical</span> and <span style="background-color: #ffff99;">graphic processing power</span> of the computer to assist the engineer in the creation, modification, analysis, and display of designs.</p>
<p>Many factors have contributed to CAD technology being a necessary tool in the engineering world for applications including shipbuilding, automotive, aerospace, medical, industrial, and architectural design, such as the computer's speed in processing complex equations and managing technical databases.</p>
<p>若從產品開發流程與團隊成員的角度而言, 電腦輔助設計的本質在運用電腦與周邊相關軟硬體, 以達到多人參與協同產品設計流程時, 針對每一個細節與項目, 都能夠少一點負擔 (less burden), 多一些建樹 (more achievements) 的目標, 期望在產品從概念至回收的生命週期 (life cycle) 中, 能以最少成本付出, 取得最大效益.</p>
<h4>Live streaming and on-line meeting</h4>
<p>Three-minute talking to describe your design intent.</p>
<h4>課程設計目標</h4>
<p>藉由這個課程希望讓學員了解電腦輔助設計的發展源起, 當時建構工具與發展系統的時空背景, 超過五十年的快速發展至今, 機械設計工程師在採用電腦輔助設計流程與工具解決問題時, 應該如何掌握問題的關鍵核心, 探討最具價值的項目, 並以協同互助學習的方式, 面對未來發展趨勢, 各自找到值得長期努力且能有效自我期許的目標.</p>
<h4>About computer</h4>
<p>computer science is not a science (當時的科系名稱為 Electric Engineering and Computer Science). It's also not really very much about computers. And that is, when some field is just getting started and you don't really understand it very well, it's very easy to confuse the essence of what you're doing with the tools that you use.</p>
<p>I think in the future people will look back and say, yes, those primitives in the 20th century were fiddling around with these gadgets called computers, but really what they were doing is starting to <span style="background-color: #ccffcc;">learn how to <a href="https://www.merriam-webster.com/dictionary/formalize">formalize</a> <a href="https://www.merriam-webster.com/dictionary/intuition">intuitions</a> about <a href="https://www.merriam-webster.com/dictionary/process">process</a>,</span> <span style="background-color: #ccffcc;">how to do things, starting to develop a way to talk precisely about how-to knowledge.</span></p>
<h4>任務一:</h4>
<p style="padding-left: 30px;">1-1: 請閱讀 <a href="http://mde.tw/cad2021/content/About.html">About</a> 頁面後, 請利用三分鐘的時間, 說明您看到什麼?</p>
<p style="padding-left: 60px;">請下載 <a href="https://drive.google.com/file/d/18ukdNlFB9yHY-FZSY-bTnzrPrNv0FE4D/view?usp=sharing">meARM.7z</a>, 根據其中的零件檔案尺寸, 分別在 SolidWorks, Inventor, NX, Solvespace 與 Onshape 完成零組件設計繪圖.</p>
<p style="padding-left: 60px;">請問何謂 Forward 與 Inverse Kinematics? 請根據下列參考資料推導相關運算方程式與函式.</p>
<p style="padding-left: 90px;"><a href="https://drive.google.com/file/d/1nkrGY5taCwhT4CdoCUUJ1KoJmPtQBMCo/view?usp=sharing">meArm_unassembled.ttt</a> (請根據 <a href="https://mde.tw/copsim410/content/en/buildingAModelTutorial.htm">clean model tutorial</a> 簡化各零組件後, 完成動態場景組立)</p>
<p style="padding-left: 90px;"><a href="https://fluxhead.com/mearm.org/mearm-assembly.html">https://fluxhead.com/mearm.org/mearm-assembly.html</a></p>
<p style="padding-left: 90px;"><a href="/downloads/MeArmPiTechnicalOverviewV0-3DRAFT.pdf">MeArmPiTechnicalOverviewV0-3DRAFT.pdf</a></p>
<p style="padding-left: 90px;"><a href="https://raw.githubusercontent.com/yorkhackspace/meArm/master/ik.cpp">https://raw.githubusercontent.com/yorkhackspace/meArm/master/ik.cpp</a></p>
<p style="padding-left: 90px;"><a href="/downloads/ECE 4760 - ECE 5725 Robotic Candy Sorter.pdf">ECE 4760 - ECE 5725 Robotic Candy Sorter.pdf</a></p>
<p style="padding-left: 120px;"><a href="https://github.com/PeterSlater/InefficientSkittleSorter">https://github.com/PeterSlater/InefficientSkittleSorter</a></p>
<p style="padding-left: 120px;"><a href="https://github.com/aquila12/me-arm-ik">https://github.com/aquila12/me-arm-ik</a></p>
<p style="padding-left: 90px;"><a href="https://drive.google.com/file/d/1hoF0ai62yxpXtIEhQQa617a3lpVqfLpg/view?usp=sharing">jansen.ttt</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/meArm/blob/master/Geometry.md">https://github.com/mdecourse/meArm/blob/master/Geometry.md</a></p>
<p style="padding-left: 90px;"><a href="/downloads/InverseKinematics.pdf">InverseKinematics.pdf</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/2017springcd/blob/gh-pages/data/jansen_8link_w7.7z">https://github.com/mdecourse/2017springcd/blob/gh-pages/data/jansen_8link_w7.7z</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/models/blob/master/robots/non-mobile/uarm.ttm">uarm.ttm</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/models/blob/master/robots/non-mobile/uarm%20with%20gripper.ttm">uarm with gripper.ttm</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/hand-mechanical-design">https://github.com/mdecourse/hand-mechanical-design</a></p>
<p style="padding-left: 120px;"><a href="https://github.com/mdecourse/hand-electronic-design">https://github.com/mdecourse/hand-electronic-design</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/meArmPi">https://github.com/mdecourse/meArmPi</a> (Python)</p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/meArm">https://github.com/mdecourse/meArm</a> (C++)</p>
<p style="padding-left: 90px;"><a href="/downloads/Robot Manipulator Control with Inverse Kinematics PD-Pseudoinverse Jacobian and Forward Kinematics Denavit Hartenberg.pdf">Robot Manipulator Control with Inverse Kinematics PD-Pseudoinverse Jacobian and Forward Kinematics Denavit Hartenberg.pdf</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/tossing-robot-simulation">https://github.com/mdecourse/tossing-robot-simulation</a> (投擲競賽)</p>
<p style="padding-left: 90px;"><a href="https://github.com/mdecourse/Robotarm-ABB140-AutoDrawing">https://github.com/mdecourse/Robotarm-ABB140-AutoDrawing</a></p>
<h4 style="padding-left: 90px;">控制系統設計:</h4>
<p style="padding-left: 120px;">Online Arduino simulator: <a href="https://wokwi.com/">https://wokwi.com/</a></p>
<p style="padding-left: 150px;"><a href="https://github.com/orgs/wokwi/">https://github.com/orgs/wokwi/</a></p>
<p style="padding-left: 150px;"><a href="https://github.com/wokwi/avr8js">https://github.com/wokwi/avr8js</a></p>
<p style="padding-left: 150px;"><a href="https://forum.arduino.cc/t/virtual-online-arduino-simulator-wokwi-arduino-simulator/698481/2">https://forum.arduino.cc/t/virtual-online-arduino-simulator-wokwi-arduino-simulator/698481/2</a></p>
<p style="padding-left: 120px;">Servo motor simulation: <a href="https://wokwi.com/arduino/libraries/Servo/Sweep">https://wokwi.com/arduino/libraries/Servo/Sweep</a></p>
<p style="padding-left: 120px;"><a href="https://tawjaw.github.io/Arduino-Robot-Virtual-Lab/">https://tawjaw.github.io/Arduino-Robot-Virtual-Lab/</a></p>
<p style="padding-left: 120px;"><a href="https://github.com/arcostasi/avr8js-electron-playground">https://github.com/arcostasi/avr8js-electron-playground</a></p>
<p style="padding-left: 120px;"><a href="https://markmegarry.github.io/AVR8js-Falstad/">https://markmegarry.github.io/AVR8js-Falstad/</a></p>
<p style="padding-left: 120px;"><a href="https://www.tinkercad.com/">https://www.tinkercad.com/</a></p>
<p style="padding-left: 120px;">Uno Arduino Simulator:</p>
<p style="padding-left: 150px;"><a href="https://www.sites.google.com/site/unoardusim/services">https://www.sites.google.com/site/unoardusim/services</a></p>
<p style="padding-left: 120px;"><a href="https://diyprojects.io/drive-nema-17-stepper-motor-rpimotorlib-python-library-a4988/#.YIPYQz9-UdU">https://diyprojects.io/drive-nema-17-stepper-motor-rpimotorlib-python-library-a4988/#.YIPYQz9-UdU</a></p>
<p style="padding-left: 120px;"><a href="https://github.com/gavinlyonsrepo/RpiMotorLib">https://github.com/gavinlyonsrepo/RpiMotorLib</a></p>
<p style="padding-left: 120px;"><a href="http://www.python-exemplary.com">http://www.python-exemplary.com</a></p>
<p style="padding-left: 120px;"><a href="https://lcgamboa.github.io/">https://lcgamboa.github.io/</a></p>
<p style="padding-left: 120px;"><a href="https://github.com/lcgamboa/picsimlab">https://github.com/lcgamboa/picsimlab</a></p>
<p><img caption="false" height="298" src="/images/meArm_assembled.png" width="560"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/3gynv9LBmjs" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ucgiYCoIw30" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/hEQ1p2WffmA" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/D93iQVoSScQ" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/zQhbho3MVQY" title="YouTube video player" width="560"></iframe></p>
<p style="padding-left: 30px;">1-2: 請使用 <a href="https://www.debugmode.com/wink/">Wink</a> (<a href="https://mde.tw/cmstemplate/content/Wink.html">Tutorial</a>) 在個人頁面中建立一個有關任務1的內容說明影片.</p><h3>Task1-1</h3>
<p>請下載 <a href="https://drive.google.com/file/d/1hnoMQ1Hh_Hgdxh7Aym4q43DzLjOWUanR/view?usp=sharing">mirobot_part1_to_part5.7z</a> (Parts stl from <a href="https://github.com/wlkata/Mirobot-STL">https://github.com/wlkata/Mirobot-STL</a>)</p>
<p>練習開啟 CoppeliaSim (官方教育版 4.1.0 rev1 或自行編譯的 4.1.0 版本) 後, 從 mirobot_part1.ttt 開始, 透過<a href="https://mde.tw/copsim410/content/en/buildingAModelTutorial.htm">模型簡化說明</a>, 逐一在各零件轉軸平面上設定參考座標後, 完成 mirobot 六軸機械臂的場景組立, 並且根據 <a href="https://mde.tw/copsim410/content/en/customUIPlugin.htm">UI 介面延伸</a>與 <a href="https://mde.tw/copsim410/content/en/customUIPluginXMLSyntax.htm">UI XML 語法</a>的說明, 完成 custom UI 控制介面程式的編寫, 請各學員參考下列資料, 以便推導出從 base 座標系統至各旋轉軸座標系統的 transformation matrix.</p>
<p style="padding-left: 30px;">假如兩座標系統之間有一個座標軸指向同一方向, 即可簡化為 <a href="https://math.stackexchange.com/questions/557507/how-to-find-a-transformation-matrix-given-coordinates-of-two-triangles-in-r2">2D 座標轉換題目</a> (<a href="https://math.stackexchange.com/questions/77462/finding-transformation-matrix-between-two-2d-coordinate-frames-pixel-plane-to">ref</a>)</p>
<p style="padding-left: 30px;"><a href="https://ieeexplore.ieee.org/document/88573">1991 Least-squares estimation of transformation parameters between two point patterns</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2017_Automatic_Calculation_of_a_Transformation_Matrix_Between_Two_Frames.pdf">2017_Automatic_Calculation_of_a_Transformation_Matrix_Between_Two_Frames.pdf</a></p>
<h4>實習動機:</h4>
<ol>
<li>當學員具備利用 Solidworks, Inventor, NX, Solvespace 與 Onshape 完成各種多軸機械臂基本零組件繪圖能力後, 必須思考當這些零組件繼續進行細部零件製造設計之前, 必須要針對機電場景模型完成初步的<span style="background-color: #ffff99;">控制設計</span> (假設零組件為剛體, 且點對點運動加減速後不會產生震動, 這種假設當然與實際應用有極大差距).</li>
<li>初步的機械手臂控制設計包含 <span style="background-color: #ffff99;">Forward Kinematics</span> 與 <span style="background-color: #ffff99;">Inverse Kinematics</span> 的分析.</li>
<li>Forward Kinematics 的分析是已知各轉軸旋轉角度, 欲求機械手臂端點的座標<span style="background-color: #ffff99;">位置 (position)</span> 與<span style="background-color: #ffff99;">方位 (orientation)</span>.</li>
<li><a href="https://motion.cs.illinois.edu/RoboticSystems/InverseKinematics.html">Inverse Kinematics</a> 的分析則是<span style="background-color: #ffff99;">計算各轉軸的旋轉角度</span>, 讓機械手臂端點的位置與方位符合工作所需.</li>
<li>當使用者練習從電腦輔助多軸機械臂零組件繪圖, 進入多軸機械臂控制應用模擬階段, 取得各旋轉軸座標系統間的轉換矩陣後, 便可根據 <a href="/downloads/2004_The Inverse Kinematics Solutions of Industrial Robot Manipulators.pdf">Inverse Kinematic Closed Form</a> 計算各輸入軸的控制角度, 讓機械臂的端點以所需的方位抵達精確位置.</li>
</ol>
<h4>延伸應用:</h4>
<p style="padding-left: 30px;">利用雷射掃點取得的座標特徵線求機械手臂座標間的轉換矩陣:</p>
<p style="padding-left: 30px;"><a href="/downloads/2016_A Rapid Coordinate Transformation Method Applied in Industrial Robot Calibration Based on Characteristic Line Coincidence.pdf">2016_A Rapid Coordinate Transformation Method Applied in Industrial Robot Calibration Based on Characteristic Line Coincidence.pdf</a></p>
<p style="padding-left: 30px;">能否推導 Inverse Kinematic Equations for Robots:</p>
<p style="padding-left: 30px;"><a href="/downloads/1983_a_geometric_approach_in_solving_inverse_kinematics_of_puma_robots.pdf">1983_a_geometric_approach_in_solving_inverse_kinematics_of_puma_robots.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/1988_inverse_kinematic_analysis_of_robot_manipulators-1-50.pdf">1988_inverse_kinematic_analysis_of_robot_manipulators-1-50.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/1988_inverse_kinematic_analysis_of_robot_manipulators-51-100.pdf">1988_inverse_kinematic_analysis_of_robot_manipulators-50-100.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/1988_inverse_kinematic_analysis_of_robot_manipulators-101-149.pdf">1988_inverse_kinematic_analysis_of_robot_manipulators-101-149.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/1994_efficient_inverse_kinematics_for_general_6R_manipulators.pdf">1994_efficient_inverse_kinematics_for_general_6R_manipulators.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2007_solving_inverse_kinematic_robotics_problem_comparison_DH_Matrix_and_GBT.pdf">2007_solving_inverse_kinematic_robotics_problem_comparison_DH_Matrix_and_GBT.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Real Time Inverse Kinematics for General 6R Manipulators.pdf">Real Time Inverse Kinematics for General 6R Manipulators.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2007_handbook_of_robotics_ch1_kinematics.pdf">2007_handbook_of_robotics_ch1_kinematics.pdf</a></p><h3>Task 2</h3>
<p>這個學期的教科書前面五個章節取自 2019 年出版的 <a href="https://link.springer.com/book/10.1007/978-3-319-72911-4">Robotics</a> 第二版.作者群大多來自 <a href="https://www.uni-lj.si/university/">https://www.uni-lj.si/university/</a> 電機系.</p>
<p>Ch1 Introduction<br/>Ch2 Homogenous Transformation Matrices<br/>Ch3 Geometric Description of the Robot Mechanism<br/>Ch4 Orientation<br/>Ch5 Two-Segment Robot Manipulator (<a href="http://mde.tw/cd2021/content/W14-W15.html">cd2021 W14-W15.html</a>)</p>
<p>接續前面有關 Robotics 相關數學運算之後的是 Ch7 Robot Sensors.</p>
<p>在 FMS 中各種 Robots 能夠有效進行製造加工, 組立與各種物件的搬運, 主要依賴精確的定位與快速的移動. 其中便牽涉到如何先了解不同 Robots 機構組成與控制方法後, 才能逐步設計出符合需求的系統元件.</p>
<p>我們在建立上述教科書的流程為:</p>
<ol>
<li>從圖書館所購買的 ebooks 中挑選出 Robots 電子書, 下載 pdf 檔案至近端電腦</li>
<li>以授權的 Gmail 帳號登入 cd2020 (2020 Fall) 所開發的 <a href="https://github.com/mdecourse/cd2020pj1">https://github.com/mdecourse/cd2020pj1</a></li>
<li>將近端的 ebook pdf 上傳至遠端系統, 遠端系統會透過 GDrive API 將 pdf 備份存至指定帳號空間中</li>
<li>利用 cd2020pj1 中的網際 pdf split 功能, 將 Ch1 - Ch5 與 Ch7 的檔案分別切出後, 存為兩個檔案.</li>
<li>接著重複相同流程取下 2008 年出版的 <a href="https://link.springer.com/book/10.1007/978-1-84800-336-1">Theory and design of CNC systems</a> Ch1-Ch3 檔案.</li>
<li>最後利用 cd2020pj1 pdf 檔案 combine 功能, 將上述三個檔案結合為一個 pdf 檔案, 就是 <a href="https://drive.google.com/file/d/1xb1Es8N-FxeG10OSnLNDwwi_tXyNTP9t/view?usp=sharing">cad2021_textbook.pdf</a> 課程教材</li>
</ol>
<p>註: <a href="https://www.ilovepdf.com/">https://www.ilovepdf.com/</a> 提供更多元的線上 pdf 檔案服務, 只是必須注意上傳檔案的使用權限, 以及與檔案相關的隱私權保障議題.</p>
<p><a href="https://github.com/mdecourse/cd2020pj1">https://github.com/mdecourse/cd2020pj1</a> 網際程式開發目的, 是利用較為簡單的 pdf 檔案切割與合併功能, 展示機械設計工程師可以利用 Oauth2 協定, 讓參與協同設計的各成員利用既有的 Gmail 帳號登入 (也可以使用 Github, Gitlab, Bitbucket, Heroku 或其他符合 Oauth2 協定的任何系統帳號). 並在網際環境中以 Python 程式操控 server 上的 Solvespace, Solidworks, Inventor 與 NX 等 3D 參數式 CAD, 設法透過動態參數系統的零組件設計來因應各種設計參數產生組合變化的需求.</p>
<p>Python 與 Solidworks API 互動範例: <a href="http://mde.tw/cad2020/content/HW1_SW.html">http://mde.tw/cad2020/content/HW1_SW.html</a></p>
<p>Python 與 Inventor API 互動範例: <a href="http://mde.tw/cad2020/content/HW1_INV.html">http://mde.tw/cad2020/content/HW1_INV.html</a></p>
<p>Python 與 NX12 互動範例: <a href="http://mde.tw/cad2020/content/HW1_NX.html">http://mde.tw/cad2020/content/HW1_NX.html</a></p>
<p>CoppeliaSim User Interface 互動介面: <a href="https://mde.tw/copsim410/content/en/customUIPluginXMLSyntax.htm">https://mde.tw/copsim410/content/en/customUIPluginXMLSyntax.htm</a> 與 <a href="https://mde.tw/copsim410/content/en/bubbleRobTutorial.htm">https://mde.tw/copsim410/content/en/bubbleRobTutorial.htm</a></p>
<p>假如使用者在建立動態模擬場景時, 可以針對各零組件尺寸 (<a href="https://en.wikipedia.org/wiki/Generative_design">Generative Design</a> - 在約束條件與最佳化目標驅使下, 由電腦模型"自行"建構出的設計)與配置組合參數 (<a href="https://en.wikipedia.org/wiki/Configuration_management">Configuration</a> and <a href="https://link.springer.com/book/10.1007/978-3-030-34839-7">Control System Design</a>) 進行調控, 將能透過場景動態輸出最佳化目標, 合成 (Synthesize) 出適用組合設計內容.</p>
<h4>Mirobot</h4>
<p><a href="https://www.wlkata.com/">https://www.wlkata.com/</a> (<a href="http://cn.wlkata.com/">http://cn.wlkata.com/</a>)</p>
<p><a href="https://github.com/mdecourse/mirobot-py">https://github.com/mdecourse/mirobot-py</a></p>
<p><a href="https://www.kickstarter.com/projects/mirobot/mirobot-6-axis-mini-industrial-robot-arm">https://www.kickstarter.com/projects/mirobot/mirobot-6-axis-mini-industrial-robot-arm</a></p>
<p><a href="https://www.youtube.com/watch?v=m1rPqinbdPc&amp;t=712s">https://www.youtube.com/watch?v=m1rPqinbdPc&amp;t=712s</a></p>
<p style="padding-left: 30px;">WLKATA® is a brand owned by Beijing Tsinew Technologies Co., Ltd. in China. The company was founded in December 2017 and focuses on developing minimized industrial robot products for university and STEM education purpose (WLKATA®). The headquarter of Tsinew is located in the Zhongguancun Science and Technology Park, Beijing, China. The major team members of Tsinew have been worked in the field of customization of industrial robot and virtual lab applications for years.<br/><br/>In order to expand the overseas market, a joint-ventured company Wristline INC., New Jersey, USA, was established by Tsinew and the American investor in May 2019. Wristline is responsible for the section of expanding overseas markets and business of Tsinew.<br/><br/>Tsinew upholds the spirit of diligence and hard work. Our team are looking for and willing to work together with like-minded people in the field of robotic engineering education and applications.</p>
<p><a href="https://www.kickstarter.com/projects/mirobot/mirobot-6-axis-mini-industrial-robot-arm/comments"><img alt="" height="449" src="/images/mirobot_comment.png" width="530"/></a></p>
<h4>AR3 Robot</h4>
<p><a href="https://www.anninrobotics.com/">https://www.anninrobotics.com/</a></p>
<p><a href="https://github.com/kentavv/annin_robotics_ar3">https://github.com/kentavv/annin_robotics_ar3</a></p>
<h4>Powerjacks</h4>
<p><a href="https://powerjacks.com/">https://powerjacks.com/</a></p>
<p>選擇設計: <a href="/downloads/powerjacks-screw-jack-design-guide-pjdg-sj-en-01a.pdf">powerjacks-screw-jack-design-guide-pjdg-sj-en-01a.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/wcms-scrum1">https://github.com/mdecourse/wcms-scrum1</a></p>
<p style="padding-left: 30px;"><a href="https://mae.ufl.edu/designlab/DFMA%20Tips/Fundamental_Design_Principles_KCraig.pdf">https://mae.ufl.edu/designlab/DFMA%20Tips/Fundamental_Design_Principles_KCraig.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.mcadcafe.com/nbc/articles/1/1305329/Machine-Design-Procedure-Engineers-Guide-Mechanical-Design-Development">https://www.mcadcafe.com/nbc/articles/1/1305329/Machine-Design-Procedure-Engineers-Guide-Mechanical-Design-Development</a></p><h3>Wishful Thinking 1</h3>
<p>2009 年起, 我們一直鼓勵學生發想, 掛在身上的 f 標誌, 假如能夠上下翻轉一百八十度, 就很像 t 了啊!</p>
<p>10 年後, 胡思亂想終於成真!</p>
<p>大家只要努力玩, 用力想, 砲火夠強的話, 想打哪裡都行!</p>
<p>作夢歸作夢, 請問您能夠拍一個五分鐘的影片上傳到 Youtube:</p>
<ol>
<li>說明為什麼機械設計工程師, 要使用 git 與 github？如何將設計資料同步到 gitlab 與 bitbucket?</li>
<li>說明在 Windows 操作系統上結合 Putty, git 與 github 使用 SSH push 到底機制是如何辦到的?</li>
<li>說明機械設計工程師設法忠實留下各種設計歷程資料的用意何在? (是不想背黑鍋嗎?)</li>
</ol>
<p></p>
<p></p>
<p></p>
<p style="padding-left: 30px;"></p><h2>Stage2</h2>
<h4>任務三:</h4>
<p style="padding-left: 30px;">請問個人電腦上的 3D CAD 套件 SolidWorks 是在什麼情況下被創建的? 能不能利用 DesignView 與 Computervision 這兩個關鍵字找到相關資料?</p>
<p style="padding-left: 60px;">為什麼需要了解個人電腦上的 3D CAD 套件是在什麼情境下騰空而出的? 這些開發者 (有哪些人?) 看到了什麼契機?</p>
<p style="padding-left: 60px;">假如 1995 年至 2000 年是一個 3D CAD 轉進個人電腦的初步發展期, 那麼在 2000 年之後的第一個十年, 個人電腦上的 3D CAD 有何進展?</p>
<p style="padding-left: 60px;">截至目前已經進入二十一世紀的第三個十年, 利用 3D CAD 進行產品開發上, 有何較大的轉變?</p>
<p style="padding-left: 30px;">3-1: 請以編年方式, 從 1950 年至 2020 年從 2D CAD 至目前常見的 3D 套件發展, 分別具備哪些功能與特性.</p>
<p style="padding-left: 30px;">3-2: 在 Generative Design 與 Deep Reinforcement Learning 的帶動下, 未來的 3D CAD 可能會有何種樣貌?</p>
<h4>任務四:</h4>
<p style="padding-left: 30px;">從任務三深入探索, SolidWorks 其實是架構在 <a href="https://en.wikipedia.org/wiki/Geometric_modeling_kernel">Geometric Modeling Kernel</a> (GMK)上的 GUI 程式套件, 而且只能在個人電腦上使用. 請問什麼是 GMK? 請問一般熟知的 3D CAD 套件分別採用哪種 GMK?</p>
<p style="padding-left: 60px;">大家知道為何 Russia 需要自行開發 <a href="https://gfxspeak.com/2013/06/06/does-the-cad-world-need-another-geometry-kernel/">RGK</a> 嗎? (<a href="https://c3dlabs.com/en/blog/team/to-develop-a-world-class-geometric-kernel-is-not-just-difficult-but-also-is-an-extremely-interesting/">Interview</a>)</p>
<p style="padding-left: 30px;">4-1: 請搜尋 GMK 相關資料, 建立一個表格, 列出一般常見的 3D CAD 分別採用何種 GMK.</p>
<p style="padding-left: 60px;"></p>
<h4>任務五:</h4>
<p style="padding-left: 30px;">上面所提的套件開發與 GMK 編寫都離我們太遠了, 在任務五中, 我們來看看能不能自行編譯一套小型的參數式 3D CAD Solvespace, 在接下來的 FMS 模擬, 我們都將優先採用這個自我編譯的 solvespace.exe 來建構零組件, Solvespace 無法輕易建立的複雜外型零組件, 若有協同需求, 則採用 Onshape 建立, 若無協同需求則分別採用 Solidworks 2021, Inventor 2021 與 NX12 建立.</p>
<p style="padding-left: 30px;">5-1: 自行編譯 Windows 10 64 位元環境中的 solvespace.exe.</p>
<p style="padding-left: 30px;">5-2: 請分別利用 Python 程式中的變數值, 控制 Solidworks 2021, Inventor 2021 與 NX12 中所建立的零組件.</p><h3>Task3</h3>
<p>CAD 發展歷史: <a href="http://mde.tw/cadp2018/downloads/cad_history.pdf">http://mde.tw/cadp2018/downloads/cad_history.pdf</a></p>
<p>教育部的<a href="http://dict.revised.moe.edu.tw/cgi-bin/cbdic/gsweb.cgi?ccd=k4ajsX&amp;o=e0&amp;sec1=1&amp;op=sid=%22Z00000093738%22.&amp;v=-2">鑑往知來</a>解釋, 是這樣說的:</p>
<p style="padding-left: 30px;"><span style="background-color: #ccffcc;">觀察過去，就可以推知未來</span>。參見「<a href="http://dict.revised.moe.edu.tw/cgi-bin/cbdic/gsweb.cgi?ccd=k4ajsX&amp;o=e0&amp;sec=sec1&amp;op=sti=%22%E8%A7%80%E5%BE%80%E7%9F%A5%E4%BE%86%22.">觀往知來</a>」條。如：「<span style="background-color: #ffff99;">能夠鑑往知來，就可以避免許多錯誤</span>。」</p>
<p style="padding-left: 30px;">而所謂的觀往知來, 則又是這樣解釋的:</p>
<p style="padding-left: 60px;"><span style="background-color: #ffff99;">觀察過去的事實，便能推知未來可能的變化</span>。語本《列子．說符》：「是以聖人見出以知入，觀往以知來，此其所以先知之理也。」也作「鑑往知來」。</p>
<h4>不管有沒有道理, 大家趕快進行下列工作項目:</h4>
<p style="padding-left: 30px;">3-1: 請以編年方式, 從 1950 年至 2020 年從 2D CAD 至目前常見的 3D 套件發展, 分別具備哪些功能與特性.</p>
<p style="padding-left: 30px;">3-2: 在 Generative Design 與 Deep Reinforcement Learning 的帶動下, 未來的 3D CAD 可能會有何種樣貌?</p>
<p></p><h3>Task4</h3>
<p>Russia 幅員遼闊, 四面環敵所以才需要自行開發 <a href="https://gfxspeak.com/2013/06/06/does-the-cad-world-need-another-geometry-kernel/">RGK</a>, 台灣彈丸小島, <a href="https://dict.idioms.moe.edu.tw/idiomView.jsp?ID=11494&amp;webMd=2&amp;la=0">四海之內皆兄弟</a>, 所以不會有 GMK 斷貨, 或者參數式 3D 繪圖工具下場與 <a href="https://support.microsoft.com/en-us/windows/windows-7-support-ended-on-january-14-2020-b75d4580-2cc7-895a-2c9c-1466d9a53962">Windows 7 support ended</a> 一樣的類似問題.</p>
<p>4-1: 請搜尋 GMK 相關資料, 建立一個表格, 列出一般常見的 3D CAD 分別採用何種 GMK.</p><h3>Task5</h3>
<p>5-1: 自行編譯 Windows 10 64 位元環境中的 solvespace.exe.</p>
<p style="padding-left: 30px;">您可以試著在 Windows 10 環境中利用 Visual Studio C++ 編譯出合用的 solvespace.exe, 以下我們將採用 MSYS2 可攜程式環境 build solvespace.exe.</p>
<h4>背景資料:</h4>
<ol>
<li>Solvespace 採用 CMake 建立編譯流程指令, 轉換為 Make 編譯指令檔案後, 再透過 C++ 編譯器進行後續核心程式碼與外部程式庫連結的工作.</li>
<li>Solvespace 採用自訂的 GUI 介面, 因此只需要 CMake 與 C++ 編譯器, <span style="background-color: #ffff99;">理論上</span> (意思就是沒有想像中簡單) 就可以在各操作系統平台上進行編譯.</li>
</ol>
<h4>Windows 環境編譯 solvespace.exe:</h4>
<ol>
<li>啟動隨身程式系統 - <a href="https://drive.google.com/file/d/1hEGgONw8ahNs7JPAKOurc7JvGfhgO2zY/view?usp=sharing">compile_copsim_for_pj2022.7z</a> (download file size 4 GB, uncompressed file size 14 GB)</li>
<li>取下 <a href="https://github.com/solvespace/solvespace/tree/56719415dea4de7af750227653362f4c8cad78f8">solvespace 5671941 版本</a> 原始碼</li>
<li>Y:\tmp&gt;git clone --recurse-submodules <a href="https://github.com/solvespace/solvespace.git">https://github.com/solvespace/solvespace.git</a></li>
<li>Y:\tmp&gt;cd solvespace</li>
<li>y:\tmp\solvespace&gt;mkdir build</li>
<li>y:\tmp\solvespace\build&gt;cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</li>
<li>y:\tmp\solvespace\build&gt;mingw32-make</li>
<li>編譯結束後, solvespace.exe 位於 Y:\tmp\solvespace\build\bin 目錄中.</li>
<li>在隨身系統命令列中執行 Y:\tmp\solvespace\build\bin\solvespace 就可以開啟 Solvespace.</li>
<li>在 start_ipv6.bat 中加入 start %Disk%:\tmp\solvespace\build\bin\solvespace.exe</li>
</ol>
<p>5-2: 請分別利用 Python 程式中的變數值, 控制 Solidworks 2021, Inventor 2021 與 NX12 中所建立的零組件.</p>
<p style="padding-left: 30px;">我們在實習任務二的工作項目中, 已經提供以下參考資料:</p>
<p style="padding-left: 60px;">Python 與 Solidworks API 互動範例: <a href="http://mde.tw/cad2020/content/HW1_SW.html">http://mde.tw/cad2020/content/HW1_SW.html</a></p>
<p style="padding-left: 60px;">Python 與 Inventor API 互動範例: <a href="http://mde.tw/cad2020/content/HW1_INV.html">http://mde.tw/cad2020/content/HW1_INV.html</a></p>
<p style="padding-left: 60px;">Python 與 NX12 互動範例: <a href="http://mde.tw/cad2020/content/HW1_NX.html">http://mde.tw/cad2020/content/HW1_NX.html</a></p>
<p style="padding-left: 30px;">請著手進行零件程式化變更設計參數的練習, 並且思考假如能夠在 <a href="https://github.com/mdecourse/cd2020pj1">https://github.com/mdecourse/cd2020pj1</a> 網際系統的架構上, 將各種 3D CAD 與網際 API 程式進行互動, 未來機械設計工程師在產品開發流程中, 會得到什麼好處?</p>
<p style="padding-left: 30px;">接下來又要進行想像了. 仔細觀察一下 <a href="https://www.driveworks.co.uk/">https://www.driveworks.co.uk/</a> 運用哪些技術? 可以達到何種效益?</p>
<p style="padding-left: 30px;">假如我們想要利用 Solvespace 建立一個類似的簡單網際系統, 該如何下手? (以 <a href="https://webassembly.org/">WebAssembly</a> 建立的<a href="https://files.whitequark.org/SolveSpace/solvespace.html">網際 Solvespace</a>)</p><h2>Stage3</h2>
<h4>任務六:</h4>
<p style="padding-left: 30px;">我們想像中的 FMS 場景中, 將有一些 Industrial Robots 負責零件加工或組立, 一些 Mobile Robots 擔任半成品運送, 或者利用輸送帶與倉儲系統進行零組件存放.</p>
<p style="padding-left: 30px;">請閱讀教科書中的 Ch1 Introduction 以及 Ch2 Homogeneous Transformation Matrices 後, 準備利用 Solvespace 與 CoppeliaSim 建立一個 SCARA (Selective Compliance Assembly Robot Arm) robot 場景.</p>
<p style="padding-left: 30px;">6-1: 請開啟 MTB robot, 試著利用各種 CAD 套件, 在 CoppeliaSim 中建立一套 SCARA robot.</p>
<p style="padding-left: 30px;">6-2: 我們該使用哪一個版本的 CoppeliaSim, 每一個版本都一樣嗎?</p>
<h4>任務七:</h4>
<p style="padding-left: 30px;">從 6-2 工作項目中, 假如每一套不同版本的 CoppeliaSim 都存在差異, 從哪裡可以得知這些差異?</p>
<p style="padding-left: 30px;">從 5-1 工作項目中, 我們已經學會自行編譯 solvespace.exe, 現在要將模型零組件輸入 CoppeliaSim 中, 請問我們能夠自行編譯 CoppeliaSim 嗎? 編譯這些工具的目的何在?</p>
<p style="padding-left: 30px;">7-1: 請自行編譯 CoppeliaSim 4.1.0 版.</p>
<p style="padding-left: 30px;">7-2: 請利用自行編譯的 solvespace.exe 與 coppeliasim.exe (以及其他 .dll 以及特定的設定檔案與資料結構) 建立本課程所期望的 FMS 系統場景.</p><h3>Task6</h3>
<p>6-1: 請開啟 MTB robot, 試著利用各種 CAD 套件, 在 CoppeliaSim 中建立一套 SCARA robot.</p>
<p>6-2: 我們該使用哪一個版本的 CoppeliaSim, 每一個版本都一樣嗎?</p>
<p>6-3: 請利用隨身程式系統編譯 <a href="https://github.com/mdecourse/scarysim">https://github.com/mdecourse/scarysim</a> 中的 SCARA robot 模擬系統. 嘗試修改這個 Qt C++ 程式碼, 設法完成 CoppeliaSim 範例中 MTB robot 所進行的 pick and place demo.</p>
<h4 style="padding-left: 30px;">設法以隨身程式系統編譯此程式碼:</h4>
<ol>
<li>git clone <a href="https://github.com/mdecourse/scarysim.git">https://github.com/mdecourse/scarysim.git</a></li>
<li>修改 scarysim.pro, 蓋掉第 11 行, 成為 # LIBS     += -lglut -lGLU</li>
<li>cd scarysim</li>
<li>qmake -o Makefile scarysim.pro</li>
<li>mingw32-make -f Makefile.Release 可以在 release 目錄取得 scarysim.exe</li>
<li>因為 scarysim.exe 執行需要 base.obj, arm1.obj, arm2.obj, arm3.obj 等零件外型檔案, 以及對應的 .mtl 材質檔案, 因此可將 scarysim.exe 移至倉儲根目錄執行.</li>
<li>由於此套程式碼在 Target 模式下, 零組件間會造成干涉, 表示其 Inverse Kinematic 運算並不正確, 請設法修正此錯誤後, 修改其零件尺寸與操作控制方法, 設法模擬 MTB 的 pick and place demo 範例.</li>
</ol><h3>Task7</h3>
<p>7-1: 請自行編譯 CoppeliaSim 4.1.0 版.</p>
<p>假如能夠在編譯過程, 整理其中所牽涉的各種 Geometric Constraints, Symbolic and Numerial Analysis, Computer Programming Techniques, 並且分門別類說明從 Lua, Python remote API 與 BlueZero remote API 之間的應用範例, 應該是一個不錯的碩士題目.</p>
<p>在這裡, 我們將試著看看, 該如何利用 MSYS2 編譯出合用的 CoppeliaSim 4.1.0. 至於為何不直接編譯 4.2.0, 具體情況是:</p>
<ol>
<li>4.2.0 版原始程式碼中的 static calculations (即利用 GUI 方式設定) 已經全部改為 dynamic 方式設定 (即只能透過 Scripting 方式設定), 與先前希望採 GUI 設定, 動態設定以及自行編寫程式設定 calculations 的流程相左, 而且 Sensor 功能疑似存在 bugs 有待排除.</li>
<li>而 4.2.0 rev6 之後的版本, 已經從 Lua 5.1 升級到 5.3, 各項功能正在大幅修改, 目前正在導入 <a href="https://github.com/pantor/ruckig">Ruckig</a> 過程當中, 必須等到下一個穩定版 release 之後, 才能導入編譯.</li>
</ol>
<p>編譯 CoppeliaSim 4.1.0 教育版：</p>
<ol>
<li>啟動隨身程式系統 - <a href="https://drive.google.com/file/d/1hEGgONw8ahNs7JPAKOurc7JvGfhgO2zY/view?usp=sharing">compile_copsim_for_pj2022.7z</a> (download file size 4 GB, uncompressed file size 14 GB)</li>
<li>y:\tmp&gt;mkdir cop410</li>
<li>y:\tmp\&gt;cd cop410</li>
<li>y:\tmp\cop410&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/CoppeliaSimLib.git">https://github.com/CoppeliaRobotics/CoppeliaSimLib.git</a></li>
<li>y:\tmp\cop410&gt;mkdir programming</li>
<li>y:\tmp\cop410&gt;cd programming</li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/coppeliaSimClientApplication.git">https://github.com/CoppeliaRobotics/coppeliaSimClientApplication.git</a></li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/include.git">https://github.com/CoppeliaRobotics/include.git</a></li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/common.git">https://github.com/CoppeliaRobotics/common.git</a></li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/simMath.git">https://github.com/CoppeliaRobotics/simMath.git</a></li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/libPlugin.git">https://github.com/CoppeliaRobotics/libPlugin.git</a></li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/simExtAssimp.git">https://github.com/CoppeliaRobotics/simExtAssimp.git</a></li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/simExtIK.git">https://github.com/CoppeliaRobotics/simExtIK.git</a></li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/simExtGeom.git">https://github.com/CoppeliaRobotics/simExtGeom.git</a></li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/simExtRemoteApi.git">https://github.com/CoppeliaRobotics/simExtRemoteApi.git</a></li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/remoteApiBindings.git">https://github.com/CoppeliaRobotics/remoteApiBindings.git</a></li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/bluezero.git">https://github.com/CoppeliaRobotics/bluezero.git</a> (因為沒有 coppeliasim-v4.1.0 版, 因此使用最新版)</li>
<li>y:\tmp\cop410\programming&gt;git clone --recurse-submodules <a href="https://github.com/CoppeliaRobotics/simExtCodeEditor.git">https://github.com/CoppeliaRobotics/simExtCodeEditor.git</a></li>
</ol>
<p>以上取得的倉儲都是當下最新版本, 因為要編譯 coppeliasim-v4.1.0 版本, 因此以 CoppeliaSimLib 倉儲為例, 必須 checkout coppeliasim-v4.1.0 版本內容:</p>
<ol>
<li>Y:\tmp\cop410&gt;cd CoppeliaSimLib</li>
<li>Y:\tmp\cop410\CoppeliaSimLib&gt;git checkout coppeliasim-v4.1.0</li>
<li>查驗目前倉儲所在的版本號, 可以使用 Y:\tmp\cop410\CoppeliaSimLib&gt;git show</li>
</ol>
<p>其餘 c:\tmp\cop410\programming 目錄下的各倉儲也必須取出對應的 coppeliasim-v4.1.0 版本內容.</p>
<p>執行 CoppeliaSimLib 的編譯, 需要 config.pri 中的相關設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># location of boost headers:
    BOOST_INCLUDEPATH = "Y:/msys64_20210419/mingw64/include/boost"

# location of lua headers:
    LUA_INCLUDEPATH = "Y:/lua-5.1.5/src" 

# lua libraries to link:
    LUA_LIBS = "y:/lua-5.1.5/src/liblua.a" 
 
# qscintilla location:
    QSCINTILLA_DIR = "y:/QScintilla_gpl-2.11.2"

# qscintilla headers:
    QSCINTILLA_INCLUDEPATH = "$${QSCINTILLA_DIR}/include" "$${QSCINTILLA_DIR}/Qt4Qt5"
 
# qscintilla libraries to link:
    QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/libqscintilla2_qt5.dll.a" 

# Make sure if a config.pri is found one level above, that it will be used instead of this one:
    exists(../config.pri) { include(../config.pri) }

</pre>
<p>由上列 config.pri 設定檔案可以得知必須要先編譯 lua-5.1.5 與 QScintilla_gpl-2.11.2, 分別取得對應的程式庫之後, 再編譯 CoppeliaSimLib.</p>
<p>設定完成後, 執行 Y:\tmp\cop410\CoppeliaSimLib&gt;qmake -o Makefile coppeliaSimLib.pro</p>
<p>接著執行 Y:\tmp\cop410\CoppeliaSimLib&gt;mingw32-make -f Makefile.Release</p>
<p>編譯結束後, 可以在 Release 目錄中建立 coppeliaSim.dll, 這是 CoppeliaSim 的主要動態連結程式庫.</p>
<p>接著為了執行自行編譯的 CoppeliaSim 4.1.0, 在 Y:\tmp\cop410 中建立 coppeliasim410 目錄, 用來存放編譯完成的檔案, 並且配合 CoppeliaSim 啟動時所需的相關設定內容進行後續的設定.</p>
<p>Y:\tmp\cop410&gt;mkdir coppeliasim410</p>
<p>將前面已經編譯完成的 coppeliaSim.dll 放入 Y:\tmp\cop410\coppeliasim410 目錄中, 接著進入 Y:\tmp\cop410\programming\coppeliaSimClientApplication 目錄, 以下列命令建立 coppeliaSim.exe 執行檔.</p>
<p>而在建立 coppeliaSim.exe 之前, 需要再編輯 coppeliaSim_resource.rc 檔案, 下載 coppeliaSim.ico, 並且開啟 coppeliaSim.pro 中第 42 行 RC_ICONS += coppeliaSim.ico 設定, 以便將 coppeliaSim.ico 圖像編譯後放入 coppeliaSim.exe, coppeliaSim_resource.rc 設定內容如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#include &lt;windows.h&gt;

IDI_ICON1	ICON	DISCARDABLE	"Y:/tmp/cop410/programming/coppeliaSimClientApplication/coppeliaSim.ico"

VS_VERSION_INFO VERSIONINFO
	FILEVERSION 0,0,0,0
	PRODUCTVERSION 0,0,0,0
	FILEFLAGSMASK 0x3fL
#ifdef _DEBUG
	FILEFLAGS VS_FF_DEBUG
#else
	FILEFLAGS 0x0L
#endif
	FILEOS VOS__WINDOWS32
	FILETYPE VFT_DLL
	FILESUBTYPE 0x0L
	BEGIN
		BLOCK "StringFileInfo"
		BEGIN
			BLOCK "040904b0"
			BEGIN
				VALUE "CompanyName", "\0"
				VALUE "FileDescription", "\0"
				VALUE "FileVersion", "0.0.0.0\0"
				VALUE "LegalCopyright", "\0"
				VALUE "OriginalFilename", "coppeliaSim.exe\0"
				VALUE "ProductName", "coppeliaSim\0"
				VALUE "ProductVersion", "0.0.0.0\0"
			END
		END
		BLOCK "VarFileInfo"
		BEGIN
			VALUE "Translation", 0x0409, 1200
		END
	END
/* End of Version info */
</pre>
<p>Y:\tmp\cop410\programming\coppeliaSimClientApplication&gt;qmake -o Makefile coppeliaSim.pro</p>
<p>Y:\tmp\cop410\programming\coppeliaSimClientApplication&gt;mingw32-make -f Makefile.Release</p>
<p>編譯完成後可以在 Y:\tmp\cop410\programming\coppeliaSimClientApplication\release 目錄中建立 coppeliaSim.exe 執行檔.</p>
<p>將 coppeliaSim.exe 與 coppeliaSim.dll 放入 Y:\tmp\cop410\coppeliasim410 目錄後, 在可攜系統的命令列中, 執行 Y:\tmp\cop410\coppeliasim410\coppeliaSim 已經可以開啟 coppeliaSim 4.1.0 版, 且首次啟動, coppeliaSim.exe 會自動建立 system 目錄以及其中的 usrset.txt 使用者設定檔案.</p>
<p>接下來必須在 Y:\tmp\cop410\coppeliasim410 目錄加上以下倉儲的內容:</p>
<p><a href="https://github.com/CoppeliaRobotics/scenes.git">https://github.com/CoppeliaRobotics/scenes.git</a></p>
<p><a href="https://github.com/CoppeliaRobotics/models.git">https://github.com/CoppeliaRobotics/models.git</a></p>
<p><a href="https://github.com/CoppeliaRobotics/lua.git">https://github.com/CoppeliaRobotics/lua.git</a></p>
<p><a href="https://github.com/CoppeliaRobotics/helpFiles.git">https://github.com/CoppeliaRobotics/helpFiles.git</a></p>
<p>分別取下各倉儲內容後, 也是必須進行 git checkout coppeliasim-v4.1.0, 簽出與 coppeliaSim.exe 及 coppeliasim.dll 系統對應的版本.</p>
<p>編譯流程到這個階段, 再從命令列中啟動 coppeliaSim.exe 已經可以在看到圖型介面中的 Model browser 區域已經載入 models 目錄中的 .ttm, 但是 default 場景還無法顯示, 因為在 system 系統目錄中, 還需要有 dfltscn.ttt 內定場景檔案 (標示在 <a href="https://github.com/CoppeliaRobotics/CoppeliaSimLib/blob/12e4411ea9b9067d012da43b464e69a7456c2fd8/sourceCode/interfaces/simFlavor.cpp#L203">simFlavor.cpp 檔案中第 203 行</a>), 隨後還需要加入更多的延伸模組程式庫, 所編譯完成的 CoppeliaSim 4.1.0 程式套件, 才能配合接下來的電腦輔助設計實習與協同產品設計實習課程使用.</p>
<p>此外, 過去的相關課程中所使用的 CoppeliaSim remote API 已經被設定為 <a href="https://www.coppeliarobotics.com/helpFiles/en/legacyRemoteApiOverview.htm">Legacy Python remote API</a>, 本學期開始將要在 FMS 系統場景的建構中使用 <a href="https://www.coppeliarobotics.com/helpFiles/en/b0RemoteApiOverview.htm">BlueZero remote API</a> 架構進行遠端控制.</p>
<p>7-2: 請利用自行編譯的 solvespace.exe 與 coppeliasim.exe (以及其他 .dll 以及特定的設定檔案與資料結構) 建立本課程所期望各式 FMS 系統場景.</p>
<p>本學期在 CoppeliaSim 機電資整合系統建構流程, 也希望能針對 <a href="https://arxiv.org/pdf/2105.04830.pdf">Jerk-limited Real-time Trajectory Generation with Arbitrary Target States</a> 的技術進行了解, 假如能在 <a href="https://github.com/pantor/ruckig">https://github.com/pantor/ruckig</a> 與目前正在進行的 <a href="https://github.com/CoppeliaRobotics/CoppeliaSimLib/commit/d4486bcc89ba0d40a4fefbda5c82546efcc4b33f">ruckig 延伸程式套件編寫</a>的引導下進行模擬應用, 將會是個不錯的任務工作項目.</p><h3>Task7-1-1</h3>
<p>當我們在 Task7-1, 利用 <a href="https://drive.google.com/file/d/1hEGgONw8ahNs7JPAKOurc7JvGfhgO2zY/view?usp=sharing">compile_copsim_for_pj2022.7z</a> (download file size 4 GB, uncompressed file size 14 GB) 編譯 <a href="https://github.com/CoppeliaRobotics">CoppeliaSim</a> 4.1.0 版的過程中, 轉進 <a href="https://github.com/CoppeliaRobotics/simExtUI/tree/cc2fda5bb20b3ab2ddad758bbb905e46bc205068">simExtUI coppeliasim-v4.1.0</a> 時, 發現其中編譯過程需要的 external 倉儲連結已經失效. 也就是 QDataflowCanvas.</p>
<p>為了找出此一倉儲的原始資料. 可以從該倉儲當年的 <a href="https://web.archive.org/web/20201117001349/https://github.com/fferri/QDataflowCanvas/stargazers">Web archive</a> 資料中找到潛在的 fork 倉儲用戶. 從中可以追朔到 <a href="https://github.com/HaojieTian/QDataflowCanvas">https://github.com/HaojieTian/QDataflowCanvas</a> 倉儲連結, 並且發現 QDataflowCanvas 已經同步至 <a href="https://github.com/Qt-Widgets/QDataflowCanvas">https://github.com/Qt-Widgets/QDataflowCanvas</a>.</p>
<p>因此除了建立 <a href="https://github.com/mdecourse/QDataflowCanvas">https://github.com/mdecourse/QDataflowCanvas</a> 之外, 也根據 CoppeliaSim 4.1.0 版本倉儲對應的 <a href="https://github.com/CoppeliaRobotics/simExtUI/tree/cc2fda5bb20b3ab2ddad758bbb905e46bc205068/external">3e2cbcd</a> 版本, 從已經更動連結的 QDataflowCanvas 倉儲中 checkout 出來.</p>
<p>之後才能設法編譯 4.1.0 版本的 simExtUI plugin 動態連結程式庫 (如下所示, 4.1.0 的 dll 名稱為 simExtCustomUI.dll, 而非 4.2.0 之後的 simExtUI.dll).</p>
<p>而隨後在執行:</p>
<p style="padding-left: 30px;">Y:\tmp\cop410\programming\simExtUI\build&gt;cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release</p>
<p>的過程中發現 build 目錄中並沒有建立 generated 目錄, 在此採用手動建立後, 再執行:</p>
<p style="padding-left: 30px;">Y:\tmp\cop410\programming\simExtUI\build&gt;mingw32-make</p>
<p>即可取得 libsimExtCustomUI.dll, 將檔名改為 simExtCustomUI.dll 後, 放入 Y:\tmp\cop410\coppeliasim410 目錄後, 就可以在啟動 coppeliaSim.exe 後載入系統.</p>
<p>相關說明也寫在這裡: <a href="https://github.com/mdecourse/simExtUI/discussions/1">https://github.com/mdecourse/simExtUI/discussions/1</a></p>
<p>上述 QDataflowCanvas 連結失效的情況, 也發生在 <a href="https://github.com/CoppeliaRobotics/simExtDataflow/tree/5895fe08844f5e59b1f4e34832ef1fdeecb102e0/external">simExtDataflow</a> 倉儲, 可以採相同的方法解決.</p>
<h3>Task7-1-2</h3>
<p>為了執行 <a href="https://github.com/mdecourse/models/blob/master/robots/non-mobile/MTB%20robot.ttm">MTB_robot_pick_and_place.ttm</a>, 必須要編譯 <a href="https://github.com/mdecourse/simExtMTB">https://github.com/mdecourse/simExtMTB</a> 與 <a href="https://github.com/mdecourse/mtbServer">https://github.com/mdecourse/mtbServer</a>.</p>
<p>這兩個倉儲都帶有 .pro 編譯設定檔案. 因此可以使用:</p>
<p style="padding-left: 30px;">qmake -o Makefile simExtMTB.pro</p>
<p style="padding-left: 30px;">mingw32-make -f Makefile.Release</p>
<p>以及</p>
<p style="padding-left: 30px;">qmake -o Makefile mtbServer.pro</p>
<p style="padding-left: 30px;">mingw32-make -f Makefile.Release</p>
<p>分別完成編譯, 取得 simExtMTB.dll 與 mtbServer.exe</p>
<p><a href="https://github.com/CoppeliaRobotics/bubbleRobServer">https://github.com/CoppeliaRobotics/bubbleRobServer</a></p>
<p style="padding-left: 30px;">qmake -o Makefile bubbleRobServer.pro</p>
<p style="padding-left: 30px;">mingw32-make -f Makefile.Release</p>
<p><a href="https://github.com/CoppeliaRobotics/b0_bubbleRob">https://github.com/CoppeliaRobotics/b0_bubbleRob</a></p>
<p>config.pri</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># location of boost headers
#    BOOST_INCLUDEPATH = "d:/coppeliaRobotics/programming/vcpkg/installed/x64-windows/include" # (e.g. Windows)

BOOST_INCLUDEPATH = "Y:/msys64_20210419/mingw64/include/boost"
    
# Boost libraries to link:
#    BOOST_LIB_PATH = "D:/coppeliaRobotics/programming/vcpkg/installed/x64-windows/lib" # (e.g. Windows)

BOOST_LIB_PATH = "Y:/msys64_20210419/mingw64/lib"

# location of lua headers
#    LUA_INCLUDEPATH = "d:/lua-5.1.5/src"

LUA_INCLUDEPATH = "Y:/lua-5.1.5/src"

# lua libraries to link
#    LUA_LIBS = "d:/lua-5.1.5/src/lua51.lib" # (e.g. Windows)

LUA_LIBS = "Y:/lua-5.1.5/liblua.a"

# jdk location
#    JDK_DIR = "C:/Program Files/Java/jdk1.7.0_40" # (e.g. Windows)

# jdk header path
#    JDK_INCLUDEPATH = "$${JDK_DIR}/include" "$${JDK_DIR}/include/win32" # (e.g. Windows)

# location of B0 headers:
#    B0_INCLUDEPATH = "d:/coppeliaRobotics/programming/blueZero/include" # (e.g. Windows)

B0_INCLUDEPATH = "Y:/tmp/cop410/programming/bluezero/include"

# B0 libraries to link:
#    B0_LIB = "d:/coppeliaRobotics/programming/blueZero/build/Release/b0.lib" # (e.g. Windows)
#    B0_LIB_STATIC = "d:/coppeliaRobotics/programming/blueZero/build/Release/b0-static.lib" # (e.g. Windows)

B0_LIB = "Y:/tmp/cop410/programming/bluezero/libb0.dll.a"
B0_LIB_STATIC = "Y:/tmp/cop410/programming/bluezero/libb0-static.a"

#ZMQ:
#    ZMQ_LIB = "D:\coppeliaRobotics\programming\vcpkg\installed\x64-windows\lib\libzmq-mt-4_3_1.lib" # (e.g. Windows)   
    
# ZLIB:    
#    ZLIB_LIB = "D:\coppeliaRobotics\programming\vcpkg\installed\x64-windows\lib\zlib.lib" # (e.g. Windows)

ZLIB_LIB = "Y:/msys64_20210419/mingw64/lib/libz.a"
ZMQ_LIB = "Y:/tmp/cop410/programming/libzmq/libzmq.dll.a"

# qscintilla location:
#    QSCINTILLA_DIR = "d:/QScintilla_commercial-2.10.8" # (e.g. Windows)

QSCINTILLA_DIR = "y:/QScintilla_gpl-2.11.2"

# qscintilla headers:
#    QSCINTILLA_INCLUDEPATH = "$${QSCINTILLA_DIR}/include" "$${QSCINTILLA_DIR}/Qt4Qt5" # (e.g. Windows)

QSCINTILLA_INCLUDEPATH = "$${QSCINTILLA_DIR}/include" "$${QSCINTILLA_DIR}/Qt4Qt5"

# qscintilla libraries to link:
#    QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/build-qscintilla-Desktop_Qt_5_9_0_MSVC2017_64bit2-Release/release/qscintilla2_qt5.lib" # (e.g. Windows)

QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/libqscintilla2_qt5.dll.a" 
    
# Make sure if a config.pri is found one level above, that it will be used instead of this one:
    exists(../config.pri) { include(../config.pri) }

</pre>
<p>b0_bubbleRob.pro 修改部分:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">win32 {
    CPPVERSION { # on Windows, currently only with static lib (B0 issue)
        LIBS += $$B0_LIB_STATIC
        LIBS += $$ZMQ_LIB
        LIBS += $$ZLIB_LIB
        LIBS += $$LZ4_LIB
        LIBS += "libboost_system-mt.a"
        LIBS += "libboost_thread-mt.a"
        LIBS += "libboost_regex-mt.a"
        LIBS += "libboost_date_time-mt.a"
        LIBS += "libboost_filesystem-mt.a"
        LIBS += "libboost_program_options-mt.a"
    } else {
        LIBS += $$B0_LIB
    }
    LIBS += -L$$BOOST_LIB_PATH
}</pre>
<p>執行 qmake -o Makefile bubbleRobServer.pro 後, 仍需局部修改 Makefile.Release 有關 LIBS 設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">LIBS = Y:/tmp/cop410/programming/bluezero/libb0-static.a 
Y:/tmp/cop410/programming/libzmq/libzmq.dll.a 
Y:/msys64_20210419/mingw64/lib/libz.a 
Y:/msys64_20210419/mingw64/lib/libboost_system-mt.a 
Y:/msys64_20210419/mingw64/lib/libboost_thread-mt.a 
Y:/msys64_20210419/mingw64/lib/libboost_regex-mt.a 
Y:/msys64_20210419/mingw64/lib/libboost_date_time-mt.a 
Y:/msys64_20210419/mingw64/lib/libboost_filesystem-mt.a 
Y:/msys64_20210419/mingw64
/lib/libboost_program_options-mt.a -lws2_32 
Y:/msys64_20210419/mingw64/lib/libz.a  Y:/tmp/cop410/programming/lz4/liblz4.dll.a
</pre>
<p><br/>至於編譯 simExtB0 必須修改 CMakelists.txt, 除了一定要將 ${Boost_LIBRARIES} 從原先最先連結的順序單獨取出放在 ws2_32 程式庫連結之前:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">target_link_libraries(simExtBlueZero  ${Boost_LIBRARIES})
target_link_libraries(simExtBlueZero ws2_32)</pre>
<p>編譯結束後, 可以在 build 中取得 libsimExtBlueZero.dll, 必須改名為 simExtBlueZero.dll 之後放入 Y:\tmp\cop410\coppeliasim410 目錄中, 啟動 coppeliaSim.exe 後即可載入.</p>
<p>有關 simExtOMPL 的部分, 由於 coppeliasim-v4.1.0 版本編譯時無法在單獨編譯 <a href="https://github.com/ompl/ompl">ompl </a>程式庫後, 通過設定載入, 因此只能取用官方編譯的 CoppeliaSim 4.1.0 rev1 版本中的 simExtOMPL.dll 加上官方 4.1.0 rev1 版本目錄中的 boost_serialization-vc141-mt-x64-1_70.dll, 最後再疊上在 MSYS2 自行編譯的 libompl.dll, 以便能正常使用 <a href="https://ompl.kavrakilab.org/">OMPL</a> (Open Motion Planning Library) 相關範例.</p>
<h3>Task7-1-3</h3>
<h4>協同設計的挑戰</h4>
<p><a href="https://github.com/mdecourse/copsim410">https://github.com/mdecourse/copsim410</a> 是 CoppeliaSim 4.1.0 的 <a href="https://github.com/CoppeliaRobotics/helpFiles">helpFiles</a>, 即便是開發 V-rep 與 CoppeliaSim 的原始團隊, 在維護各版本的技術手冊, 其實與其他研發團隊都面臨相同的協同產品設計問題, 也就是如何在多人 (其實從 CoppeliaSim 的提交紀錄來看, 只有兩位開發者) 不斷對 CoppeliaSim 各模組改版的同時 (主要進行除錯, 移除舊功能, 增加新功能, 設法相容於舊版本等工作項目), 如何維護各版本完整的技術手冊.</p>
<h4>CoppeliaSim 技術手冊的問題</h4>
<p>其實至今 CoppeliaSim 的公開倉儲中, 仍然看不到有完善的技術手冊管理方法, 作為競爭對手之一的 <a href="https://github.com/cyberbotics/webots">Webots 倉儲</a>, 可能因為參與者較多 (60 幾人), 採用 <a href="https://github.com/cyberbotics/webots/tree/master/docs/js">showdown</a> 即時將 Markdown 轉為 html 外, 也利用 <a href="https://github.com/cyberbotics/webots/blob/master/.github/workflows/tests_doc.yml">Github Actions</a> 協助處理技術文件的查驗.</p>
<h4>目前仍以 CoppeliaSim 研究優先</h4>
<p>然而, 由於 V-rep (即現在的 CoppeliaSim) 早在 2013 年 V3.0.0 時就已經<a href="https://www.coppeliarobotics.com/helpFiles/en/versionInfo.htm">開源</a>, 比 Webots 早了 6 年 (<a href="https://cyberbotics.com/doc/blog/Webots-2019-a-release">2019a 才開源</a>), 因此目前 CoppeliaSim 的<a href="https://github.com/CoppeliaRobotics">各模組原始碼</a>即使看似紛亂, 但是就 accessibility 來說, 仍比肥大的 Webots (模型檔案延續 1997 年老舊的 VRML 2.0 架構, 但優點是透過 <a href="https://cyberbotics.com/doc/guide/web-scene">X3D 與 HTML5</a>, 可以將模型直接轉 Web-based 瀏覽) 容易上手.</p>
<h4>Task7-1-3 任務目的</h4>
<p>由於上課查詢技術資料的需要, 我們將要設法維護 <a href="https://github.com/mdecourse/copsim410">https://github.com/mdecourse/copsim410</a> 倉儲, 在其中特定目錄 (例如: content/markdown) 中加入額外的技術手冊或範例, 但是採用 Markdown 格式編寫, 然後再透過 Github Actions 編寫程式按鈕, 專門處理:</p>
<ol>
<li>將 Markdown 格式檔案, 以 Pandoc 轉為 html, 融入 content/en 或 content/tw 中</li>
<li>安裝 Python 與相關模組, 執行 <a href="https://github.com/mdecourse/copsim410/blob/main/content/generate_index.py">content/generate_index.py</a>, 以便建立關鍵字搜尋 <a href="https://github.com/mdecourse/copsim410/blob/main/content/tipuesearch_content.js">tipuesearch_content.js</a> 檔案.</li>
</ol>
<p>最後若再設法將處理完成的各版本 helpFiles 與近端的 <a href="https://fossil-scm.org/home/doc/trunk/www/embeddeddoc.wiki">Fossil SCM documentation</a> 同步, 將會是當下最佳的技術研發管理流程.</p><h2>簡化模型</h2>
<p>當使用者在 CoppeliaSim 中建立場景時, 為了讓機電模型逼真, 零組件必須採用機械製造與組立時的幾何外型, 但是這些符合人因工業設計或製造流程所需的幾何造型, 通常具有平滑曲面, 一旦轉為 STL 格式, import 入 CoppeliaSim 場景後, 因為帶有許多網格, 若直接利用這些複雜零件執行動態模擬, 需要大量運算, 必須要在高階電腦與顯示卡上進行模擬, 才能非常順暢, 因此在一般個人電腦上, 會將模擬場景中的零件分為顯示用零組件 (visible parts) 與運算用零組件 (simulation parts), 亦即, 運算用的零組件必須從顯示用複雜零組件進行簡化. 詳細說明可參見: <a href="https://mde.tw/copsim410/content/en/buildingAModelTutorial.htm">https://mde.tw/copsim410/content/en/buildingAModelTutorial.htm</a></p>
<p>以下就是 CoppeliaSim 用於簡化模型的兩個程式庫:</p>
<h4>simExtQhull</h4>
<p>由於目前 <a href="https://mde.tw">KMOLab</a> 所使用的 MSYS2, 已經是 GNU 10.3.0 的 C/C++ 編譯器, 在建立 <a href="https://github.com/CoppeliaRobotics/simExtQhull/tree/02edba06e65e9973d6c60bc4fe11c4364792aa26">https://github.com/CoppeliaRobotics/simExtQhull 4.1.0 版</a>所產生的 simExtQhull.dll, 無法正確簡化零件, 原因是當時所帶的 qhull 原始碼過於老舊, 因此必須從 <a href="https://github.com/qhull/qhull">https://github.com/qhull/qhull</a> 倉儲中更新.</p>
<p>只不過, 新版的 qhull 原始碼整體架構已經與 4 年前 CoppeliaSim (當時應該仍稱為 V-rep) 所引用的 qhull 原始碼有很大出入, 因此從 <a href="https://github.com/qhull/qhull">https://github.com/qhull/qhull</a> 倉儲取下原始碼之後, 在不更動 simExtQhull.pro 的情況下, 必須從 qhull\src\libqhull 取下所有檔案, 然後放入 cop410\programming\simExtQhull\qhull 目錄中.</p>
<p>如此所建立的 simExtQhull.dll 就可以正確用來簡化所轉入的 STL 模型, 所牽涉的指令為 Edit/Morph selection into convex shapes.</p>
<h4>simExtOpenMesh</h4>
<p>利用 simExtQhull.dll 將 STL 簡化為 convex 模型後, 若需要再進一步簡化模型中的網格數目, 就必須使用 simExtOpenMesh.dll.</p>
<p>當我們檢查 <a href="https://github.com/CoppeliaRobotics/simExtOpenMesh/tree/f6c04520626667f69f6867f5979fc3a48efec469">simExtOpenMesh 4.2.0 rev5</a> 原始碼時, 發現已經比 <a href="https://github.com/CoppeliaRobotics/simExtOpenMesh/tree/b43edba9a18ccfe63b4f506291078bd946cffafe">simExtOpenMesh 4.1.0</a> 多了一個 CMakeLists.txt, 因為 4.2.0 rev5 可以自行下載 <a href="https://graphics.rwth-aachen.de:9000/OpenMesh/OpenMesh/-/releases">OpenMesh-8.1</a> 的原始碼, 但 4.1.0 則只能透過 simExtOpenMesh.pro 進行編譯, 或者自行建立對應的 CMakeLists.txt.</p>
<p>在此我們決定自行取下 OpenMesh-8.1 的原始碼, 以 CMake 編譯出程式庫後, 修改 simExtOpenMesh.pro 有關導入標頭檔案與程式庫的部分如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">INCLUDEPATH += "./OpenMesh-8.1/src"
LIBS += "./OpenMesh-8.1/libOpenMeshCore.a" \
"./OpenMesh-8.1/libOpenMeshTools.a" \</pre>
<p>就可以順利以:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">qmake -o Makefiles simExtOpenMesh.pro
mingw32-make -f Makefile.Release</pre>
<p>建立 simExtOpenMesh.dll, 此一動態程式庫所牽涉的指令為 Edit/Decimate selected shape...</p>
<p>使用者可以下載上述兩個 CoppeliaSim 4.1.0 版本中修正過的 simExtQhull 與 simExtOpenMesh 原始碼: <a href="https://drive.google.com/file/d/1owiRDP1t_TwFhnWLIMav1dqdrbRrLBjy/view?usp=sharing">simExtQhull_simExtOpenMesh.7z</a></p><h1>資料管理</h1>
<p>本倉儲檔案分別同步存放於 Github, Gitlab 與 Bitbucket.</p>
<p>與 CoppeliaSim 相關的檔案則分別存放於:</p>
<p style="padding-left: 30px;">2021fall At mde</p>
<p style="padding-left: 30px;">cad2021 At mde</p>
<p style="padding-left: 30px;">coppeliasim At mde</p>
<p style="padding-left: 30px;">cop410 At mde</p>
<p style="padding-left: 30px;">cop425 At mde</p>
<p style="padding-left: 30px;">vrep At mde</p>
<h2>cad2020</h2>
<h4>SciTE, Tiny C, ANSI C, gnuplot, Runge-Kutta:</h4>
<p style="padding-left: 30px;"><a href="https://mde.tw/cad2020/content/W7.html">https://mde.tw/cad2020/content/W7.html</a> </p>
<p></p>
<p></p>
<p style="padding-left: 30px;"></p>
<p style="padding-left: 30px;"></p>
<p></p>